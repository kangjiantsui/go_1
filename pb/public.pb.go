// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.10.0
// source: public.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RecordUpdateStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RType      RECORD  `protobuf:"varint,1,opt,name=rType,proto3,enum=RECORD" json:"rType,omitempty"` // 记录类型
	BType      int32   `protobuf:"varint,2,opt,name=bType,proto3" json:"bType,omitempty"`             // 玩法大类
	Mode       int32   `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`               // 玩法小类
	AId        int32   `protobuf:"varint,4,opt,name=aId,proto3" json:"aId,omitempty"`                 // 球员id
	CGoal      int32   `protobuf:"varint,5,opt,name=cGoal,proto3" json:"cGoal,omitempty"`             // 进球变化值
	CScore     int32   `protobuf:"varint,6,opt,name=cScore,proto3" json:"cScore,omitempty"`           // 得分变化值
	CIsWin     int32   `protobuf:"varint,7,opt,name=cIsWin,proto3" json:"cIsWin,omitempty"`           // 是否胜利
	CCup       int32   `protobuf:"varint,8,opt,name=cCup,proto3" json:"cCup,omitempty"`               // 奖杯变化值
	CMax       int32   `protobuf:"varint,9,opt,name=cMax,proto3" json:"cMax,omitempty"`               // 最大记录变化值
	CScoreDiff int32   `protobuf:"varint,10,opt,name=cScoreDiff,proto3" json:"cScoreDiff,omitempty"`  // 分数差
	AList      []int32 `protobuf:"varint,11,rep,packed,name=aList,proto3" json:"aList,omitempty"`     // 出战球员
	Charge     int32   `protobuf:"varint,12,opt,name=charge,proto3" json:"charge,omitempty"`          // 充值 分
}

func (x *RecordUpdateStruct) Reset() {
	*x = RecordUpdateStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordUpdateStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordUpdateStruct) ProtoMessage() {}

func (x *RecordUpdateStruct) ProtoReflect() protoreflect.Message {
	mi := &file_public_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordUpdateStruct.ProtoReflect.Descriptor instead.
func (*RecordUpdateStruct) Descriptor() ([]byte, []int) {
	return file_public_proto_rawDescGZIP(), []int{0}
}

func (x *RecordUpdateStruct) GetRType() RECORD {
	if x != nil {
		return x.RType
	}
	return RECORD_R_CUP
}

func (x *RecordUpdateStruct) GetBType() int32 {
	if x != nil {
		return x.BType
	}
	return 0
}

func (x *RecordUpdateStruct) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *RecordUpdateStruct) GetAId() int32 {
	if x != nil {
		return x.AId
	}
	return 0
}

func (x *RecordUpdateStruct) GetCGoal() int32 {
	if x != nil {
		return x.CGoal
	}
	return 0
}

func (x *RecordUpdateStruct) GetCScore() int32 {
	if x != nil {
		return x.CScore
	}
	return 0
}

func (x *RecordUpdateStruct) GetCIsWin() int32 {
	if x != nil {
		return x.CIsWin
	}
	return 0
}

func (x *RecordUpdateStruct) GetCCup() int32 {
	if x != nil {
		return x.CCup
	}
	return 0
}

func (x *RecordUpdateStruct) GetCMax() int32 {
	if x != nil {
		return x.CMax
	}
	return 0
}

func (x *RecordUpdateStruct) GetCScoreDiff() int32 {
	if x != nil {
		return x.CScoreDiff
	}
	return 0
}

func (x *RecordUpdateStruct) GetAList() []int32 {
	if x != nil {
		return x.AList
	}
	return nil
}

func (x *RecordUpdateStruct) GetCharge() int32 {
	if x != nil {
		return x.Charge
	}
	return 0
}

// 玩家匹配结构
type MatchStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid              uint64         `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                            // 必传参数
	ActorId          int32          `protobuf:"varint,2,opt,name=actorId,proto3" json:"actorId,omitempty"`                    // 必传参数   // 选择的球员或者编队中杯数最高的球员
	AiLevel          int32          `protobuf:"varint,3,opt,name=aiLevel,proto3" json:"aiLevel,omitempty"`                    // 如果为AI则必传参数
	BType            int32          `protobuf:"varint,4,opt,name=bType,proto3" json:"bType,omitempty"`                        // 必传参数
	BMode            int32          `protobuf:"varint,5,opt,name=bMode,proto3" json:"bMode,omitempty"`                        // 必传参数
	InviteCode       uint64         `protobuf:"varint,6,opt,name=inviteCode,proto3" json:"inviteCode,omitempty"`              // 计算值
	Ability          *AbilityStruct `protobuf:"bytes,7,opt,name=ability,proto3" json:"ability,omitempty"`                     // 计算值
	ActorLevel       int32          `protobuf:"varint,8,opt,name=actorLevel,proto3" json:"actorLevel,omitempty"`              // 根据球员计算值 计算值   等级区间判断用
	SearchAbilityMin int32          `protobuf:"varint,9,opt,name=searchAbilityMin,proto3" json:"searchAbilityMin,omitempty"`  // 最小搜索能力值 计算值
	SearchAbilityMax int32          `protobuf:"varint,10,opt,name=searchAbilityMax,proto3" json:"searchAbilityMax,omitempty"` // 最大搜索能力值 计算值
	SearchLevelMin   int32          `protobuf:"varint,11,opt,name=searchLevelMin,proto3" json:"searchLevelMin,omitempty"`     // 最小搜索球员等级 计算值
	SearchLevelMax   int32          `protobuf:"varint,12,opt,name=searchLevelMax,proto3" json:"searchLevelMax,omitempty"`     // 最大搜索球员等级 计算值
	IsGlobal         int32          `protobuf:"varint,13,opt,name=isGlobal,proto3" json:"isGlobal,omitempty"`                 // 是否全局搜索
	NowCupArea       int32          `protobuf:"varint,14,opt,name=nowCupArea,proto3" json:"nowCupArea,omitempty"`             // 当前奖杯区间
	ExecuteN         int32          `protobuf:"varint,15,opt,name=executeN,proto3" json:"executeN,omitempty"`                 // 执行次数  匹配计算值
	ExecuteNano      int64          `protobuf:"varint,16,opt,name=executeNano,proto3" json:"executeNano,omitempty"`           // 上次执行的纳秒数  匹配计算值
	WinStreak        int32          `protobuf:"varint,17,opt,name=winStreak,proto3" json:"winStreak,omitempty"`               // 已连胜场次
	AverageLevel     int32          `protobuf:"varint,18,opt,name=averageLevel,proto3" json:"averageLevel,omitempty"`         // 平均参战球员等级
}

func (x *MatchStruct) Reset() {
	*x = MatchStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchStruct) ProtoMessage() {}

func (x *MatchStruct) ProtoReflect() protoreflect.Message {
	mi := &file_public_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchStruct.ProtoReflect.Descriptor instead.
func (*MatchStruct) Descriptor() ([]byte, []int) {
	return file_public_proto_rawDescGZIP(), []int{1}
}

func (x *MatchStruct) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MatchStruct) GetActorId() int32 {
	if x != nil {
		return x.ActorId
	}
	return 0
}

func (x *MatchStruct) GetAiLevel() int32 {
	if x != nil {
		return x.AiLevel
	}
	return 0
}

func (x *MatchStruct) GetBType() int32 {
	if x != nil {
		return x.BType
	}
	return 0
}

func (x *MatchStruct) GetBMode() int32 {
	if x != nil {
		return x.BMode
	}
	return 0
}

func (x *MatchStruct) GetInviteCode() uint64 {
	if x != nil {
		return x.InviteCode
	}
	return 0
}

func (x *MatchStruct) GetAbility() *AbilityStruct {
	if x != nil {
		return x.Ability
	}
	return nil
}

func (x *MatchStruct) GetActorLevel() int32 {
	if x != nil {
		return x.ActorLevel
	}
	return 0
}

func (x *MatchStruct) GetSearchAbilityMin() int32 {
	if x != nil {
		return x.SearchAbilityMin
	}
	return 0
}

func (x *MatchStruct) GetSearchAbilityMax() int32 {
	if x != nil {
		return x.SearchAbilityMax
	}
	return 0
}

func (x *MatchStruct) GetSearchLevelMin() int32 {
	if x != nil {
		return x.SearchLevelMin
	}
	return 0
}

func (x *MatchStruct) GetSearchLevelMax() int32 {
	if x != nil {
		return x.SearchLevelMax
	}
	return 0
}

func (x *MatchStruct) GetIsGlobal() int32 {
	if x != nil {
		return x.IsGlobal
	}
	return 0
}

func (x *MatchStruct) GetNowCupArea() int32 {
	if x != nil {
		return x.NowCupArea
	}
	return 0
}

func (x *MatchStruct) GetExecuteN() int32 {
	if x != nil {
		return x.ExecuteN
	}
	return 0
}

func (x *MatchStruct) GetExecuteNano() int64 {
	if x != nil {
		return x.ExecuteNano
	}
	return 0
}

func (x *MatchStruct) GetWinStreak() int32 {
	if x != nil {
		return x.WinStreak
	}
	return 0
}

func (x *MatchStruct) GetAverageLevel() int32 {
	if x != nil {
		return x.AverageLevel
	}
	return 0
}

// 能力值结果与相关数据
type AbilityStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ability          float64         `protobuf:"fixed64,1,opt,name=ability,proto3" json:"ability,omitempty"`                     // 能力值    计算值  根据胜率返回值与分差返回值确定
	NowCup           int32           `protobuf:"varint,2,opt,name=nowCup,proto3" json:"nowCup,omitempty"`                        // 当前总杯数  用于区分使用预期胜率A还是B
	ActorCup         int32           `protobuf:"varint,3,opt,name=actorCup,proto3" json:"actorCup,omitempty"`                    // 球员杯数   用于获得当前球员的预期胜率
	RealWinRatio     float64         `protobuf:"fixed64,4,opt,name=realWinRatio,proto3" json:"realWinRatio,omitempty"`           //  实际胜率  根据历史获取实际的胜率
	ExpectWinRatio   float64         `protobuf:"fixed64,5,opt,name=expectWinRatio,proto3" json:"expectWinRatio,omitempty"`       // 预期胜率   根据预期胜率区间与实际胜率获得预期胜率定值
	WinRatioRet      float64         `protobuf:"fixed64,6,opt,name=winRatioRet,proto3" json:"winRatioRet,omitempty"`             // 胜率返回值  根据预期与实际胜率计算的能力值参数之一
	ScoreDiff        int32           `protobuf:"varint,7,opt,name=scoreDiff,proto3" json:"scoreDiff,omitempty"`                  // 分差     根据历史计算的累计分差
	ScoreDiffRet     float64         `protobuf:"fixed64,8,opt,name=scoreDiffRet,proto3" json:"scoreDiffRet,omitempty"`           // 分差返回值  根据累计分数差计算的能力值参数之一
	SearchD          SearchDirection `protobuf:"varint,9,opt,name=searchD,proto3,enum=SearchDirection" json:"searchD,omitempty"` // 搜索方向  根据预期胜率与实际胜率确定的匹配规则
	SynthesisAbility float64         `protobuf:"fixed64,10,opt,name=synthesisAbility,proto3" json:"synthesisAbility,omitempty"`  // 综合能力值  AI用于计算胜率
	FinalWinRatio    int32           `protobuf:"varint,11,opt,name=finalWinRatio,proto3" json:"finalWinRatio,omitempty"`         // 最终胜率  转换为int32  100分底  AI本次计算的实际获胜率
}

func (x *AbilityStruct) Reset() {
	*x = AbilityStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbilityStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbilityStruct) ProtoMessage() {}

func (x *AbilityStruct) ProtoReflect() protoreflect.Message {
	mi := &file_public_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbilityStruct.ProtoReflect.Descriptor instead.
func (*AbilityStruct) Descriptor() ([]byte, []int) {
	return file_public_proto_rawDescGZIP(), []int{2}
}

func (x *AbilityStruct) GetAbility() float64 {
	if x != nil {
		return x.Ability
	}
	return 0
}

func (x *AbilityStruct) GetNowCup() int32 {
	if x != nil {
		return x.NowCup
	}
	return 0
}

func (x *AbilityStruct) GetActorCup() int32 {
	if x != nil {
		return x.ActorCup
	}
	return 0
}

func (x *AbilityStruct) GetRealWinRatio() float64 {
	if x != nil {
		return x.RealWinRatio
	}
	return 0
}

func (x *AbilityStruct) GetExpectWinRatio() float64 {
	if x != nil {
		return x.ExpectWinRatio
	}
	return 0
}

func (x *AbilityStruct) GetWinRatioRet() float64 {
	if x != nil {
		return x.WinRatioRet
	}
	return 0
}

func (x *AbilityStruct) GetScoreDiff() int32 {
	if x != nil {
		return x.ScoreDiff
	}
	return 0
}

func (x *AbilityStruct) GetScoreDiffRet() float64 {
	if x != nil {
		return x.ScoreDiffRet
	}
	return 0
}

func (x *AbilityStruct) GetSearchD() SearchDirection {
	if x != nil {
		return x.SearchD
	}
	return SearchDirection_UP
}

func (x *AbilityStruct) GetSynthesisAbility() float64 {
	if x != nil {
		return x.SynthesisAbility
	}
	return 0
}

func (x *AbilityStruct) GetFinalWinRatio() int32 {
	if x != nil {
		return x.FinalWinRatio
	}
	return 0
}

type OrderPayed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ic      int64  `protobuf:"varint,1,opt,name=ic,proto3" json:"ic,omitempty"`
	OrderId string `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
}

func (x *OrderPayed) Reset() {
	*x = OrderPayed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderPayed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPayed) ProtoMessage() {}

func (x *OrderPayed) ProtoReflect() protoreflect.Message {
	mi := &file_public_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPayed.ProtoReflect.Descriptor instead.
func (*OrderPayed) Descriptor() ([]byte, []int) {
	return file_public_proto_rawDescGZIP(), []int{3}
}

func (x *OrderPayed) GetIc() int64 {
	if x != nil {
		return x.Ic
	}
	return 0
}

func (x *OrderPayed) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

type OrderPayedRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *OrderPayedRet) Reset() {
	*x = OrderPayedRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderPayedRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPayedRet) ProtoMessage() {}

func (x *OrderPayedRet) ProtoReflect() protoreflect.Message {
	mi := &file_public_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPayedRet.ProtoReflect.Descriptor instead.
func (*OrderPayedRet) Descriptor() ([]byte, []int) {
	return file_public_proto_rawDescGZIP(), []int{4}
}

func (x *OrderPayedRet) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ActorStatusItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` // 状态
	Time   int64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`     // 状态结束倒计时
}

func (x *ActorStatusItem) Reset() {
	*x = ActorStatusItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorStatusItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorStatusItem) ProtoMessage() {}

func (x *ActorStatusItem) ProtoReflect() protoreflect.Message {
	mi := &file_public_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorStatusItem.ProtoReflect.Descriptor instead.
func (*ActorStatusItem) Descriptor() ([]byte, []int) {
	return file_public_proto_rawDescGZIP(), []int{5}
}

func (x *ActorStatusItem) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ActorStatusItem) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type ActorStatusCommon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorTime map[int32]*ActorStatusItem `protobuf:"bytes,1,rep,name=actorTime,proto3" json:"actorTime,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ActorStatusCommon) Reset() {
	*x = ActorStatusCommon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorStatusCommon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorStatusCommon) ProtoMessage() {}

func (x *ActorStatusCommon) ProtoReflect() protoreflect.Message {
	mi := &file_public_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorStatusCommon.ProtoReflect.Descriptor instead.
func (*ActorStatusCommon) Descriptor() ([]byte, []int) {
	return file_public_proto_rawDescGZIP(), []int{6}
}

func (x *ActorStatusCommon) GetActorTime() map[int32]*ActorStatusItem {
	if x != nil {
		return x.ActorTime
	}
	return nil
}

var File_public_proto protoreflect.FileDescriptor

var file_public_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab, 0x02, 0x0a,
	0x12, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x05, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x07, 0x2e, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x52, 0x05, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x47, 0x6f, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x47, 0x6f, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x49, 0x73, 0x57, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x49,
	0x73, 0x57, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x43, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x43, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x4d, 0x61, 0x78,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x4d, 0x61, 0x78, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x66, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x63, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x66, 0x66, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x22, 0xcd, 0x04, 0x0a, 0x0b, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x69, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x07,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d,
	0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x4d, 0x61, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x78, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x69, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x78, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x69, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f,
	0x77, 0x43, 0x75, 0x70, 0x41, 0x72, 0x65, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6e, 0x6f, 0x77, 0x43, 0x75, 0x70, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x4e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x4e, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x4e, 0x61, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x77, 0x69, 0x6e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x8b, 0x03, 0x0a, 0x0d, 0x41,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x77, 0x43, 0x75, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x6f, 0x77, 0x43, 0x75, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x61, 0x6c, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x72, 0x65, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x26,
	0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x57, 0x69,
	0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x52, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x77, 0x69, 0x6e,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x44, 0x69, 0x66, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x44, 0x69, 0x66, 0x66, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x44,
	0x69, 0x66, 0x66, 0x52, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x73, 0x69, 0x73, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x41, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0x36, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x79, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x27, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x65, 0x64, 0x52, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3d, 0x0a, 0x0f, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x3f,
	0x0a, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x1a,
	0x4e, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x0b, 0x5a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_public_proto_rawDescOnce sync.Once
	file_public_proto_rawDescData = file_public_proto_rawDesc
)

func file_public_proto_rawDescGZIP() []byte {
	file_public_proto_rawDescOnce.Do(func() {
		file_public_proto_rawDescData = protoimpl.X.CompressGZIP(file_public_proto_rawDescData)
	})
	return file_public_proto_rawDescData
}

var file_public_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_public_proto_goTypes = []interface{}{
	(*RecordUpdateStruct)(nil), // 0: RecordUpdateStruct
	(*MatchStruct)(nil),        // 1: MatchStruct
	(*AbilityStruct)(nil),      // 2: AbilityStruct
	(*OrderPayed)(nil),         // 3: OrderPayed
	(*OrderPayedRet)(nil),      // 4: OrderPayedRet
	(*ActorStatusItem)(nil),    // 5: ActorStatusItem
	(*ActorStatusCommon)(nil),  // 6: ActorStatusCommon
	nil,                        // 7: ActorStatusCommon.ActorTimeEntry
	(RECORD)(0),                // 8: RECORD
	(SearchDirection)(0),       // 9: SearchDirection
}
var file_public_proto_depIdxs = []int32{
	8, // 0: RecordUpdateStruct.rType:type_name -> RECORD
	2, // 1: MatchStruct.ability:type_name -> AbilityStruct
	9, // 2: AbilityStruct.searchD:type_name -> SearchDirection
	7, // 3: ActorStatusCommon.actorTime:type_name -> ActorStatusCommon.ActorTimeEntry
	5, // 4: ActorStatusCommon.ActorTimeEntry.value:type_name -> ActorStatusItem
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_public_proto_init() }
func file_public_proto_init() {
	if File_public_proto != nil {
		return
	}
	file_define_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_public_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordUpdateStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbilityStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderPayed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderPayedRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActorStatusItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActorStatusCommon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_public_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_public_proto_goTypes,
		DependencyIndexes: file_public_proto_depIdxs,
		MessageInfos:      file_public_proto_msgTypes,
	}.Build()
	File_public_proto = out.File
	file_public_proto_rawDesc = nil
	file_public_proto_goTypes = nil
	file_public_proto_depIdxs = nil
}
