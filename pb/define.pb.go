// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.10.0
// source: define.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ITEM int32

const (
	ITEM_ZERO                 ITEM = 0
	ITEM_CURRENCY             ITEM = 1
	ITEM_PLAYER_EXP           ITEM = 3
	ITEM_CUP                  ITEM = 4
	ITEM_PROFICIENCY          ITEM = 5
	ITEM_MEDAL                ITEM = 6
	ITEM_ACHIEVEMENT_POINT    ITEM = 7
	ITEM_ENGAGEMENT_STAR      ITEM = 8
	ITEM_ACTOR                ITEM = 10
	ITEM_SKILL                ITEM = 11
	ITEM_FACE                 ITEM = 12
	ITEM_CLOTH                ITEM = 13
	ITEM_SKIN                 ITEM = 14
	ITEM_ACTOR_BAG            ITEM = 15
	ITEM_FACE_BAG             ITEM = 16
	ITEM_COURT_CHIPS          ITEM = 17
	ITEM_BASKETBALL           ITEM = 18
	ITEM_TITLE                ITEM = 19
	ITEM_BOX                  ITEM = 20
	ITEM_DOUBLE               ITEM = 21
	ITEM_AVATAR               ITEM = 22
	ITEM_AVATAR_FRAME         ITEM = 23
	ITEM_COLORFUL_NAME        ITEM = 24
	ITEM_LOTTERY_TICKET       ITEM = 25
	ITEM_COURT_DECORATION     ITEM = 26
	ITEM_COURT                ITEM = 27
	ITEM_PRIVILEGE_CARD       ITEM = 28
	ITEM_COURT_DECORATION_BAG ITEM = 29
	ITEM_COLLECTION           ITEM = 30
	ITEM_BATTLEPASS           ITEM = 31
	ITEM_ACTOR_UPGRADE_CARD   ITEM = 32
	ITEM_SYSTEM               ITEM = 40
)

// Enum value maps for ITEM.
var (
	ITEM_name = map[int32]string{
		0:  "ZERO",
		1:  "CURRENCY",
		3:  "PLAYER_EXP",
		4:  "CUP",
		5:  "PROFICIENCY",
		6:  "MEDAL",
		7:  "ACHIEVEMENT_POINT",
		8:  "ENGAGEMENT_STAR",
		10: "ACTOR",
		11: "SKILL",
		12: "FACE",
		13: "CLOTH",
		14: "SKIN",
		15: "ACTOR_BAG",
		16: "FACE_BAG",
		17: "COURT_CHIPS",
		18: "BASKETBALL",
		19: "TITLE",
		20: "BOX",
		21: "DOUBLE",
		22: "AVATAR",
		23: "AVATAR_FRAME",
		24: "COLORFUL_NAME",
		25: "LOTTERY_TICKET",
		26: "COURT_DECORATION",
		27: "COURT",
		28: "PRIVILEGE_CARD",
		29: "COURT_DECORATION_BAG",
		30: "COLLECTION",
		31: "BATTLEPASS",
		32: "ACTOR_UPGRADE_CARD",
		40: "SYSTEM",
	}
	ITEM_value = map[string]int32{
		"ZERO":                 0,
		"CURRENCY":             1,
		"PLAYER_EXP":           3,
		"CUP":                  4,
		"PROFICIENCY":          5,
		"MEDAL":                6,
		"ACHIEVEMENT_POINT":    7,
		"ENGAGEMENT_STAR":      8,
		"ACTOR":                10,
		"SKILL":                11,
		"FACE":                 12,
		"CLOTH":                13,
		"SKIN":                 14,
		"ACTOR_BAG":            15,
		"FACE_BAG":             16,
		"COURT_CHIPS":          17,
		"BASKETBALL":           18,
		"TITLE":                19,
		"BOX":                  20,
		"DOUBLE":               21,
		"AVATAR":               22,
		"AVATAR_FRAME":         23,
		"COLORFUL_NAME":        24,
		"LOTTERY_TICKET":       25,
		"COURT_DECORATION":     26,
		"COURT":                27,
		"PRIVILEGE_CARD":       28,
		"COURT_DECORATION_BAG": 29,
		"COLLECTION":           30,
		"BATTLEPASS":           31,
		"ACTOR_UPGRADE_CARD":   32,
		"SYSTEM":               40,
	}
)

func (x ITEM) Enum() *ITEM {
	p := new(ITEM)
	*p = x
	return p
}

func (x ITEM) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ITEM) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[0].Descriptor()
}

func (ITEM) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[0]
}

func (x ITEM) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ITEM.Descriptor instead.
func (ITEM) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{0}
}

// 奖励来源
type SOURCE int32

const (
	SOURCE_S_NONE                  SOURCE = 0  // 没有来源
	SOURCE_S_BATTLE                SOURCE = 1  // 战斗
	SOURCE_S_P_UPDATE              SOURCE = 2  // 玩家升级 经验升级
	SOURCE_S_A_UPDATE              SOURCE = 3  // 球员升级 熟练度升级
	SOURCE_S_BOX                   SOURCE = 4  // 宝箱
	SOURCE_S_A_BAG                 SOURCE = 5  // 球员卡包
	SOURCE_S_GM                    SOURCE = 6  // gm
	SOURCE_S_UP_BP                 SOURCE = 7  // 赛券升级
	SOURCE_S_BUY_BP                SOURCE = 8  // 购买赛券
	SOURCE_S_REWARD_BP             SOURCE = 9  // 赛券奖励
	SOURCE_S_LADDER                SOURCE = 10 // 天梯奖励
	SOURCE_S_CREATE                SOURCE = 11 // 玩家创建
	SOURCE_S_TOUR                  SOURCE = 12 // 赛季挑战赛奖励
	SOURCE_S_GLORYROAD_REWARD      SOURCE = 13 // 球星之路奖励
	SOURCE_S_A_CUP_UPDATE          SOURCE = 14 // 球员升级 奖杯升级
	SOURCE_S_GLORYROAD_RESET       SOURCE = 15 // 球星之路新赛季奖励
	SOURCE_S_MISSION               SOURCE = 16 // 任务
	SOURCE_S_CONTROL               SOURCE = 17 // 系統解索
	SOURCE_S_DOUBLE                SOURCE = 18 // 双倍奖章奖励
	SOURCE_S_SHOP                  SOURCE = 19 // 商店购买
	SOURCE_S_PLAYER                SOURCE = 20 // 玩家个人信息
	SOURCE_S_INVITE                SOURCE = 21 // 邀请奖励
	SOURCE_S_MAIL                  SOURCE = 22 // 邮件
	SOURCE_S_ADVERTISE             SOURCE = 23 // 看广告
	SOURCE_S_SIGN_IN_7_DAY         SOURCE = 24 // 七日签到
	SOURCE_S_BIND_ACCOUNT          SOURCE = 25 // 绑定账号
	SOURCE_S_CDKEY                 SOURCE = 26 // 兑换码
	SOURCE_S_REIMBURSE_BOX_UNSAVED SOURCE = 27 // 修复宝箱数据未保存的bug
	SOURCE_S_ACHIEVEMENT           SOURCE = 28 // 成就
	SOURCE_S_F_BAG                 SOURCE = 29 // 表情包
	SOURCE_S_DAILY_SIGN_IN         SOURCE = 30 // 每日签到
	SOURCE_S_STAR                  SOURCE = 31 // 星辉奖励
	SOURCE_S_GIFT_PACK             SOURCE = 32 // 礼包
	SOURCE_S_KING_ROUND            SOURCE = 33 // 路人王
	SOURCE_S_RMB                   SOURCE = 34 // 充值获取
	SOURCE_S_TURNTABLE             SOURCE = 35 // 转盘
	SOURCE_S_REAL_NAME             SOURCE = 36 // 实名认证
	SOURCE_S_NEW_ACTOR_ACTIVITY    SOURCE = 37 // 新球员活动
	SOURCE_S_NOVICE_TASK           SOURCE = 38 // 新手任务
	SOURCE_S_ACTIVITY_SIGN_IN      SOURCE = 39 // 活动签到
	SOURCE_S_COIN_TIME             SOURCE = 40 // 千金一刻
	SOURCE_S_DECORATION_BUY        SOURCE = 41 // 装饰购买
	SOURCE_S_COURT_CHIP_CONVERT    SOURCE = 42 // 球场碎片转换
	SOURCE_S_COURT_CHIP_COMPOSITE  SOURCE = 43 // 球场碎片合成
	SOURCE_S_EGG_PLAY              SOURCE = 44 // 扭蛋玩
	SOURCE_S_EGG_BUY               SOURCE = 45 // 扭蛋买
	SOURCE_S_EGG_EXCHANGE          SOURCE = 46 // 扭蛋换
	SOURCE_S_CHIP_FILL             SOURCE = 47 // 碎片补齐
	SOURCE_S_ACTOR_UPGRADE_DIRECT  SOURCE = 48 // 球员直升
	SOURCE_S_SHOP_NEW              SOURCE = 49 // 商店新
)

// Enum value maps for SOURCE.
var (
	SOURCE_name = map[int32]string{
		0:  "S_NONE",
		1:  "S_BATTLE",
		2:  "S_P_UPDATE",
		3:  "S_A_UPDATE",
		4:  "S_BOX",
		5:  "S_A_BAG",
		6:  "S_GM",
		7:  "S_UP_BP",
		8:  "S_BUY_BP",
		9:  "S_REWARD_BP",
		10: "S_LADDER",
		11: "S_CREATE",
		12: "S_TOUR",
		13: "S_GLORYROAD_REWARD",
		14: "S_A_CUP_UPDATE",
		15: "S_GLORYROAD_RESET",
		16: "S_MISSION",
		17: "S_CONTROL",
		18: "S_DOUBLE",
		19: "S_SHOP",
		20: "S_PLAYER",
		21: "S_INVITE",
		22: "S_MAIL",
		23: "S_ADVERTISE",
		24: "S_SIGN_IN_7_DAY",
		25: "S_BIND_ACCOUNT",
		26: "S_CDKEY",
		27: "S_REIMBURSE_BOX_UNSAVED",
		28: "S_ACHIEVEMENT",
		29: "S_F_BAG",
		30: "S_DAILY_SIGN_IN",
		31: "S_STAR",
		32: "S_GIFT_PACK",
		33: "S_KING_ROUND",
		34: "S_RMB",
		35: "S_TURNTABLE",
		36: "S_REAL_NAME",
		37: "S_NEW_ACTOR_ACTIVITY",
		38: "S_NOVICE_TASK",
		39: "S_ACTIVITY_SIGN_IN",
		40: "S_COIN_TIME",
		41: "S_DECORATION_BUY",
		42: "S_COURT_CHIP_CONVERT",
		43: "S_COURT_CHIP_COMPOSITE",
		44: "S_EGG_PLAY",
		45: "S_EGG_BUY",
		46: "S_EGG_EXCHANGE",
		47: "S_CHIP_FILL",
		48: "S_ACTOR_UPGRADE_DIRECT",
		49: "S_SHOP_NEW",
	}
	SOURCE_value = map[string]int32{
		"S_NONE":                  0,
		"S_BATTLE":                1,
		"S_P_UPDATE":              2,
		"S_A_UPDATE":              3,
		"S_BOX":                   4,
		"S_A_BAG":                 5,
		"S_GM":                    6,
		"S_UP_BP":                 7,
		"S_BUY_BP":                8,
		"S_REWARD_BP":             9,
		"S_LADDER":                10,
		"S_CREATE":                11,
		"S_TOUR":                  12,
		"S_GLORYROAD_REWARD":      13,
		"S_A_CUP_UPDATE":          14,
		"S_GLORYROAD_RESET":       15,
		"S_MISSION":               16,
		"S_CONTROL":               17,
		"S_DOUBLE":                18,
		"S_SHOP":                  19,
		"S_PLAYER":                20,
		"S_INVITE":                21,
		"S_MAIL":                  22,
		"S_ADVERTISE":             23,
		"S_SIGN_IN_7_DAY":         24,
		"S_BIND_ACCOUNT":          25,
		"S_CDKEY":                 26,
		"S_REIMBURSE_BOX_UNSAVED": 27,
		"S_ACHIEVEMENT":           28,
		"S_F_BAG":                 29,
		"S_DAILY_SIGN_IN":         30,
		"S_STAR":                  31,
		"S_GIFT_PACK":             32,
		"S_KING_ROUND":            33,
		"S_RMB":                   34,
		"S_TURNTABLE":             35,
		"S_REAL_NAME":             36,
		"S_NEW_ACTOR_ACTIVITY":    37,
		"S_NOVICE_TASK":           38,
		"S_ACTIVITY_SIGN_IN":      39,
		"S_COIN_TIME":             40,
		"S_DECORATION_BUY":        41,
		"S_COURT_CHIP_CONVERT":    42,
		"S_COURT_CHIP_COMPOSITE":  43,
		"S_EGG_PLAY":              44,
		"S_EGG_BUY":               45,
		"S_EGG_EXCHANGE":          46,
		"S_CHIP_FILL":             47,
		"S_ACTOR_UPGRADE_DIRECT":  48,
		"S_SHOP_NEW":              49,
	}
)

func (x SOURCE) Enum() *SOURCE {
	p := new(SOURCE)
	*p = x
	return p
}

func (x SOURCE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SOURCE) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[1].Descriptor()
}

func (SOURCE) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[1]
}

func (x SOURCE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SOURCE.Descriptor instead.
func (SOURCE) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{1}
}

// 时间类型
type TIME int32

const (
	TIME_T_NONE                 TIME = 0
	TIME_T_TOUR                 TIME = 1  // 赛季挑战赛
	TIME_T_LADDER               TIME = 2  // 天梯
	TIME_T_BATTLEPASS           TIME = 3  // 赛券
	TIME_T_GLORYROAD            TIME = 4  // 球星之路
	TIME_T_SHOP                 TIME = 5  // 商店
	TIME_T_PLAYER               TIME = 6  // 个人信息
	TIME_T_FRIEND               TIME = 7  // 好友
	TIME_T_ADVERTISE            TIME = 8  // 广告
	TIME_T_SIGN_IN_7_DAY        TIME = 9  // 七日签到
	TIME_T_NOTICE               TIME = 10 // 公告
	TIME_T_CDKEY                TIME = 11 // 兑换码
	TIME_T_ACHIEVEMENT          TIME = 12 // 成就
	TIME_T_CURRENCY             TIME = 13 // 货币
	TIME_T_DAILY_SIGN_IN        TIME = 14 // 每日签到
	TIME_T_STAR                 TIME = 15 // 星辉
	TIME_T_LEADERBOARD          TIME = 16 // 排行榜
	TIME_T_KING_ROUND           TIME = 17 // 路人王
	TIME_T_GIFT_PACK            TIME = 18 // 礼包
	TIME_T_OPERATIONAL_ACTIVITY TIME = 19 // 运营活动
	TIME_T_PERSONALITY          TIME = 20 // 玩家个人信息
	TIME_T_TURNTABLE            TIME = 21 // 转盘
	TIME_T_FIGHT                TIME = 22 // 战斗
	TIME_T_NEW_ACTOR            TIME = 23 // 新球员活动
	TIME_T_NOVICE_TASK          TIME = 24 // 新手任务
	TIME_T_ACTIVITY_SIGN_IN     TIME = 25 // 活动签到
	TIME_T_COIN_TIME            TIME = 26 // 千金一刻
	TIME_T_EGG                  TIME = 27 // 扭蛋
	TIME_T_PRIVILEGE            TIME = 28 // 特权系统
	TIME_T_MAIL                 TIME = 29 // 邮件
	TIME_T_COURT                TIME = 30 // 球场
	TIME_T_COMMON_CONDITION     TIME = 31 // 通用条件
	TIME_T_SHOP_NEW             TIME = 32 // 商店新
)

// Enum value maps for TIME.
var (
	TIME_name = map[int32]string{
		0:  "T_NONE",
		1:  "T_TOUR",
		2:  "T_LADDER",
		3:  "T_BATTLEPASS",
		4:  "T_GLORYROAD",
		5:  "T_SHOP",
		6:  "T_PLAYER",
		7:  "T_FRIEND",
		8:  "T_ADVERTISE",
		9:  "T_SIGN_IN_7_DAY",
		10: "T_NOTICE",
		11: "T_CDKEY",
		12: "T_ACHIEVEMENT",
		13: "T_CURRENCY",
		14: "T_DAILY_SIGN_IN",
		15: "T_STAR",
		16: "T_LEADERBOARD",
		17: "T_KING_ROUND",
		18: "T_GIFT_PACK",
		19: "T_OPERATIONAL_ACTIVITY",
		20: "T_PERSONALITY",
		21: "T_TURNTABLE",
		22: "T_FIGHT",
		23: "T_NEW_ACTOR",
		24: "T_NOVICE_TASK",
		25: "T_ACTIVITY_SIGN_IN",
		26: "T_COIN_TIME",
		27: "T_EGG",
		28: "T_PRIVILEGE",
		29: "T_MAIL",
		30: "T_COURT",
		31: "T_COMMON_CONDITION",
		32: "T_SHOP_NEW",
	}
	TIME_value = map[string]int32{
		"T_NONE":                 0,
		"T_TOUR":                 1,
		"T_LADDER":               2,
		"T_BATTLEPASS":           3,
		"T_GLORYROAD":            4,
		"T_SHOP":                 5,
		"T_PLAYER":               6,
		"T_FRIEND":               7,
		"T_ADVERTISE":            8,
		"T_SIGN_IN_7_DAY":        9,
		"T_NOTICE":               10,
		"T_CDKEY":                11,
		"T_ACHIEVEMENT":          12,
		"T_CURRENCY":             13,
		"T_DAILY_SIGN_IN":        14,
		"T_STAR":                 15,
		"T_LEADERBOARD":          16,
		"T_KING_ROUND":           17,
		"T_GIFT_PACK":            18,
		"T_OPERATIONAL_ACTIVITY": 19,
		"T_PERSONALITY":          20,
		"T_TURNTABLE":            21,
		"T_FIGHT":                22,
		"T_NEW_ACTOR":            23,
		"T_NOVICE_TASK":          24,
		"T_ACTIVITY_SIGN_IN":     25,
		"T_COIN_TIME":            26,
		"T_EGG":                  27,
		"T_PRIVILEGE":            28,
		"T_MAIL":                 29,
		"T_COURT":                30,
		"T_COMMON_CONDITION":     31,
		"T_SHOP_NEW":             32,
	}
)

func (x TIME) Enum() *TIME {
	p := new(TIME)
	*p = x
	return p
}

func (x TIME) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TIME) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[2].Descriptor()
}

func (TIME) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[2]
}

func (x TIME) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TIME.Descriptor instead.
func (TIME) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{2}
}

// 生涯记录类型
type RECORD int32

const (
	RECORD_R_CUP          RECORD = 0  // 最高奖杯
	RECORD_R_ENDLESS      RECORD = 1  // 无尽模式最高排名
	RECORD_R_LEAGUES      RECORD = 2  // 全国联赛最高排名
	RECORD_R_ONE          RECORD = 3  // 1v1胜场
	RECORD_R_THREE        RECORD = 4  // 3v3胜场
	RECORD_R_COLLECTION   RECORD = 5  // 收藏品数量
	RECORD_R_TOUR         RECORD = 6  // 赛季挑战赛各种玩法最高难度
	RECORD_R_NOW_CUP      RECORD = 7  // 当前总杯数
	RECORD_R_TOTAL_SCORE  RECORD = 8  // 总的分数
	RECORD_R_TOTAL_GOAL   RECORD = 9  // 总进球数
	RECORD_R_ACTOR        RECORD = 10 // 球员统计
	RECORD_R_BATTLE       RECORD = 11 // 玩法战斗统计
	RECORD_R_FIGHT        RECORD = 12 // 各大玩法的子玩法战绩集合
	RECORD_R_CHARGE       RECORD = 13 // 充值
	RECORD_R_CHARGE_TIMES RECORD = 14 // 充值次数
	RECORD_R_WIN_RATIO    RECORD = 15 // 条件判断用的胜率
)

// Enum value maps for RECORD.
var (
	RECORD_name = map[int32]string{
		0:  "R_CUP",
		1:  "R_ENDLESS",
		2:  "R_LEAGUES",
		3:  "R_ONE",
		4:  "R_THREE",
		5:  "R_COLLECTION",
		6:  "R_TOUR",
		7:  "R_NOW_CUP",
		8:  "R_TOTAL_SCORE",
		9:  "R_TOTAL_GOAL",
		10: "R_ACTOR",
		11: "R_BATTLE",
		12: "R_FIGHT",
		13: "R_CHARGE",
		14: "R_CHARGE_TIMES",
		15: "R_WIN_RATIO",
	}
	RECORD_value = map[string]int32{
		"R_CUP":          0,
		"R_ENDLESS":      1,
		"R_LEAGUES":      2,
		"R_ONE":          3,
		"R_THREE":        4,
		"R_COLLECTION":   5,
		"R_TOUR":         6,
		"R_NOW_CUP":      7,
		"R_TOTAL_SCORE":  8,
		"R_TOTAL_GOAL":   9,
		"R_ACTOR":        10,
		"R_BATTLE":       11,
		"R_FIGHT":        12,
		"R_CHARGE":       13,
		"R_CHARGE_TIMES": 14,
		"R_WIN_RATIO":    15,
	}
)

func (x RECORD) Enum() *RECORD {
	p := new(RECORD)
	*p = x
	return p
}

func (x RECORD) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RECORD) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[3].Descriptor()
}

func (RECORD) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[3]
}

func (x RECORD) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RECORD.Descriptor instead.
func (RECORD) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{3}
}

type SHOP_STATUS int32

const (
	SHOP_STATUS_SHOP_CAN_BUY     SHOP_STATUS = 0 // 未购买，可购买
	SHOP_STATUS_SHOP_ALREADY_BUY SHOP_STATUS = 1 // 已购买
	SHOP_STATUS_SHOP_ALREADY_GET SHOP_STATUS = 2 // 已通过其他方式获取，不能买
)

// Enum value maps for SHOP_STATUS.
var (
	SHOP_STATUS_name = map[int32]string{
		0: "SHOP_CAN_BUY",
		1: "SHOP_ALREADY_BUY",
		2: "SHOP_ALREADY_GET",
	}
	SHOP_STATUS_value = map[string]int32{
		"SHOP_CAN_BUY":     0,
		"SHOP_ALREADY_BUY": 1,
		"SHOP_ALREADY_GET": 2,
	}
)

func (x SHOP_STATUS) Enum() *SHOP_STATUS {
	p := new(SHOP_STATUS)
	*p = x
	return p
}

func (x SHOP_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SHOP_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[4].Descriptor()
}

func (SHOP_STATUS) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[4]
}

func (x SHOP_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SHOP_STATUS.Descriptor instead.
func (SHOP_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{4}
}

// 皮肤操作类型
type SKIN_OPTION int32

const (
	SKIN_OPTION_EQUIP_SKIN      SKIN_OPTION = 0 // 装备皮肤
	SKIN_OPTION_EQUIP_CLOTHES   SKIN_OPTION = 1 // 装备服饰
	SKIN_OPTION_SWITCH_CLOTHES  SKIN_OPTION = 2 // 切换服饰
	SKIN_OPTION_UNEQUIP_CLOTHES SKIN_OPTION = 3 // 卸下服饰
	SKIN_OPTION_UNEQUIP_SKIN    SKIN_OPTION = 4 // 卸下皮肤
)

// Enum value maps for SKIN_OPTION.
var (
	SKIN_OPTION_name = map[int32]string{
		0: "EQUIP_SKIN",
		1: "EQUIP_CLOTHES",
		2: "SWITCH_CLOTHES",
		3: "UNEQUIP_CLOTHES",
		4: "UNEQUIP_SKIN",
	}
	SKIN_OPTION_value = map[string]int32{
		"EQUIP_SKIN":      0,
		"EQUIP_CLOTHES":   1,
		"SWITCH_CLOTHES":  2,
		"UNEQUIP_CLOTHES": 3,
		"UNEQUIP_SKIN":    4,
	}
)

func (x SKIN_OPTION) Enum() *SKIN_OPTION {
	p := new(SKIN_OPTION)
	*p = x
	return p
}

func (x SKIN_OPTION) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SKIN_OPTION) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[5].Descriptor()
}

func (SKIN_OPTION) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[5]
}

func (x SKIN_OPTION) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SKIN_OPTION.Descriptor instead.
func (SKIN_OPTION) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{5}
}

// 服饰搭配索引
type CLOTHES_INDEX int32

const (
	CLOTHES_INDEX_CI1 CLOTHES_INDEX = 0
)

// Enum value maps for CLOTHES_INDEX.
var (
	CLOTHES_INDEX_name = map[int32]string{
		0: "CI1",
	}
	CLOTHES_INDEX_value = map[string]int32{
		"CI1": 0,
	}
)

func (x CLOTHES_INDEX) Enum() *CLOTHES_INDEX {
	p := new(CLOTHES_INDEX)
	*p = x
	return p
}

func (x CLOTHES_INDEX) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CLOTHES_INDEX) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[6].Descriptor()
}

func (CLOTHES_INDEX) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[6]
}

func (x CLOTHES_INDEX) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CLOTHES_INDEX.Descriptor instead.
func (CLOTHES_INDEX) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{6}
}

// 审批好友申请
type RATIFY int32

const (
	RATIFY_FRIEND_REJECT RATIFY = 0 // 拒绝申请
	RATIFY_FRIEND_AGREE  RATIFY = 1 // 通过申请
)

// Enum value maps for RATIFY.
var (
	RATIFY_name = map[int32]string{
		0: "FRIEND_REJECT",
		1: "FRIEND_AGREE",
	}
	RATIFY_value = map[string]int32{
		"FRIEND_REJECT": 0,
		"FRIEND_AGREE":  1,
	}
)

func (x RATIFY) Enum() *RATIFY {
	p := new(RATIFY)
	*p = x
	return p
}

func (x RATIFY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RATIFY) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[7].Descriptor()
}

func (RATIFY) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[7]
}

func (x RATIFY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RATIFY.Descriptor instead.
func (RATIFY) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{7}
}

// 推荐理由
type RECOMMEND int32

const (
	RECOMMEND_RE_BATTLE      RECOMMEND = 0 // 最近单挑过{N}场
	RECOMMEND_RE_MATCHED     RECOMMEND = 1 // 旗鼓相当的对手
	RECOMMEND_RE_ACTIVE      RECOMMEND = 2 // 活跃大佬
	RECOMMEND_RE_COOPERATION RECOMMEND = 3 // 并肩作战{N}场
)

// Enum value maps for RECOMMEND.
var (
	RECOMMEND_name = map[int32]string{
		0: "RE_BATTLE",
		1: "RE_MATCHED",
		2: "RE_ACTIVE",
		3: "RE_COOPERATION",
	}
	RECOMMEND_value = map[string]int32{
		"RE_BATTLE":      0,
		"RE_MATCHED":     1,
		"RE_ACTIVE":      2,
		"RE_COOPERATION": 3,
	}
)

func (x RECOMMEND) Enum() *RECOMMEND {
	p := new(RECOMMEND)
	*p = x
	return p
}

func (x RECOMMEND) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RECOMMEND) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[8].Descriptor()
}

func (RECOMMEND) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[8]
}

func (x RECOMMEND) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RECOMMEND.Descriptor instead.
func (RECOMMEND) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{8}
}

// 好友来源
type FRIEND_SOURCE int32

const (
	FRIEND_SOURCE_F_ID            FRIEND_SOURCE = 0 // 通过id搜索
	FRIEND_SOURCE_F_BATTLE        FRIEND_SOURCE = 1 // 最近对战添加
	FRIEND_SOURCE_F_RECOMMEND     FRIEND_SOURCE = 2 // 推荐添加
	FRIEND_SOURCE_F_LINK          FRIEND_SOURCE = 3 // 分享链接
	FRIEND_SOURCE_F_INVITE_BATTLE FRIEND_SOURCE = 4 // 约战
	FRIEND_SOURCE_F_LEADERBOARD   FRIEND_SOURCE = 5 // 通过排行榜
	FRIEND_SOURCE_F_PERSONAL      FRIEND_SOURCE = 6 // 玩家个人信息界面
	FRIEND_SOURCE_F_CHAT          FRIEND_SOURCE = 7 // 聊天
)

// Enum value maps for FRIEND_SOURCE.
var (
	FRIEND_SOURCE_name = map[int32]string{
		0: "F_ID",
		1: "F_BATTLE",
		2: "F_RECOMMEND",
		3: "F_LINK",
		4: "F_INVITE_BATTLE",
		5: "F_LEADERBOARD",
		6: "F_PERSONAL",
		7: "F_CHAT",
	}
	FRIEND_SOURCE_value = map[string]int32{
		"F_ID":            0,
		"F_BATTLE":        1,
		"F_RECOMMEND":     2,
		"F_LINK":          3,
		"F_INVITE_BATTLE": 4,
		"F_LEADERBOARD":   5,
		"F_PERSONAL":      6,
		"F_CHAT":          7,
	}
)

func (x FRIEND_SOURCE) Enum() *FRIEND_SOURCE {
	p := new(FRIEND_SOURCE)
	*p = x
	return p
}

func (x FRIEND_SOURCE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FRIEND_SOURCE) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[9].Descriptor()
}

func (FRIEND_SOURCE) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[9]
}

func (x FRIEND_SOURCE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FRIEND_SOURCE.Descriptor instead.
func (FRIEND_SOURCE) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{9}
}

type SearchDirection int32

const (
	SearchDirection_UP    SearchDirection = 0
	SearchDirection_ROUND SearchDirection = 1
	SearchDirection_DOWN  SearchDirection = 2
)

// Enum value maps for SearchDirection.
var (
	SearchDirection_name = map[int32]string{
		0: "UP",
		1: "ROUND",
		2: "DOWN",
	}
	SearchDirection_value = map[string]int32{
		"UP":    0,
		"ROUND": 1,
		"DOWN":  2,
	}
)

func (x SearchDirection) Enum() *SearchDirection {
	p := new(SearchDirection)
	*p = x
	return p
}

func (x SearchDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[10].Descriptor()
}

func (SearchDirection) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[10]
}

func (x SearchDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchDirection.Descriptor instead.
func (SearchDirection) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{10}
}

type WinState int32

const (
	WinState_W_WIN  WinState = 0
	WinState_W_LOSE WinState = 1
	WinState_W_DRAW WinState = 2
)

// Enum value maps for WinState.
var (
	WinState_name = map[int32]string{
		0: "W_WIN",
		1: "W_LOSE",
		2: "W_DRAW",
	}
	WinState_value = map[string]int32{
		"W_WIN":  0,
		"W_LOSE": 1,
		"W_DRAW": 2,
	}
)

func (x WinState) Enum() *WinState {
	p := new(WinState)
	*p = x
	return p
}

func (x WinState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WinState) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[11].Descriptor()
}

func (WinState) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[11]
}

func (x WinState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WinState.Descriptor instead.
func (WinState) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{11}
}

// 通用条件状态类型
type CommonConditionState int32

const (
	CommonConditionState_COMMON_CONDITION_NONE CommonConditionState = 0 // 未开启
	CommonConditionState_COMMON_CONDITION_OPEN CommonConditionState = 1 // 已开启
	CommonConditionState_COMMON_CONDITION_OVER CommonConditionState = 2 // 已结束
)

// Enum value maps for CommonConditionState.
var (
	CommonConditionState_name = map[int32]string{
		0: "COMMON_CONDITION_NONE",
		1: "COMMON_CONDITION_OPEN",
		2: "COMMON_CONDITION_OVER",
	}
	CommonConditionState_value = map[string]int32{
		"COMMON_CONDITION_NONE": 0,
		"COMMON_CONDITION_OPEN": 1,
		"COMMON_CONDITION_OVER": 2,
	}
)

func (x CommonConditionState) Enum() *CommonConditionState {
	p := new(CommonConditionState)
	*p = x
	return p
}

func (x CommonConditionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommonConditionState) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[12].Descriptor()
}

func (CommonConditionState) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[12]
}

func (x CommonConditionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommonConditionState.Descriptor instead.
func (CommonConditionState) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{12}
}

type ServerWinState int32

const (
	ServerWinState_S_LOSE ServerWinState = 0
	ServerWinState_S_WIN  ServerWinState = 1
	ServerWinState_S_DRAM ServerWinState = 2
)

// Enum value maps for ServerWinState.
var (
	ServerWinState_name = map[int32]string{
		0: "S_LOSE",
		1: "S_WIN",
		2: "S_DRAM",
	}
	ServerWinState_value = map[string]int32{
		"S_LOSE": 0,
		"S_WIN":  1,
		"S_DRAM": 2,
	}
)

func (x ServerWinState) Enum() *ServerWinState {
	p := new(ServerWinState)
	*p = x
	return p
}

func (x ServerWinState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerWinState) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[13].Descriptor()
}

func (ServerWinState) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[13]
}

func (x ServerWinState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerWinState.Descriptor instead.
func (ServerWinState) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{13}
}

var File_define_proto protoreflect.FileDescriptor

var file_define_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0xea,
	0x03, 0x0a, 0x04, 0x49, 0x54, 0x45, 0x4d, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x45, 0x52, 0x4f, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x10, 0x03, 0x12,
	0x07, 0x0a, 0x03, 0x43, 0x55, 0x50, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x46,
	0x49, 0x43, 0x49, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x45, 0x44,
	0x41, 0x4c, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x4e, 0x47, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x10, 0x08,
	0x12, 0x09, 0x0a, 0x05, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x43, 0x45, 0x10, 0x0c,
	0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x4f, 0x54, 0x48, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x4b, 0x49, 0x4e, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x42,
	0x41, 0x47, 0x10, 0x0f, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x42, 0x41, 0x47,
	0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x55, 0x52, 0x54, 0x5f, 0x43, 0x48, 0x49, 0x50,
	0x53, 0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x41, 0x53, 0x4b, 0x45, 0x54, 0x42, 0x41, 0x4c,
	0x4c, 0x10, 0x12, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x10, 0x13, 0x12, 0x07,
	0x0a, 0x03, 0x42, 0x4f, 0x58, 0x10, 0x14, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c,
	0x45, 0x10, 0x15, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x10, 0x16, 0x12,
	0x10, 0x0a, 0x0c, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10,
	0x17, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x46, 0x55, 0x4c, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x18, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f,
	0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x19, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x55, 0x52,
	0x54, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1a, 0x12, 0x09,
	0x0a, 0x05, 0x43, 0x4f, 0x55, 0x52, 0x54, 0x10, 0x1b, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x49,
	0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x1c, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x4f, 0x55, 0x52, 0x54, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x41, 0x47, 0x10, 0x1d, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4c, 0x4c, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1e, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x50, 0x41, 0x53, 0x53, 0x10, 0x1f, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x4f, 0x52,
	0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x20, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x28, 0x2a, 0xe2, 0x06, 0x0a, 0x06,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x5f, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x5f, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x53, 0x5f, 0x42, 0x4f, 0x58, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x5f, 0x41, 0x5f, 0x42, 0x41, 0x47, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x5f, 0x47, 0x4d,
	0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x5f, 0x55, 0x50, 0x5f, 0x42, 0x50, 0x10, 0x07, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x42, 0x50, 0x10, 0x08, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x42, 0x50, 0x10, 0x09, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x5f, 0x4c, 0x41, 0x44, 0x44, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x5f,
	0x54, 0x4f, 0x55, 0x52, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x52,
	0x59, 0x52, 0x4f, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x0d, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x5f, 0x41, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x52, 0x59, 0x52, 0x4f, 0x41,
	0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x5f, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x11, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x5f, 0x44, 0x4f, 0x55,
	0x42, 0x4c, 0x45, 0x10, 0x12, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x10,
	0x13, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x14, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x15, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x16, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x5f, 0x41,
	0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x10, 0x17, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x5f,
	0x53, 0x49, 0x47, 0x4e, 0x5f, 0x49, 0x4e, 0x5f, 0x37, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x18, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x19, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x5f, 0x43, 0x44, 0x4b, 0x45, 0x59, 0x10, 0x1a,
	0x12, 0x1b, 0x0a, 0x17, 0x53, 0x5f, 0x52, 0x45, 0x49, 0x4d, 0x42, 0x55, 0x52, 0x53, 0x45, 0x5f,
	0x42, 0x4f, 0x58, 0x5f, 0x55, 0x4e, 0x53, 0x41, 0x56, 0x45, 0x44, 0x10, 0x1b, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x5f, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x1c,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x5f, 0x46, 0x5f, 0x42, 0x41, 0x47, 0x10, 0x1d, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x49, 0x4e,
	0x10, 0x1e, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x10, 0x1f, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x10, 0x20, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x5f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x21, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x5f, 0x52, 0x4d, 0x42, 0x10, 0x22, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x5f, 0x54, 0x55, 0x52, 0x4e, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x23, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x24, 0x12, 0x18,
	0x0a, 0x14, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x25, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x5f, 0x4e, 0x4f,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x26, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x49,
	0x4e, 0x10, 0x27, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x28, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x29, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x5f,
	0x43, 0x4f, 0x55, 0x52, 0x54, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45,
	0x52, 0x54, 0x10, 0x2a, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x5f, 0x43, 0x4f, 0x55, 0x52, 0x54, 0x5f,
	0x43, 0x48, 0x49, 0x50, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x45, 0x10, 0x2b,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x5f, 0x45, 0x47, 0x47, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x2c,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x5f, 0x45, 0x47, 0x47, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x2d, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x5f, 0x45, 0x47, 0x47, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x10, 0x2e, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x5f, 0x46, 0x49,
	0x4c, 0x4c, 0x10, 0x2f, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f,
	0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x30,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x31,
	0x2a, 0xa9, 0x04, 0x0a, 0x04, 0x54, 0x49, 0x4d, 0x45, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x5f, 0x54, 0x4f, 0x55, 0x52, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x5f, 0x4c, 0x41, 0x44, 0x44, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x50, 0x41, 0x53, 0x53, 0x10,
	0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x5f, 0x47, 0x4c, 0x4f, 0x52, 0x59, 0x52, 0x4f, 0x41, 0x44,
	0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x10, 0x05, 0x12, 0x0c,
	0x0a, 0x08, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08,
	0x54, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x5f,
	0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x54,
	0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x49, 0x4e, 0x5f, 0x37, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x09,
	0x12, 0x0c, 0x0a, 0x08, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x10, 0x0a, 0x12, 0x0b,
	0x0a, 0x07, 0x54, 0x5f, 0x43, 0x44, 0x4b, 0x45, 0x59, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x54,
	0x5f, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0c, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x0d, 0x12, 0x13,
	0x0a, 0x0f, 0x54, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x49,
	0x4e, 0x10, 0x0e, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x10, 0x0f, 0x12,
	0x11, 0x0a, 0x0d, 0x54, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x42, 0x4f, 0x41, 0x52, 0x44,
	0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x11, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x5f, 0x50,
	0x41, 0x43, 0x4b, 0x10, 0x12, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10,
	0x13, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x49,
	0x54, 0x59, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x5f, 0x54, 0x55, 0x52, 0x4e, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x15, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x5f, 0x46, 0x49, 0x47, 0x48, 0x54,
	0x10, 0x16, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x4f,
	0x52, 0x10, 0x17, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x5f, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x10, 0x18, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x49, 0x4e, 0x10, 0x19, 0x12, 0x0f,
	0x0a, 0x0b, 0x54, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x1a, 0x12,
	0x09, 0x0a, 0x05, 0x54, 0x5f, 0x45, 0x47, 0x47, 0x10, 0x1b, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x5f,
	0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x10, 0x1c, 0x12, 0x0a, 0x0a, 0x06, 0x54,
	0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x1d, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x5f, 0x43, 0x4f, 0x55,
	0x52, 0x54, 0x10, 0x1e, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e,
	0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1f, 0x12, 0x0e, 0x0a, 0x0a,
	0x54, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x20, 0x2a, 0xf6, 0x01, 0x0a,
	0x06, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x5f, 0x43, 0x55, 0x50,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x5f, 0x45, 0x4e, 0x44, 0x4c, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x53, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x52, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x5f, 0x54, 0x48, 0x52, 0x45, 0x45, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x5f, 0x43, 0x4f,
	0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x5f,
	0x54, 0x4f, 0x55, 0x52, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x5f, 0x4e, 0x4f, 0x57, 0x5f,
	0x43, 0x55, 0x50, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c,
	0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x5f, 0x54, 0x4f,
	0x54, 0x41, 0x4c, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x5f,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x5f, 0x42, 0x41, 0x54,
	0x54, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x5f, 0x46, 0x49, 0x47, 0x48, 0x54,
	0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x0d,
	0x12, 0x12, 0x0a, 0x0e, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x53, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x10, 0x0f, 0x2a, 0x4b, 0x0a, 0x0b, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x43, 0x41, 0x4e,
	0x5f, 0x42, 0x55, 0x59, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x41,
	0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x48, 0x4f, 0x50, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x47, 0x45, 0x54,
	0x10, 0x02, 0x2a, 0x6b, 0x0a, 0x0b, 0x53, 0x4b, 0x49, 0x4e, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x53, 0x4b, 0x49, 0x4e, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x54, 0x48,
	0x45, 0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x43,
	0x4c, 0x4f, 0x54, 0x48, 0x45, 0x53, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x45, 0x51,
	0x55, 0x49, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x54, 0x48, 0x45, 0x53, 0x10, 0x03, 0x12, 0x10, 0x0a,
	0x0c, 0x55, 0x4e, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x53, 0x4b, 0x49, 0x4e, 0x10, 0x04, 0x2a,
	0x18, 0x0a, 0x0d, 0x43, 0x4c, 0x4f, 0x54, 0x48, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58,
	0x12, 0x07, 0x0a, 0x03, 0x43, 0x49, 0x31, 0x10, 0x00, 0x2a, 0x2d, 0x0a, 0x06, 0x52, 0x41, 0x54,
	0x49, 0x46, 0x59, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45,
	0x4a, 0x45, 0x43, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44,
	0x5f, 0x41, 0x47, 0x52, 0x45, 0x45, 0x10, 0x01, 0x2a, 0x4d, 0x0a, 0x09, 0x52, 0x45, 0x43, 0x4f,
	0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x88, 0x01, 0x0a, 0x0d, 0x46, 0x52, 0x49, 0x45,
	0x4e, 0x44, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x5f, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x03, 0x12, 0x13,
	0x0a, 0x0f, 0x46, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x42,
	0x4f, 0x41, 0x52, 0x44, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x5f, 0x50, 0x45, 0x52, 0x53,
	0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x5f, 0x43, 0x48, 0x41, 0x54,
	0x10, 0x07, 0x2a, 0x2e, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x50, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x57, 0x4e,
	0x10, 0x02, 0x2a, 0x2d, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x57, 0x5f, 0x57, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x5f, 0x4c,
	0x4f, 0x53, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x10,
	0x02, 0x2a, 0x67, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d,
	0x4d, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x33, 0x0a, 0x0e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x5f, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x5f, 0x57, 0x49,
	0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x5f, 0x44, 0x52, 0x41, 0x4d, 0x10, 0x02, 0x42,
	0x0b, 0x5a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_define_proto_rawDescOnce sync.Once
	file_define_proto_rawDescData = file_define_proto_rawDesc
)

func file_define_proto_rawDescGZIP() []byte {
	file_define_proto_rawDescOnce.Do(func() {
		file_define_proto_rawDescData = protoimpl.X.CompressGZIP(file_define_proto_rawDescData)
	})
	return file_define_proto_rawDescData
}

var file_define_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_define_proto_goTypes = []interface{}{
	(ITEM)(0),                 // 0: ITEM
	(SOURCE)(0),               // 1: SOURCE
	(TIME)(0),                 // 2: TIME
	(RECORD)(0),               // 3: RECORD
	(SHOP_STATUS)(0),          // 4: SHOP_STATUS
	(SKIN_OPTION)(0),          // 5: SKIN_OPTION
	(CLOTHES_INDEX)(0),        // 6: CLOTHES_INDEX
	(RATIFY)(0),               // 7: RATIFY
	(RECOMMEND)(0),            // 8: RECOMMEND
	(FRIEND_SOURCE)(0),        // 9: FRIEND_SOURCE
	(SearchDirection)(0),      // 10: SearchDirection
	(WinState)(0),             // 11: WinState
	(CommonConditionState)(0), // 12: CommonConditionState
	(ServerWinState)(0),       // 13: ServerWinState
}
var file_define_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_define_proto_init() }
func file_define_proto_init() {
	if File_define_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_define_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_define_proto_goTypes,
		DependencyIndexes: file_define_proto_depIdxs,
		EnumInfos:         file_define_proto_enumTypes,
	}.Build()
	File_define_proto = out.File
	file_define_proto_rawDesc = nil
	file_define_proto_goTypes = nil
	file_define_proto_depIdxs = nil
}
