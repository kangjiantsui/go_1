// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.10.0
// source: code.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CODE int32

const (
	CODE_DEFAULT                         CODE = 0
	CODE_SUCCESS                         CODE = 200   // 请求正常
	CODE_PARAM_ERROR                     CODE = 400   // 参数错误
	CODE_TOKEN_EMPTY                     CODE = 402   // 无 token
	CODE_TOKEN_INVALID                   CODE = 403   // token 无效
	CODE_TOKEN_EXPIRED                   CODE = 404   // token 过期
	CODE_NO_SUCH_USER                    CODE = 405   // 没这个玩家
	CODE_AUTH_ERROR                      CODE = 406   // 保留
	CODE_LOGIN_INVALID                   CODE = 407   // 登录信息校验错误
	CODE_USER_LOCKED                     CODE = 408   // 玩家账号被锁定
	CODE_SERVER_ERROR                    CODE = 500   // 服务器错误
	CODE_DATABASE_ERROR                  CODE = 501   // 数据库错误
	CODE_SYSTEM_LOCK                     CODE = 502   // 系统未开放
	CODE_RPC_ERROR                       CODE = 503   // 超时
	CODE_NO_SUCH_ACTOR                   CODE = 601   // 没有该球员
	CODE_ACTOR_IS_MAX_LEVEL              CODE = 602   // 球员已达最大等级
	CODE_ACTOR_EXP_LACK                  CODE = 603   // 球员经验不足
	CODE_NO_RARITY_ACTOR                 CODE = 604   // 找不到该稀有度的球员
	CODE_NO_SKILL                        CODE = 605   // 技能未解锁
	CODE_COIN_NOT_ENOUGH                 CODE = 701   // 金币不足
	CODE_REWARD_HAS_TAKEN                CODE = 702   // 奖励已被领取
	CODE_LADDER_NO_RECORD                CODE = 801   // 没有该玩家天梯记录
	CODE_TOUR_NO_RECORD                  CODE = 901   // 没有该玩家的赛季挑战赛记录
	CODE_BATTLEPASS_CONFIG_NOTFOUND      CODE = 1001  //找不到赛券配置数据
	CODE_BATTLEPASS_REWARD_REPEATED      CODE = 1002  //赛券奖励不能重复领取
	CODE_BATTLEPASS_INFO_NOTFOUND        CODE = 1003  //玩家赛券数据找不到
	CODE_BATTLEPASS_CANT_REWARD_LEVEL    CODE = 1004  //赛券奖励领取失败，等级不够
	CODE_BATTLEPASS_CANT_BUY             CODE = 1005  //明星赛券不能重复购买
	CODE_BATTLEPASS_CANT_REWARD_SEASON   CODE = 1006  //赛券奖励领取失败，赛季太久远
	CODE_BATTLEPASS_CANT_REWARD_NOREWARD CODE = 1007  //赛券奖励领取失败，该级没有奖励
	CODE_BUILD_ITEM_FAILED               CODE = 1008  //解析item配置失败
	CODE_FIGHT_BUSY                      CODE = 1101  // 战斗中，请稍后
	CODE_GLORYROAD_CANT_REWARD           CODE = 1201  //球星之路领奖失败，杯数不够
	CODE_SHOP_CONFIG_NOTFOUND            CODE = 1301  // 商店配置找不到
	CODE_SHOP_CANT_BUY                   CODE = 1302  // 商品购买失败，钱不够
	CODE_SHOP_CANT_REPEATED_BUY          CODE = 1303  // 商品不能重复购买
	CODE_SHOP_NOTFOUND                   CODE = 1304  // 商品找不到
	CODE_SHOP_BOX_CANT_BUY               CODE = 1305  // 资源商店，当天宝箱购买次数达到上限
	CODE_AVATAR_NOT_UNLOCKED             CODE = 1401  // 头像未解锁
	CODE_CANT_RENAME                     CODE = 1402  // 无法改名，未冷却
	CODE_PLAYER_NOTFOUND                 CODE = 1403  // 玩家信息找不到
	CODE_SENSITIVE_NAME                  CODE = 1404  // 名字包含敏感词
	CODE_NO_SKIN                         CODE = 1501  // 皮肤未解锁
	CODE_FRIENDS_FULL                    CODE = 1601  // 好友已满
	CODE_FRIENDS_OTHER_FULL              CODE = 1602  // 对方好友已满
	CODE_FRIENDS_REPEATED_REQ            CODE = 1603  // 重复的好友
	CODE_NO_MORE_ACTIVATE_CODE           CODE = 1701  // 没有激活码
	CODE_FAIL_TO_GET_ACTIVE_CODE         CODE = 1702  // 获取激活码失败
	CODE_FAIL_TO_BIND_ACTIVE_CODE        CODE = 1703  // 绑定激活码失败
	CODE_ACCOUNT_NOT_BIND                CODE = 1801  // 账号还未绑定
	CODE_ACCOUNT_REWARD_TAKEN            CODE = 1802  // 绑定账号奖励已领取
	CODE_ACCOUNT_HAS_BIND                CODE = 1803  // 账号已绑定
	CODE_ACCOUNT_EXIST                   CODE = 1804  // ohayoo账号已存在
	CODE_INVALID_CD_KEY                  CODE = 1901  // 无效的兑换码
	CODE_HAS_USED_CD_KEY                 CODE = 1902  // 账号已经使用过该类型兑换码
	CODE_CD_KEY_IN_USE                   CODE = 1903  // 兑换码生效中
	CODE_HAS_USE_SAME_GROUP_KEY          CODE = 1904  // 以使用了同类型的兑换码
	CODE_ACHIEVEMENT_PARAM_ERR           CODE = 2001  // 成就参数类型错误
	CODE_FACE_NO_CONFIG                  CODE = 2101  // 没有表情配置
	CODE_CONDITION_NOT_MATCH             CODE = 2201  // 条件不满足
	CODE_KR_TAG_IS_SAME                  CODE = 2301  // 路人王是同赛季
	CODE_KR_TAG_IS_DIFF                  CODE = 2302  // 路人王赛季不匹配
	CODE_TAKE_REWARD_FIRST               CODE = 2303  // 请先领奖
	CODE_REWARD_FAILED                   CODE = 2304  // 奖励领取失败
	CODE_KR_RESET_PLEASE                 CODE = 2305  // 请重置
	CODE_KR_SIGN_FIRST                   CODE = 2306  // 报名先
	CODE_KR_NO_CHANCE                    CODE = 2307  // 机会已用完
	CODE_PAY_ERROR_CHANNEL               CODE = 2401  // 支付渠道校验错误
	CODE_DECODE_ERROR                    CODE = 2402  // 解析错误
	CODE_NOT_PAID                        CODE = 2403  // 还未支付
	CODE_HAS_DELIVERED                   CODE = 2404  // 已发货
	CODE_NOT_USERS_ORDER                 CODE = 2405  //  不是该玩家的订单
	CODE_PAY_IN_CD                       CODE = 2406  // 支付订单cd中
	CODE_PAY_AGE_UNDER                   CODE = 2407  // 未满8岁
	CODE_PAY_AGE_LIMIT                   CODE = 2408  // 月累计到达限额
	CODE_PAY_SINGLE_LIMIT                CODE = 2409  // 单笔到达现额
	CODE_PAY_HAS_PAID                    CODE = 2410  // 已经支付完
	CODE_PAY_QRCODE_CHECKED              CODE = 2411  // 二维码已被扫描
	CODE_PAY_NO_ORDER                    CODE = 2412  // 未找到订单信息
	CODE_PAY_USER_PAIL                   CODE = 2413  // 获取用户信息失败
	CODE_PAY_PREPAY_ID_FAIL              CODE = 2414  // 生成预订单失败
	CODE_PAY_SIGN_FAIL                   CODE = 2415  // 签名失败
	CODE_APPLE_BUNDLE_ID_INVALID         CODE = 2416  // 苹果登录或者支付 bundleId 不合法，避免不同的包使用我们的支付
	CODE_APPLE_PRODUCT_ID_INVALID        CODE = 2417  // 苹果登录或者支付 productId 不合法,避免通过修改 DNS 刷支付，要求 productId 使用包名作为前缀
	CODE_NEW_ACTOR_ACTIVITY_NOT_FIND     CODE = 2501  // 没有找到该活动
	CODE_NEW_ACTOR_ACTIVITY_NOT_START    CODE = 2502  // 活动还未开始
	CODE_NEW_ACTOR_ACTIVITY_END          CODE = 2503  // 活动已结束
	CODE_NEW_ACTOR_ACTIVITY_HAS_PASS     CODE = 2504  // 已通关
	CODE_NEW_ACTOR_ACTIVITY_NOT_PASS     CODE = 2505  // 未通关
	CODE_NEW_ACTOR_ACTIVITY_HAS_REWARDED CODE = 2506  // 已领取
	CODE_NO_COURT                        CODE = 2601  // 没有该球场
	CODE_HAS_DECORATION                  CODE = 2602  // 已经获取过该装饰
	CODE_NO_DECORATION                   CODE = 2603  // 没有获得该装饰
	CODE_NO_CHIP_CONF                    CODE = 2604  // 没有该碎片信息
	CODE_NO_COURT_CONF                   CODE = 2605  // 没有该球场信息
	CODE_NO_DECORATION_CAN_GET           CODE = 2606  // 没有装饰可获取
	CODE_NO_CHIP_RECORD                  CODE = 2607  // 没有对应碎片记录
	CODE_CHIP_NOT_ENOUGH                 CODE = 2608  // 碎片不足
	CODE_HAS_COURT_ALREADY               CODE = 2609  // 已有该球场
	CODE_DIAMOND_NOT_ENOUGH              CODE = 2610  // 钻石不足
	CODE_NO_PRIVILEGE_CONF               CODE = 2701  // 没有对应特权卡信息
	CODE_DONT_HAVE_THE_PRIVILEGE         CODE = 2702  // 没有这个特权
	CODE_MAIL_CONFIG_ERROR               CODE = 2801  // 邮件配置文件错误
	CODE_NO_REAL_NAME_YET                CODE = 25001 // 没实名,不能领奖
)

// Enum value maps for CODE.
var (
	CODE_name = map[int32]string{
		0:     "DEFAULT",
		200:   "SUCCESS",
		400:   "PARAM_ERROR",
		402:   "TOKEN_EMPTY",
		403:   "TOKEN_INVALID",
		404:   "TOKEN_EXPIRED",
		405:   "NO_SUCH_USER",
		406:   "AUTH_ERROR",
		407:   "LOGIN_INVALID",
		408:   "USER_LOCKED",
		500:   "SERVER_ERROR",
		501:   "DATABASE_ERROR",
		502:   "SYSTEM_LOCK",
		503:   "RPC_ERROR",
		601:   "NO_SUCH_ACTOR",
		602:   "ACTOR_IS_MAX_LEVEL",
		603:   "ACTOR_EXP_LACK",
		604:   "NO_RARITY_ACTOR",
		605:   "NO_SKILL",
		701:   "COIN_NOT_ENOUGH",
		702:   "REWARD_HAS_TAKEN",
		801:   "LADDER_NO_RECORD",
		901:   "TOUR_NO_RECORD",
		1001:  "BATTLEPASS_CONFIG_NOTFOUND",
		1002:  "BATTLEPASS_REWARD_REPEATED",
		1003:  "BATTLEPASS_INFO_NOTFOUND",
		1004:  "BATTLEPASS_CANT_REWARD_LEVEL",
		1005:  "BATTLEPASS_CANT_BUY",
		1006:  "BATTLEPASS_CANT_REWARD_SEASON",
		1007:  "BATTLEPASS_CANT_REWARD_NOREWARD",
		1008:  "BUILD_ITEM_FAILED",
		1101:  "FIGHT_BUSY",
		1201:  "GLORYROAD_CANT_REWARD",
		1301:  "SHOP_CONFIG_NOTFOUND",
		1302:  "SHOP_CANT_BUY",
		1303:  "SHOP_CANT_REPEATED_BUY",
		1304:  "SHOP_NOTFOUND",
		1305:  "SHOP_BOX_CANT_BUY",
		1401:  "AVATAR_NOT_UNLOCKED",
		1402:  "CANT_RENAME",
		1403:  "PLAYER_NOTFOUND",
		1404:  "SENSITIVE_NAME",
		1501:  "NO_SKIN",
		1601:  "FRIENDS_FULL",
		1602:  "FRIENDS_OTHER_FULL",
		1603:  "FRIENDS_REPEATED_REQ",
		1701:  "NO_MORE_ACTIVATE_CODE",
		1702:  "FAIL_TO_GET_ACTIVE_CODE",
		1703:  "FAIL_TO_BIND_ACTIVE_CODE",
		1801:  "ACCOUNT_NOT_BIND",
		1802:  "ACCOUNT_REWARD_TAKEN",
		1803:  "ACCOUNT_HAS_BIND",
		1804:  "ACCOUNT_EXIST",
		1901:  "INVALID_CD_KEY",
		1902:  "HAS_USED_CD_KEY",
		1903:  "CD_KEY_IN_USE",
		1904:  "HAS_USE_SAME_GROUP_KEY",
		2001:  "ACHIEVEMENT_PARAM_ERR",
		2101:  "FACE_NO_CONFIG",
		2201:  "CONDITION_NOT_MATCH",
		2301:  "KR_TAG_IS_SAME",
		2302:  "KR_TAG_IS_DIFF",
		2303:  "TAKE_REWARD_FIRST",
		2304:  "REWARD_FAILED",
		2305:  "KR_RESET_PLEASE",
		2306:  "KR_SIGN_FIRST",
		2307:  "KR_NO_CHANCE",
		2401:  "PAY_ERROR_CHANNEL",
		2402:  "DECODE_ERROR",
		2403:  "NOT_PAID",
		2404:  "HAS_DELIVERED",
		2405:  "NOT_USERS_ORDER",
		2406:  "PAY_IN_CD",
		2407:  "PAY_AGE_UNDER",
		2408:  "PAY_AGE_LIMIT",
		2409:  "PAY_SINGLE_LIMIT",
		2410:  "PAY_HAS_PAID",
		2411:  "PAY_QRCODE_CHECKED",
		2412:  "PAY_NO_ORDER",
		2413:  "PAY_USER_PAIL",
		2414:  "PAY_PREPAY_ID_FAIL",
		2415:  "PAY_SIGN_FAIL",
		2416:  "APPLE_BUNDLE_ID_INVALID",
		2417:  "APPLE_PRODUCT_ID_INVALID",
		2501:  "NEW_ACTOR_ACTIVITY_NOT_FIND",
		2502:  "NEW_ACTOR_ACTIVITY_NOT_START",
		2503:  "NEW_ACTOR_ACTIVITY_END",
		2504:  "NEW_ACTOR_ACTIVITY_HAS_PASS",
		2505:  "NEW_ACTOR_ACTIVITY_NOT_PASS",
		2506:  "NEW_ACTOR_ACTIVITY_HAS_REWARDED",
		2601:  "NO_COURT",
		2602:  "HAS_DECORATION",
		2603:  "NO_DECORATION",
		2604:  "NO_CHIP_CONF",
		2605:  "NO_COURT_CONF",
		2606:  "NO_DECORATION_CAN_GET",
		2607:  "NO_CHIP_RECORD",
		2608:  "CHIP_NOT_ENOUGH",
		2609:  "HAS_COURT_ALREADY",
		2610:  "DIAMOND_NOT_ENOUGH",
		2701:  "NO_PRIVILEGE_CONF",
		2702:  "DONT_HAVE_THE_PRIVILEGE",
		2801:  "MAIL_CONFIG_ERROR",
		25001: "NO_REAL_NAME_YET",
	}
	CODE_value = map[string]int32{
		"DEFAULT":                         0,
		"SUCCESS":                         200,
		"PARAM_ERROR":                     400,
		"TOKEN_EMPTY":                     402,
		"TOKEN_INVALID":                   403,
		"TOKEN_EXPIRED":                   404,
		"NO_SUCH_USER":                    405,
		"AUTH_ERROR":                      406,
		"LOGIN_INVALID":                   407,
		"USER_LOCKED":                     408,
		"SERVER_ERROR":                    500,
		"DATABASE_ERROR":                  501,
		"SYSTEM_LOCK":                     502,
		"RPC_ERROR":                       503,
		"NO_SUCH_ACTOR":                   601,
		"ACTOR_IS_MAX_LEVEL":              602,
		"ACTOR_EXP_LACK":                  603,
		"NO_RARITY_ACTOR":                 604,
		"NO_SKILL":                        605,
		"COIN_NOT_ENOUGH":                 701,
		"REWARD_HAS_TAKEN":                702,
		"LADDER_NO_RECORD":                801,
		"TOUR_NO_RECORD":                  901,
		"BATTLEPASS_CONFIG_NOTFOUND":      1001,
		"BATTLEPASS_REWARD_REPEATED":      1002,
		"BATTLEPASS_INFO_NOTFOUND":        1003,
		"BATTLEPASS_CANT_REWARD_LEVEL":    1004,
		"BATTLEPASS_CANT_BUY":             1005,
		"BATTLEPASS_CANT_REWARD_SEASON":   1006,
		"BATTLEPASS_CANT_REWARD_NOREWARD": 1007,
		"BUILD_ITEM_FAILED":               1008,
		"FIGHT_BUSY":                      1101,
		"GLORYROAD_CANT_REWARD":           1201,
		"SHOP_CONFIG_NOTFOUND":            1301,
		"SHOP_CANT_BUY":                   1302,
		"SHOP_CANT_REPEATED_BUY":          1303,
		"SHOP_NOTFOUND":                   1304,
		"SHOP_BOX_CANT_BUY":               1305,
		"AVATAR_NOT_UNLOCKED":             1401,
		"CANT_RENAME":                     1402,
		"PLAYER_NOTFOUND":                 1403,
		"SENSITIVE_NAME":                  1404,
		"NO_SKIN":                         1501,
		"FRIENDS_FULL":                    1601,
		"FRIENDS_OTHER_FULL":              1602,
		"FRIENDS_REPEATED_REQ":            1603,
		"NO_MORE_ACTIVATE_CODE":           1701,
		"FAIL_TO_GET_ACTIVE_CODE":         1702,
		"FAIL_TO_BIND_ACTIVE_CODE":        1703,
		"ACCOUNT_NOT_BIND":                1801,
		"ACCOUNT_REWARD_TAKEN":            1802,
		"ACCOUNT_HAS_BIND":                1803,
		"ACCOUNT_EXIST":                   1804,
		"INVALID_CD_KEY":                  1901,
		"HAS_USED_CD_KEY":                 1902,
		"CD_KEY_IN_USE":                   1903,
		"HAS_USE_SAME_GROUP_KEY":          1904,
		"ACHIEVEMENT_PARAM_ERR":           2001,
		"FACE_NO_CONFIG":                  2101,
		"CONDITION_NOT_MATCH":             2201,
		"KR_TAG_IS_SAME":                  2301,
		"KR_TAG_IS_DIFF":                  2302,
		"TAKE_REWARD_FIRST":               2303,
		"REWARD_FAILED":                   2304,
		"KR_RESET_PLEASE":                 2305,
		"KR_SIGN_FIRST":                   2306,
		"KR_NO_CHANCE":                    2307,
		"PAY_ERROR_CHANNEL":               2401,
		"DECODE_ERROR":                    2402,
		"NOT_PAID":                        2403,
		"HAS_DELIVERED":                   2404,
		"NOT_USERS_ORDER":                 2405,
		"PAY_IN_CD":                       2406,
		"PAY_AGE_UNDER":                   2407,
		"PAY_AGE_LIMIT":                   2408,
		"PAY_SINGLE_LIMIT":                2409,
		"PAY_HAS_PAID":                    2410,
		"PAY_QRCODE_CHECKED":              2411,
		"PAY_NO_ORDER":                    2412,
		"PAY_USER_PAIL":                   2413,
		"PAY_PREPAY_ID_FAIL":              2414,
		"PAY_SIGN_FAIL":                   2415,
		"APPLE_BUNDLE_ID_INVALID":         2416,
		"APPLE_PRODUCT_ID_INVALID":        2417,
		"NEW_ACTOR_ACTIVITY_NOT_FIND":     2501,
		"NEW_ACTOR_ACTIVITY_NOT_START":    2502,
		"NEW_ACTOR_ACTIVITY_END":          2503,
		"NEW_ACTOR_ACTIVITY_HAS_PASS":     2504,
		"NEW_ACTOR_ACTIVITY_NOT_PASS":     2505,
		"NEW_ACTOR_ACTIVITY_HAS_REWARDED": 2506,
		"NO_COURT":                        2601,
		"HAS_DECORATION":                  2602,
		"NO_DECORATION":                   2603,
		"NO_CHIP_CONF":                    2604,
		"NO_COURT_CONF":                   2605,
		"NO_DECORATION_CAN_GET":           2606,
		"NO_CHIP_RECORD":                  2607,
		"CHIP_NOT_ENOUGH":                 2608,
		"HAS_COURT_ALREADY":               2609,
		"DIAMOND_NOT_ENOUGH":              2610,
		"NO_PRIVILEGE_CONF":               2701,
		"DONT_HAVE_THE_PRIVILEGE":         2702,
		"MAIL_CONFIG_ERROR":               2801,
		"NO_REAL_NAME_YET":                25001,
	}
)

func (x CODE) Enum() *CODE {
	p := new(CODE)
	*p = x
	return p
}

func (x CODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CODE) Descriptor() protoreflect.EnumDescriptor {
	return file_code_proto_enumTypes[0].Descriptor()
}

func (CODE) Type() protoreflect.EnumType {
	return &file_code_proto_enumTypes[0]
}

func (x CODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CODE.Descriptor instead.
func (CODE) EnumDescriptor() ([]byte, []int) {
	return file_code_proto_rawDescGZIP(), []int{0}
}

var File_code_proto protoreflect.FileDescriptor

var file_code_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0xfb, 0x12, 0x0a,
	0x04, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0xc8, 0x01,
	0x12, 0x10, 0x0a, 0x0b, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x90, 0x03, 0x12, 0x10, 0x0a, 0x0b, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x4d, 0x50, 0x54,
	0x59, 0x10, 0x92, 0x03, 0x12, 0x12, 0x0a, 0x0d, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x93, 0x03, 0x12, 0x12, 0x0a, 0x0d, 0x54, 0x4f, 0x4b, 0x45,
	0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x94, 0x03, 0x12, 0x11, 0x0a, 0x0c,
	0x4e, 0x4f, 0x5f, 0x53, 0x55, 0x43, 0x48, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x95, 0x03, 0x12,
	0x0f, 0x0a, 0x0a, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x96, 0x03,
	0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x97, 0x03, 0x12, 0x10, 0x0a, 0x0b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0x98, 0x03, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xf4, 0x03, 0x12, 0x13, 0x0a, 0x0e, 0x44, 0x41, 0x54,
	0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xf5, 0x03, 0x12, 0x10,
	0x0a, 0x0b, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0xf6, 0x03,
	0x12, 0x0e, 0x0a, 0x09, 0x52, 0x50, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xf7, 0x03,
	0x12, 0x12, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x53, 0x55, 0x43, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x4f,
	0x52, 0x10, 0xd9, 0x04, 0x12, 0x17, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x53,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0xda, 0x04, 0x12, 0x13, 0x0a,
	0x0e, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4c, 0x41, 0x43, 0x4b, 0x10,
	0xdb, 0x04, 0x12, 0x14, 0x0a, 0x0f, 0x4e, 0x4f, 0x5f, 0x52, 0x41, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x10, 0xdc, 0x04, 0x12, 0x0d, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x10, 0xdd, 0x04, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x49, 0x4e, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x10, 0xbd, 0x05, 0x12, 0x15, 0x0a,
	0x10, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x54, 0x41, 0x4b, 0x45,
	0x4e, 0x10, 0xbe, 0x05, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x44, 0x44, 0x45, 0x52, 0x5f, 0x4e,
	0x4f, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0xa1, 0x06, 0x12, 0x13, 0x0a, 0x0e, 0x54,
	0x4f, 0x55, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x85, 0x07,
	0x12, 0x1f, 0x0a, 0x1a, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xe9,
	0x07, 0x12, 0x1f, 0x0a, 0x1a, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x50, 0x41, 0x53, 0x53, 0x5f,
	0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10,
	0xea, 0x07, 0x12, 0x1d, 0x0a, 0x18, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x50, 0x41, 0x53, 0x53,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xeb,
	0x07, 0x12, 0x21, 0x0a, 0x1c, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x50, 0x41, 0x53, 0x53, 0x5f,
	0x43, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x10, 0xec, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x50, 0x41,
	0x53, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x59, 0x10, 0xed, 0x07, 0x12, 0x22,
	0x0a, 0x1d, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x43, 0x41, 0x4e,
	0x54, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x10,
	0xee, 0x07, 0x12, 0x24, 0x0a, 0x1f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x50, 0x41, 0x53, 0x53,
	0x5f, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x4f, 0x52,
	0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xef, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x42, 0x55, 0x49, 0x4c,
	0x44, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xf0, 0x07,
	0x12, 0x0f, 0x0a, 0x0a, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0xcd,
	0x08, 0x12, 0x1a, 0x0a, 0x15, 0x47, 0x4c, 0x4f, 0x52, 0x59, 0x52, 0x4f, 0x41, 0x44, 0x5f, 0x43,
	0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xb1, 0x09, 0x12, 0x19, 0x0a,
	0x14, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4e, 0x4f, 0x54,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x95, 0x0a, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x48, 0x4f, 0x50,
	0x5f, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x96, 0x0a, 0x12, 0x1b, 0x0a, 0x16,
	0x53, 0x48, 0x4f, 0x50, 0x5f, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54,
	0x45, 0x44, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x97, 0x0a, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x48, 0x4f,
	0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x98, 0x0a, 0x12, 0x16, 0x0a,
	0x11, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x42, 0x4f, 0x58, 0x5f, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x42,
	0x55, 0x59, 0x10, 0x99, 0x0a, 0x12, 0x18, 0x0a, 0x13, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0xf9, 0x0a, 0x12,
	0x10, 0x0a, 0x0b, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xfa,
	0x0a, 0x12, 0x14, 0x0a, 0x0f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0xfb, 0x0a, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x45, 0x4e, 0x53, 0x49,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xfc, 0x0a, 0x12, 0x0c, 0x0a, 0x07,
	0x4e, 0x4f, 0x5f, 0x53, 0x4b, 0x49, 0x4e, 0x10, 0xdd, 0x0b, 0x12, 0x11, 0x0a, 0x0c, 0x46, 0x52,
	0x49, 0x45, 0x4e, 0x44, 0x53, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0xc1, 0x0c, 0x12, 0x17, 0x0a,
	0x12, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x53, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x46,
	0x55, 0x4c, 0x4c, 0x10, 0xc2, 0x0c, 0x12, 0x19, 0x0a, 0x14, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44,
	0x53, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xc3,
	0x0c, 0x12, 0x1a, 0x0a, 0x15, 0x4e, 0x4f, 0x5f, 0x4d, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xa5, 0x0d, 0x12, 0x1c, 0x0a,
	0x17, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x4f, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xa6, 0x0d, 0x12, 0x1d, 0x0a, 0x18, 0x46,
	0x41, 0x49, 0x4c, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xa7, 0x0d, 0x12, 0x15, 0x0a, 0x10, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x10, 0x89,
	0x0e, 0x12, 0x19, 0x0a, 0x14, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x57,
	0x41, 0x52, 0x44, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4e, 0x10, 0x8a, 0x0e, 0x12, 0x15, 0x0a, 0x10,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x42, 0x49, 0x4e, 0x44,
	0x10, 0x8b, 0x0e, 0x12, 0x12, 0x0a, 0x0d, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x10, 0x8c, 0x0e, 0x12, 0x13, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x43, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0xed, 0x0e, 0x12, 0x14, 0x0a, 0x0f,
	0x48, 0x41, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x5f, 0x43, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x10,
	0xee, 0x0e, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x5f,
	0x55, 0x53, 0x45, 0x10, 0xef, 0x0e, 0x12, 0x1b, 0x0a, 0x16, 0x48, 0x41, 0x53, 0x5f, 0x55, 0x53,
	0x45, 0x5f, 0x53, 0x41, 0x4d, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4b, 0x45, 0x59,
	0x10, 0xf0, 0x0e, 0x12, 0x1a, 0x0a, 0x15, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xd1, 0x0f, 0x12,
	0x13, 0x0a, 0x0e, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x10, 0xb5, 0x10, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x99, 0x11, 0x12, 0x13,
	0x0a, 0x0e, 0x4b, 0x52, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x49, 0x53, 0x5f, 0x53, 0x41, 0x4d, 0x45,
	0x10, 0xfd, 0x11, 0x12, 0x13, 0x0a, 0x0e, 0x4b, 0x52, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x49, 0x53,
	0x5f, 0x44, 0x49, 0x46, 0x46, 0x10, 0xfe, 0x11, 0x12, 0x16, 0x0a, 0x11, 0x54, 0x41, 0x4b, 0x45,
	0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0xff, 0x11,
	0x12, 0x12, 0x0a, 0x0d, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x80, 0x12, 0x12, 0x14, 0x0a, 0x0f, 0x4b, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54,
	0x5f, 0x50, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0x81, 0x12, 0x12, 0x12, 0x0a, 0x0d, 0x4b, 0x52,
	0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x82, 0x12, 0x12, 0x11,
	0x0a, 0x0c, 0x4b, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x83,
	0x12, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x41, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0xe1, 0x12, 0x12, 0x11, 0x0a, 0x0c, 0x44, 0x45, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xe2, 0x12, 0x12, 0x0d, 0x0a, 0x08,
	0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x41, 0x49, 0x44, 0x10, 0xe3, 0x12, 0x12, 0x12, 0x0a, 0x0d, 0x48,
	0x41, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0xe4, 0x12, 0x12,
	0x14, 0x0a, 0x0f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x53, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x10, 0xe5, 0x12, 0x12, 0x0e, 0x0a, 0x09, 0x50, 0x41, 0x59, 0x5f, 0x49, 0x4e, 0x5f,
	0x43, 0x44, 0x10, 0xe6, 0x12, 0x12, 0x12, 0x0a, 0x0d, 0x50, 0x41, 0x59, 0x5f, 0x41, 0x47, 0x45,
	0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x10, 0xe7, 0x12, 0x12, 0x12, 0x0a, 0x0d, 0x50, 0x41, 0x59,
	0x5f, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0xe8, 0x12, 0x12, 0x15, 0x0a,
	0x10, 0x50, 0x41, 0x59, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x10, 0xe9, 0x12, 0x12, 0x11, 0x0a, 0x0c, 0x50, 0x41, 0x59, 0x5f, 0x48, 0x41, 0x53, 0x5f,
	0x50, 0x41, 0x49, 0x44, 0x10, 0xea, 0x12, 0x12, 0x17, 0x0a, 0x12, 0x50, 0x41, 0x59, 0x5f, 0x51,
	0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x45, 0x44, 0x10, 0xeb, 0x12,
	0x12, 0x11, 0x0a, 0x0c, 0x50, 0x41, 0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x10, 0xec, 0x12, 0x12, 0x12, 0x0a, 0x0d, 0x50, 0x41, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x50, 0x41, 0x49, 0x4c, 0x10, 0xed, 0x12, 0x12, 0x17, 0x0a, 0x12, 0x50, 0x41, 0x59, 0x5f, 0x50,
	0x52, 0x45, 0x50, 0x41, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0xee, 0x12,
	0x12, 0x12, 0x0a, 0x0d, 0x50, 0x41, 0x59, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x10, 0xef, 0x12, 0x12, 0x1c, 0x0a, 0x17, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x42, 0x55,
	0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0xf0, 0x12, 0x12, 0x1d, 0x0a, 0x18, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xf1,
	0x12, 0x12, 0x20, 0x0a, 0x1b, 0x4e, 0x45, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x10, 0xc5, 0x13, 0x12, 0x21, 0x0a, 0x1c, 0x4e, 0x45, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x10, 0xc6, 0x13, 0x12, 0x1b, 0x0a, 0x16, 0x4e, 0x45, 0x57, 0x5f, 0x41, 0x43,
	0x54, 0x4f, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x4e, 0x44,
	0x10, 0xc7, 0x13, 0x12, 0x20, 0x0a, 0x1b, 0x4e, 0x45, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x50, 0x41,
	0x53, 0x53, 0x10, 0xc8, 0x13, 0x12, 0x20, 0x0a, 0x1b, 0x4e, 0x45, 0x57, 0x5f, 0x41, 0x43, 0x54,
	0x4f, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x50, 0x41, 0x53, 0x53, 0x10, 0xc9, 0x13, 0x12, 0x24, 0x0a, 0x1f, 0x4e, 0x45, 0x57, 0x5f, 0x41,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x41,
	0x53, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x45, 0x44, 0x10, 0xca, 0x13, 0x12, 0x0d, 0x0a,
	0x08, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x55, 0x52, 0x54, 0x10, 0xa9, 0x14, 0x12, 0x13, 0x0a, 0x0e,
	0x48, 0x41, 0x53, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xaa,
	0x14, 0x12, 0x12, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0xab, 0x14, 0x12, 0x11, 0x0a, 0x0c, 0x4e, 0x4f, 0x5f, 0x43, 0x48, 0x49, 0x50,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x10, 0xac, 0x14, 0x12, 0x12, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x43,
	0x4f, 0x55, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x10, 0xad, 0x14, 0x12, 0x1a, 0x0a, 0x15,
	0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41,
	0x4e, 0x5f, 0x47, 0x45, 0x54, 0x10, 0xae, 0x14, 0x12, 0x13, 0x0a, 0x0e, 0x4e, 0x4f, 0x5f, 0x43,
	0x48, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0xaf, 0x14, 0x12, 0x14, 0x0a,
	0x0f, 0x43, 0x48, 0x49, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48,
	0x10, 0xb0, 0x14, 0x12, 0x16, 0x0a, 0x11, 0x48, 0x41, 0x53, 0x5f, 0x43, 0x4f, 0x55, 0x52, 0x54,
	0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0xb1, 0x14, 0x12, 0x17, 0x0a, 0x12, 0x44,
	0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47,
	0x48, 0x10, 0xb2, 0x14, 0x12, 0x16, 0x0a, 0x11, 0x4e, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x49,
	0x4c, 0x45, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x10, 0x8d, 0x15, 0x12, 0x1c, 0x0a, 0x17,
	0x44, 0x4f, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x56, 0x45, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x50, 0x52,
	0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x10, 0x8e, 0x15, 0x12, 0x16, 0x0a, 0x11, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0xf1, 0x15, 0x12, 0x16, 0x0a, 0x10, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x59, 0x45, 0x54, 0x10, 0xa9, 0xc3, 0x01, 0x42, 0x0b, 0x5a, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_code_proto_rawDescOnce sync.Once
	file_code_proto_rawDescData = file_code_proto_rawDesc
)

func file_code_proto_rawDescGZIP() []byte {
	file_code_proto_rawDescOnce.Do(func() {
		file_code_proto_rawDescData = protoimpl.X.CompressGZIP(file_code_proto_rawDescData)
	})
	return file_code_proto_rawDescData
}

var file_code_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_code_proto_goTypes = []interface{}{
	(CODE)(0), // 0: CODE
}
var file_code_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_code_proto_init() }
func file_code_proto_init() {
	if File_code_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_code_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_code_proto_goTypes,
		DependencyIndexes: file_code_proto_depIdxs,
		EnumInfos:         file_code_proto_enumTypes,
	}.Build()
	File_code_proto = out.File
	file_code_proto_rawDesc = nil
	file_code_proto_goTypes = nil
	file_code_proto_depIdxs = nil
}
