// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.10.0
// source: record.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 一场战斗的结果统计
type FightRecordItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsWin     int32   `protobuf:"varint,1,opt,name=isWin,proto3" json:"isWin,omitempty"`                // 是否获胜   0获胜 1失败 2平局
	ScoreDiff int32   `protobuf:"varint,2,opt,name=scoreDiff,proto3" json:"scoreDiff,omitempty"`        // 分数差  实际分数差，如果玩法类型最大胜利得分不为11，则等比缩小到11分
	ActorList []int32 `protobuf:"varint,3,rep,packed,name=actorList,proto3" json:"actorList,omitempty"` // 出战球员
	Score     int32   `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`                // 得分
	Goal      int32   `protobuf:"varint,5,opt,name=goal,proto3" json:"goal,omitempty"`                  // 进球
}

func (x *FightRecordItem) Reset() {
	*x = FightRecordItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightRecordItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightRecordItem) ProtoMessage() {}

func (x *FightRecordItem) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightRecordItem.ProtoReflect.Descriptor instead.
func (*FightRecordItem) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{0}
}

func (x *FightRecordItem) GetIsWin() int32 {
	if x != nil {
		return x.IsWin
	}
	return 0
}

func (x *FightRecordItem) GetScoreDiff() int32 {
	if x != nil {
		return x.ScoreDiff
	}
	return 0
}

func (x *FightRecordItem) GetActorList() []int32 {
	if x != nil {
		return x.ActorList
	}
	return nil
}

func (x *FightRecordItem) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *FightRecordItem) GetGoal() int32 {
	if x != nil {
		return x.Goal
	}
	return 0
}

// 一种玩法模式的多场战斗统计结果  最多30场
type FightRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	F []*FightRecordItem `protobuf:"bytes,1,rep,name=f,proto3" json:"f,omitempty"`
}

func (x *FightRecord) Reset() {
	*x = FightRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightRecord) ProtoMessage() {}

func (x *FightRecord) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightRecord.ProtoReflect.Descriptor instead.
func (*FightRecord) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{1}
}

func (x *FightRecord) GetF() []*FightRecordItem {
	if x != nil {
		return x.F
	}
	return nil
}

// 多种玩法战斗结果集合
type FightRecordMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fr          []*FightRecordItem `protobuf:"bytes,1,rep,name=fr,proto3" json:"fr,omitempty"`                    // 一种大玩法的记录，最多30场
	MatchStreak int32              `protobuf:"varint,2,opt,name=matchStreak,proto3" json:"matchStreak,omitempty"` // 匹配系统的连胜场次
	CanStreak   int32              `protobuf:"varint,3,opt,name=canStreak,proto3" json:"canStreak,omitempty"`     // 是否可以连胜 0 不允许连胜
}

func (x *FightRecordMode) Reset() {
	*x = FightRecordMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightRecordMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightRecordMode) ProtoMessage() {}

func (x *FightRecordMode) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightRecordMode.ProtoReflect.Descriptor instead.
func (*FightRecordMode) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{2}
}

func (x *FightRecordMode) GetFr() []*FightRecordItem {
	if x != nil {
		return x.Fr
	}
	return nil
}

func (x *FightRecordMode) GetMatchStreak() int32 {
	if x != nil {
		return x.MatchStreak
	}
	return 0
}

func (x *FightRecordMode) GetCanStreak() int32 {
	if x != nil {
		return x.CanStreak
	}
	return 0
}

// 球员出战统计
type ActorRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` // 出战总次数
	Win   int32 `protobuf:"varint,2,opt,name=win,proto3" json:"win,omitempty"`     // 获胜总次数
	Score int32 `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"` // 总得分
	Goal  int32 `protobuf:"varint,4,opt,name=goal,proto3" json:"goal,omitempty"`   // 总进球
}

func (x *ActorRecord) Reset() {
	*x = ActorRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorRecord) ProtoMessage() {}

func (x *ActorRecord) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorRecord.ProtoReflect.Descriptor instead.
func (*ActorRecord) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{3}
}

func (x *ActorRecord) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ActorRecord) GetWin() int32 {
	if x != nil {
		return x.Win
	}
	return 0
}

func (x *ActorRecord) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ActorRecord) GetGoal() int32 {
	if x != nil {
		return x.Goal
	}
	return 0
}

type BattleRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` // 对战场次
	Win   int32 `protobuf:"varint,2,opt,name=win,proto3" json:"win,omitempty"`     // 获胜总次数
	Score int32 `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"` // 总得分
	Goal  int32 `protobuf:"varint,4,opt,name=goal,proto3" json:"goal,omitempty"`   // 总进球
}

func (x *BattleRecord) Reset() {
	*x = BattleRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleRecord) ProtoMessage() {}

func (x *BattleRecord) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleRecord.ProtoReflect.Descriptor instead.
func (*BattleRecord) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{4}
}

func (x *BattleRecord) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *BattleRecord) GetWin() int32 {
	if x != nil {
		return x.Win
	}
	return 0
}

func (x *BattleRecord) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *BattleRecord) GetGoal() int32 {
	if x != nil {
		return x.Goal
	}
	return 0
}

type BattleRecordMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bm map[int32]*BattleRecord `protobuf:"bytes,1,rep,name=bm,proto3" json:"bm,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // mode:BattleRecord
}

func (x *BattleRecordMode) Reset() {
	*x = BattleRecordMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleRecordMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleRecordMode) ProtoMessage() {}

func (x *BattleRecordMode) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleRecordMode.ProtoReflect.Descriptor instead.
func (*BattleRecordMode) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{5}
}

func (x *BattleRecordMode) GetBm() map[int32]*BattleRecord {
	if x != nil {
		return x.Bm
	}
	return nil
}

type BattleWinRatio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ratio  int32   `protobuf:"varint,1,opt,name=ratio,proto3" json:"ratio,omitempty"`          // 统计的胜率
	Result []int32 `protobuf:"varint,2,rep,packed,name=result,proto3" json:"result,omitempty"` // 胜负记录，0失败，1获胜，2平局
}

func (x *BattleWinRatio) Reset() {
	*x = BattleWinRatio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleWinRatio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleWinRatio) ProtoMessage() {}

func (x *BattleWinRatio) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleWinRatio.ProtoReflect.Descriptor instead.
func (*BattleWinRatio) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{6}
}

func (x *BattleWinRatio) GetRatio() int32 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *BattleWinRatio) GetResult() []int32 {
	if x != nil {
		return x.Result
	}
	return nil
}

// 生涯系统
type RecordInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxCup        int32                       `protobuf:"varint,1,opt,name=maxCup,proto3" json:"maxCup,omitempty"`                                                                                              // 最高奖杯数
	MaxEndless    int32                       `protobuf:"varint,2,opt,name=maxEndless,proto3" json:"maxEndless,omitempty"`                                                                                      // 无尽模式最高排名
	MaxLeagues    int32                       `protobuf:"varint,3,opt,name=maxLeagues,proto3" json:"maxLeagues,omitempty"`                                                                                      // 全国联赛最高排名
	WinOne        map[int32]int32             `protobuf:"bytes,4,rep,name=winOne,proto3" json:"winOne,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`     // 1v1胜利次数      玩法:次数   仅记录天梯玩法
	WinThree      map[int32]int32             `protobuf:"bytes,5,rep,name=winThree,proto3" json:"winThree,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 3v3胜利次数      玩法:次数   仅记录天梯玩法
	MaxCollection int32                       `protobuf:"varint,6,opt,name=maxCollection,proto3" json:"maxCollection,omitempty"`                                                                                // 收藏品个数
	MaxTour       map[int32]int32             `protobuf:"bytes,7,rep,name=maxTour,proto3" json:"maxTour,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`   // 赛季各种玩法最高记录 玩法:次数   仅记录赛季挑战赛
	NowCup        int32                       `protobuf:"varint,8,opt,name=nowCup,proto3" json:"nowCup,omitempty"`                                                                                              // 当前总杯数
	TotalScore    int32                       `protobuf:"varint,9,opt,name=totalScore,proto3" json:"totalScore,omitempty"`                                                                                      // 总的分数
	TotalGoal     int32                       `protobuf:"varint,10,opt,name=totalGoal,proto3" json:"totalGoal,omitempty"`                                                                                       // 总进球数
	ARecord       map[int32]*ActorRecord      `protobuf:"bytes,11,rep,name=aRecord,proto3" json:"aRecord,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`   // 球员战斗统计
	BRecord       map[int32]*BattleRecordMode `protobuf:"bytes,12,rep,name=bRecord,proto3" json:"bRecord,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`   // 玩法战斗统计
	FRecord       map[int32]*FightRecordMode  `protobuf:"bytes,13,rep,name=fRecord,proto3" json:"fRecord,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`   // 各大玩法的战绩集合
	TotalRecharge int32                       `protobuf:"varint,14,opt,name=totalRecharge,proto3" json:"totalRecharge,omitempty"`                                                                               // 总充值金额  分
	RechargeTimes int32                       `protobuf:"varint,15,opt,name=RechargeTimes,proto3" json:"RechargeTimes,omitempty"`                                                                               // 充值次数
}

func (x *RecordInfo) Reset() {
	*x = RecordInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordInfo) ProtoMessage() {}

func (x *RecordInfo) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordInfo.ProtoReflect.Descriptor instead.
func (*RecordInfo) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{7}
}

func (x *RecordInfo) GetMaxCup() int32 {
	if x != nil {
		return x.MaxCup
	}
	return 0
}

func (x *RecordInfo) GetMaxEndless() int32 {
	if x != nil {
		return x.MaxEndless
	}
	return 0
}

func (x *RecordInfo) GetMaxLeagues() int32 {
	if x != nil {
		return x.MaxLeagues
	}
	return 0
}

func (x *RecordInfo) GetWinOne() map[int32]int32 {
	if x != nil {
		return x.WinOne
	}
	return nil
}

func (x *RecordInfo) GetWinThree() map[int32]int32 {
	if x != nil {
		return x.WinThree
	}
	return nil
}

func (x *RecordInfo) GetMaxCollection() int32 {
	if x != nil {
		return x.MaxCollection
	}
	return 0
}

func (x *RecordInfo) GetMaxTour() map[int32]int32 {
	if x != nil {
		return x.MaxTour
	}
	return nil
}

func (x *RecordInfo) GetNowCup() int32 {
	if x != nil {
		return x.NowCup
	}
	return 0
}

func (x *RecordInfo) GetTotalScore() int32 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *RecordInfo) GetTotalGoal() int32 {
	if x != nil {
		return x.TotalGoal
	}
	return 0
}

func (x *RecordInfo) GetARecord() map[int32]*ActorRecord {
	if x != nil {
		return x.ARecord
	}
	return nil
}

func (x *RecordInfo) GetBRecord() map[int32]*BattleRecordMode {
	if x != nil {
		return x.BRecord
	}
	return nil
}

func (x *RecordInfo) GetFRecord() map[int32]*FightRecordMode {
	if x != nil {
		return x.FRecord
	}
	return nil
}

func (x *RecordInfo) GetTotalRecharge() int32 {
	if x != nil {
		return x.TotalRecharge
	}
	return 0
}

func (x *RecordInfo) GetRechargeTimes() int32 {
	if x != nil {
		return x.RechargeTimes
	}
	return 0
}

var File_record_proto protoreflect.FileDescriptor

var file_record_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d,
	0x01, 0x0a, 0x0f, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x44, 0x69, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x44, 0x69, 0x66, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x22, 0x2d,
	0x0a, 0x0b, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a,
	0x01, 0x66, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x01, 0x66, 0x22, 0x73, 0x0a,
	0x0f, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x20, 0x0a, 0x02, 0x66, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x02,
	0x66, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6b, 0x22, 0x5f, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x67,
	0x6f, 0x61, 0x6c, 0x22, 0x60, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x67, 0x6f, 0x61, 0x6c, 0x22, 0x83, 0x01, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x02, 0x62, 0x6d,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x6d, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x02, 0x62, 0x6d, 0x1a, 0x44, 0x0a, 0x07, 0x42, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3e, 0x0a, 0x0e, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xff, 0x07, 0x0a, 0x0a,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61,
	0x78, 0x43, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x43,
	0x75, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x45, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x4f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x57, 0x69, 0x6e, 0x4f, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x77, 0x69, 0x6e,
	0x4f, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x65, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x77, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61,
	0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x75, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d,
	0x61, 0x78, 0x54, 0x6f, 0x75, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x61, 0x78,
	0x54, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x77, 0x43, 0x75, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x6f, 0x77, 0x43, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x07, 0x61, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x32,
	0x0a, 0x07, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x62, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x46, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x66,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x57, 0x69, 0x6e, 0x4f, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a,
	0x0d, 0x57, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x61,
	0x78, 0x54, 0x6f, 0x75, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a, 0x0c, 0x41, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x4d, 0x0a, 0x0c, 0x42, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x4c, 0x0a, 0x0c, 0x46, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b, 0x5a,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_record_proto_rawDescOnce sync.Once
	file_record_proto_rawDescData = file_record_proto_rawDesc
)

func file_record_proto_rawDescGZIP() []byte {
	file_record_proto_rawDescOnce.Do(func() {
		file_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_record_proto_rawDescData)
	})
	return file_record_proto_rawDescData
}

var file_record_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_record_proto_goTypes = []interface{}{
	(*FightRecordItem)(nil),  // 0: FightRecordItem
	(*FightRecord)(nil),      // 1: FightRecord
	(*FightRecordMode)(nil),  // 2: FightRecordMode
	(*ActorRecord)(nil),      // 3: ActorRecord
	(*BattleRecord)(nil),     // 4: BattleRecord
	(*BattleRecordMode)(nil), // 5: BattleRecordMode
	(*BattleWinRatio)(nil),   // 6: BattleWinRatio
	(*RecordInfo)(nil),       // 7: RecordInfo
	nil,                      // 8: BattleRecordMode.BmEntry
	nil,                      // 9: RecordInfo.WinOneEntry
	nil,                      // 10: RecordInfo.WinThreeEntry
	nil,                      // 11: RecordInfo.MaxTourEntry
	nil,                      // 12: RecordInfo.ARecordEntry
	nil,                      // 13: RecordInfo.BRecordEntry
	nil,                      // 14: RecordInfo.FRecordEntry
}
var file_record_proto_depIdxs = []int32{
	0,  // 0: FightRecord.f:type_name -> FightRecordItem
	0,  // 1: FightRecordMode.fr:type_name -> FightRecordItem
	8,  // 2: BattleRecordMode.bm:type_name -> BattleRecordMode.BmEntry
	9,  // 3: RecordInfo.winOne:type_name -> RecordInfo.WinOneEntry
	10, // 4: RecordInfo.winThree:type_name -> RecordInfo.WinThreeEntry
	11, // 5: RecordInfo.maxTour:type_name -> RecordInfo.MaxTourEntry
	12, // 6: RecordInfo.aRecord:type_name -> RecordInfo.ARecordEntry
	13, // 7: RecordInfo.bRecord:type_name -> RecordInfo.BRecordEntry
	14, // 8: RecordInfo.fRecord:type_name -> RecordInfo.FRecordEntry
	4,  // 9: BattleRecordMode.BmEntry.value:type_name -> BattleRecord
	3,  // 10: RecordInfo.ARecordEntry.value:type_name -> ActorRecord
	5,  // 11: RecordInfo.BRecordEntry.value:type_name -> BattleRecordMode
	2,  // 12: RecordInfo.FRecordEntry.value:type_name -> FightRecordMode
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_record_proto_init() }
func file_record_proto_init() {
	if File_record_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_record_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FightRecordItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FightRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FightRecordMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActorRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleRecordMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleWinRatio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_record_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_record_proto_goTypes,
		DependencyIndexes: file_record_proto_depIdxs,
		MessageInfos:      file_record_proto_msgTypes,
	}.Build()
	File_record_proto = out.File
	file_record_proto_rawDesc = nil
	file_record_proto_goTypes = nil
	file_record_proto_depIdxs = nil
}
