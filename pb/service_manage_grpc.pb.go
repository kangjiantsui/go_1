// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManageClient is the client API for Manage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManageClient interface {
	// 添加道具
	ItemAdd(ctx context.Context, in *GM_UpdateItem, opts ...grpc.CallOption) (*ItemUpdateResult, error)
	// 清号
	ClearPlayer(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error)
	// 设置公告
	SetNotice(ctx context.Context, in *NoticeInfo, opts ...grpc.CallOption) (*Empty, error)
	// 删除公告
	DelNotice(ctx context.Context, in *NoticeInfo, opts ...grpc.CallOption) (*Empty, error)
	// 添加公告
	AddNotice(ctx context.Context, in *NoticeInfo, opts ...grpc.CallOption) (*Empty, error)
	// 发送邮件
	SendMail(ctx context.Context, in *SendMailReq, opts ...grpc.CallOption) (*Empty, error)
	// 解锁所有系统
	UnlockSystem(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error)
	// 根据invite code 获取token
	GenToken(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*GenTokenResp, error)
	// 生成一批激活码
	GenActivateCode(ctx context.Context, in *GenerateActiveCode, opts ...grpc.CallOption) (*Empty, error)
	// 获取一个激活码
	GetActivateCodeToMjp(ctx context.Context, in *GetActiveCodeMJP, opts ...grpc.CallOption) (*GetActiveCodeMJPRet, error)
	// 设置玩家锁定状态 踢下线+禁止登录
	SetUserLock(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error)
	// 刷新玩家缓存并释放锁
	RefreshAndUnlock(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error)
	// 获取一个微信公众号兑换码
	GetWechatCDKey(ctx context.Context, in *GetWechatCDKeyMjp, opts ...grpc.CallOption) (*WechatCDKeyMjpRet, error)
	// 生成公用兑换码且设置生效时间
	SetPublicCDKey(ctx context.Context, in *SetPublicCDKeyTime, opts ...grpc.CallOption) (*PublicCDKeyRet, error)
	// 获取已生成的公共兑换码
	GetPublicCDKey(ctx context.Context, in *GetAllPublicKeyNewReq, opts ...grpc.CallOption) (*AllPublicKeyNewRet, error)
	// 设置兑换码奖励
	SetCDKeyReward(ctx context.Context, in *CDKeyReward, opts ...grpc.CallOption) (*Empty, error)
	// 生成单人兑换码
	GenPersonalCDKey(ctx context.Context, in *PersonalCDKey, opts ...grpc.CallOption) (*Empty, error)
	// 获取所有个人兑换码组信息
	GetAllPersonalCDKeyGroup(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PersonalGroupInfo, error)
	// 获取一个玩家兑换码组内所有可使用的兑换码
	GetAvailableCodeFromGroup(ctx context.Context, in *AvailableCodesReq, opts ...grpc.CallOption) (*AvailableCodesResp, error)
	// 设置定制兑换码
	SetCustomization(ctx context.Context, in *CustomizationCodeSet, opts ...grpc.CallOption) (*Empty, error)
	// 获取定制兑换码
	GetCustomization(ctx context.Context, in *StringStruct, opts ...grpc.CallOption) (*CustomizationCodeSet, error)
	// 获取定制兑换码
	SetImportCDKeyMail(ctx context.Context, in *ImportCDKeySet, opts ...grpc.CallOption) (*Empty, error)
	// 设置球员产出
	SetActorOutPutStatus(ctx context.Context, in *SetActorOutPutStatusReq, opts ...grpc.CallOption) (*Empty, error)
	// 版本检测
	VersionCheck(ctx context.Context, in *VersionCheckReq, opts ...grpc.CallOption) (*VersionCheckResp, error)
	// 设置版本检查的基础信息
	SetVersionCheckPublic(ctx context.Context, in *VersionCheckPublic, opts ...grpc.CallOption) (*Empty, error)
	// 设置白名单
	SetWhiteList(ctx context.Context, in *ChangeWhiteList, opts ...grpc.CallOption) (*Empty, error)
	// 获取所有信息与白名单
	GetAllVerAndWl(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllVersionAddrAndWL, error)
	// 发送群聊天公告
	SendGroupSysNotice(ctx context.Context, in *GroupSysNoticeReq, opts ...grpc.CallOption) (*Empty, error)
	ResetEngageDailyRec(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error)
	SetEngageDailyRec(ctx context.Context, in *Int32Req, opts ...grpc.CallOption) (*Empty, error)
	// 设置运营活动模块顺序
	SetOperationalActivityModSequence(ctx context.Context, in *ModSequence, opts ...grpc.CallOption) (*Empty, error)
	// 删除运营活动模块顺序
	DelOperationalActivityModSequence(ctx context.Context, in *DelModSequenceReq, opts ...grpc.CallOption) (*Empty, error)
	// 设置运营活动新球员预告
	SetOperationalActivityNewActorPreview(ctx context.Context, in *NewActorPreview, opts ...grpc.CallOption) (*Empty, error)
	// 设置运营活动加群有礼
	SetOperationalActivityJoinGroup(ctx context.Context, in *JoinGroup, opts ...grpc.CallOption) (*Empty, error)
	// 删除运营活动加群有礼
	DelOperationalActivityJoinGroup(ctx context.Context, in *DelJoinGroupReq, opts ...grpc.CallOption) (*Empty, error)
	// 获取全部运营活动信息
	GetAllOperationalActivityInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OperationalActivityInfo, error)
	// 重置路人王公共信息
	ClearKRPublic(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// 检查订单支付情况
	CheckOhayooOrderPayed(ctx context.Context, in *OrderPayed, opts ...grpc.CallOption) (*OrderPayedRet, error)
	// 对比玩家是否是老用户
	CompareWidAndQid(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error)
	// 设置系统时间
	SetTimeOffset(ctx context.Context, in *SetTimeOffsetData, opts ...grpc.CallOption) (*SetTimeOffsetRes, error)
	// 设置所有系统时间
	SetAllSystemTimeOffset(ctx context.Context, in *SetTimeOffsetData, opts ...grpc.CallOption) (*SetTimeOffsetRes, error)
	// 重置天梯
	ResetLadder(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// 重置赛季
	ResetTour(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// 重置赛券数据
	BattlepassReset(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*BattlePassInfoMap, error)
	// 重置球星之路赛季
	GloryroadSeasonReset(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// 重置球星之路玩家数据
	GloryroadPlayerReset(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error)
	// 重置玩家任务
	MissionReset(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error)
	// AI自成长测试
	AIGrowTest(ctx context.Context, in *IntPair, opts ...grpc.CallOption) (*Empty, error)
	// 创建AI
	AIGrowStart(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// 移除AI
	AIGrowRemove(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// 运行自成长
	AIGrowRun(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// 加载AI匹配
	AIInsertMatch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// 开启匹配协程
	StartMatch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// 重置商店数据
	ShopReset(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error)
	// 获取全部技能
	GetAllSkill(ctx context.Context, in *GetAllSkillReq, opts ...grpc.CallOption) (*Empty, error)
	// 获取全部球员以及皮肤
	GetAllSkin(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error)
	// 修复赛季数据
	FixTour(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// 需要一个 rpc 方法来测试玩家数据的并发修改情况
	TestUserConcurrency(ctx context.Context, in *TestUserConcurrencyReq, opts ...grpc.CallOption) (*TestUserConcurrencyRsp, error)
	// 设置商店显示信息
	ShopShowSet(ctx context.Context, in *ShopShowInfos, opts ...grpc.CallOption) (*Empty, error)
	// 获取商店显示信息
	ShopShowGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ShopShowInfos, error)
	// 删除商店显示信息
	ShopShowDel(ctx context.Context, in *ShopShowDelReq, opts ...grpc.CallOption) (*Empty, error)
	// 完成所有任务
	FinishAllMission(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error)
	// 模拟系统调用
	SimSysCall(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// 设置玩家定位信息
	SetPlayerAreaCode(ctx context.Context, in *SetPlayerAreaCodeReq, opts ...grpc.CallOption) (*Empty, error)
	// 将玩家身上的邮件移出
	MoveUserMailsOut(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// 直接完成首充状态
	FinishFirstRecharge(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error)
	// 记录玩家qq登录与微信登录的id
	GetQidWidFromPlayer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// 千金一刻后台配置添加
	CoinTimeCfgSet(ctx context.Context, in *BackgroundCfg, opts ...grpc.CallOption) (*Empty, error)
	// 千金一刻后台配置删除
	CoinTimeCfgDel(ctx context.Context, in *DelBackgroundCfgReq, opts ...grpc.CallOption) (*Empty, error)
	// 千金一刻后台配置获取
	CoinTimeCfgGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllBackgroundCfg, error)
	// 添加道具获取记录
	AddItemRecord(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error)
	// 养号
	FeedAccount(ctx context.Context, in *FeedAccountReq, opts ...grpc.CallOption) (*Empty, error)
	// 修复任务
	SetMissionPref(ctx context.Context, in *SetMissionPrefReq, opts ...grpc.CallOption) (*Empty, error)
}

type manageClient struct {
	cc grpc.ClientConnInterface
}

func NewManageClient(cc grpc.ClientConnInterface) ManageClient {
	return &manageClient{cc}
}

func (c *manageClient) ItemAdd(ctx context.Context, in *GM_UpdateItem, opts ...grpc.CallOption) (*ItemUpdateResult, error) {
	out := new(ItemUpdateResult)
	err := c.cc.Invoke(ctx, "/Manage/ItemAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ClearPlayer(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/ClearPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SetNotice(ctx context.Context, in *NoticeInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/SetNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelNotice(ctx context.Context, in *NoticeInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/DelNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddNotice(ctx context.Context, in *NoticeInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/AddNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SendMail(ctx context.Context, in *SendMailReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/SendMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) UnlockSystem(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/UnlockSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GenToken(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*GenTokenResp, error) {
	out := new(GenTokenResp)
	err := c.cc.Invoke(ctx, "/Manage/GenToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GenActivateCode(ctx context.Context, in *GenerateActiveCode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/GenActivateCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetActivateCodeToMjp(ctx context.Context, in *GetActiveCodeMJP, opts ...grpc.CallOption) (*GetActiveCodeMJPRet, error) {
	out := new(GetActiveCodeMJPRet)
	err := c.cc.Invoke(ctx, "/Manage/GetActivateCodeToMjp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SetUserLock(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/SetUserLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) RefreshAndUnlock(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/RefreshAndUnlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetWechatCDKey(ctx context.Context, in *GetWechatCDKeyMjp, opts ...grpc.CallOption) (*WechatCDKeyMjpRet, error) {
	out := new(WechatCDKeyMjpRet)
	err := c.cc.Invoke(ctx, "/Manage/GetWechatCDKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SetPublicCDKey(ctx context.Context, in *SetPublicCDKeyTime, opts ...grpc.CallOption) (*PublicCDKeyRet, error) {
	out := new(PublicCDKeyRet)
	err := c.cc.Invoke(ctx, "/Manage/SetPublicCDKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetPublicCDKey(ctx context.Context, in *GetAllPublicKeyNewReq, opts ...grpc.CallOption) (*AllPublicKeyNewRet, error) {
	out := new(AllPublicKeyNewRet)
	err := c.cc.Invoke(ctx, "/Manage/GetPublicCDKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SetCDKeyReward(ctx context.Context, in *CDKeyReward, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/SetCDKeyReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GenPersonalCDKey(ctx context.Context, in *PersonalCDKey, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/GenPersonalCDKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetAllPersonalCDKeyGroup(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PersonalGroupInfo, error) {
	out := new(PersonalGroupInfo)
	err := c.cc.Invoke(ctx, "/Manage/GetAllPersonalCDKeyGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetAvailableCodeFromGroup(ctx context.Context, in *AvailableCodesReq, opts ...grpc.CallOption) (*AvailableCodesResp, error) {
	out := new(AvailableCodesResp)
	err := c.cc.Invoke(ctx, "/Manage/GetAvailableCodeFromGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SetCustomization(ctx context.Context, in *CustomizationCodeSet, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/SetCustomization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetCustomization(ctx context.Context, in *StringStruct, opts ...grpc.CallOption) (*CustomizationCodeSet, error) {
	out := new(CustomizationCodeSet)
	err := c.cc.Invoke(ctx, "/Manage/GetCustomization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SetImportCDKeyMail(ctx context.Context, in *ImportCDKeySet, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/SetImportCDKeyMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SetActorOutPutStatus(ctx context.Context, in *SetActorOutPutStatusReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/SetActorOutPutStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) VersionCheck(ctx context.Context, in *VersionCheckReq, opts ...grpc.CallOption) (*VersionCheckResp, error) {
	out := new(VersionCheckResp)
	err := c.cc.Invoke(ctx, "/Manage/VersionCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SetVersionCheckPublic(ctx context.Context, in *VersionCheckPublic, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/SetVersionCheckPublic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SetWhiteList(ctx context.Context, in *ChangeWhiteList, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/SetWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetAllVerAndWl(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllVersionAddrAndWL, error) {
	out := new(AllVersionAddrAndWL)
	err := c.cc.Invoke(ctx, "/Manage/GetAllVerAndWl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SendGroupSysNotice(ctx context.Context, in *GroupSysNoticeReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/SendGroupSysNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ResetEngageDailyRec(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/ResetEngageDailyRec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SetEngageDailyRec(ctx context.Context, in *Int32Req, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/SetEngageDailyRec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SetOperationalActivityModSequence(ctx context.Context, in *ModSequence, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/SetOperationalActivityModSequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelOperationalActivityModSequence(ctx context.Context, in *DelModSequenceReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/DelOperationalActivityModSequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SetOperationalActivityNewActorPreview(ctx context.Context, in *NewActorPreview, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/SetOperationalActivityNewActorPreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SetOperationalActivityJoinGroup(ctx context.Context, in *JoinGroup, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/SetOperationalActivityJoinGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelOperationalActivityJoinGroup(ctx context.Context, in *DelJoinGroupReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/DelOperationalActivityJoinGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetAllOperationalActivityInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OperationalActivityInfo, error) {
	out := new(OperationalActivityInfo)
	err := c.cc.Invoke(ctx, "/Manage/GetAllOperationalActivityInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ClearKRPublic(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/ClearKRPublic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) CheckOhayooOrderPayed(ctx context.Context, in *OrderPayed, opts ...grpc.CallOption) (*OrderPayedRet, error) {
	out := new(OrderPayedRet)
	err := c.cc.Invoke(ctx, "/Manage/CheckOhayooOrderPayed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) CompareWidAndQid(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/CompareWidAndQid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SetTimeOffset(ctx context.Context, in *SetTimeOffsetData, opts ...grpc.CallOption) (*SetTimeOffsetRes, error) {
	out := new(SetTimeOffsetRes)
	err := c.cc.Invoke(ctx, "/Manage/SetTimeOffset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SetAllSystemTimeOffset(ctx context.Context, in *SetTimeOffsetData, opts ...grpc.CallOption) (*SetTimeOffsetRes, error) {
	out := new(SetTimeOffsetRes)
	err := c.cc.Invoke(ctx, "/Manage/SetAllSystemTimeOffset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ResetLadder(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/ResetLadder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ResetTour(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/ResetTour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) BattlepassReset(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*BattlePassInfoMap, error) {
	out := new(BattlePassInfoMap)
	err := c.cc.Invoke(ctx, "/Manage/BattlepassReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GloryroadSeasonReset(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/GloryroadSeasonReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GloryroadPlayerReset(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/GloryroadPlayerReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) MissionReset(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/MissionReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AIGrowTest(ctx context.Context, in *IntPair, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/AIGrowTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AIGrowStart(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/AIGrowStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AIGrowRemove(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/AIGrowRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AIGrowRun(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/AIGrowRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AIInsertMatch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/AIInsertMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) StartMatch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/StartMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ShopReset(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/ShopReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetAllSkill(ctx context.Context, in *GetAllSkillReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/GetAllSkill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetAllSkin(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/GetAllSkin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) FixTour(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/FixTour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) TestUserConcurrency(ctx context.Context, in *TestUserConcurrencyReq, opts ...grpc.CallOption) (*TestUserConcurrencyRsp, error) {
	out := new(TestUserConcurrencyRsp)
	err := c.cc.Invoke(ctx, "/Manage/TestUserConcurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ShopShowSet(ctx context.Context, in *ShopShowInfos, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/ShopShowSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ShopShowGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ShopShowInfos, error) {
	out := new(ShopShowInfos)
	err := c.cc.Invoke(ctx, "/Manage/ShopShowGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ShopShowDel(ctx context.Context, in *ShopShowDelReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/ShopShowDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) FinishAllMission(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/FinishAllMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SimSysCall(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/SimSysCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SetPlayerAreaCode(ctx context.Context, in *SetPlayerAreaCodeReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/SetPlayerAreaCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) MoveUserMailsOut(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/MoveUserMailsOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) FinishFirstRecharge(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/FinishFirstRecharge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetQidWidFromPlayer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/GetQidWidFromPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) CoinTimeCfgSet(ctx context.Context, in *BackgroundCfg, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/CoinTimeCfgSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) CoinTimeCfgDel(ctx context.Context, in *DelBackgroundCfgReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/CoinTimeCfgDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) CoinTimeCfgGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllBackgroundCfg, error) {
	out := new(AllBackgroundCfg)
	err := c.cc.Invoke(ctx, "/Manage/CoinTimeCfgGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddItemRecord(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/AddItemRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) FeedAccount(ctx context.Context, in *FeedAccountReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/FeedAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SetMissionPref(ctx context.Context, in *SetMissionPrefReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Manage/SetMissionPref", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManageServer is the server API for Manage service.
// All implementations must embed UnimplementedManageServer
// for forward compatibility
type ManageServer interface {
	// 添加道具
	ItemAdd(context.Context, *GM_UpdateItem) (*ItemUpdateResult, error)
	// 清号
	ClearPlayer(context.Context, *PlayerInviteCode) (*Empty, error)
	// 设置公告
	SetNotice(context.Context, *NoticeInfo) (*Empty, error)
	// 删除公告
	DelNotice(context.Context, *NoticeInfo) (*Empty, error)
	// 添加公告
	AddNotice(context.Context, *NoticeInfo) (*Empty, error)
	// 发送邮件
	SendMail(context.Context, *SendMailReq) (*Empty, error)
	// 解锁所有系统
	UnlockSystem(context.Context, *PlayerInviteCode) (*Empty, error)
	// 根据invite code 获取token
	GenToken(context.Context, *PlayerInviteCode) (*GenTokenResp, error)
	// 生成一批激活码
	GenActivateCode(context.Context, *GenerateActiveCode) (*Empty, error)
	// 获取一个激活码
	GetActivateCodeToMjp(context.Context, *GetActiveCodeMJP) (*GetActiveCodeMJPRet, error)
	// 设置玩家锁定状态 踢下线+禁止登录
	SetUserLock(context.Context, *PlayerInviteCode) (*Empty, error)
	// 刷新玩家缓存并释放锁
	RefreshAndUnlock(context.Context, *PlayerInviteCode) (*Empty, error)
	// 获取一个微信公众号兑换码
	GetWechatCDKey(context.Context, *GetWechatCDKeyMjp) (*WechatCDKeyMjpRet, error)
	// 生成公用兑换码且设置生效时间
	SetPublicCDKey(context.Context, *SetPublicCDKeyTime) (*PublicCDKeyRet, error)
	// 获取已生成的公共兑换码
	GetPublicCDKey(context.Context, *GetAllPublicKeyNewReq) (*AllPublicKeyNewRet, error)
	// 设置兑换码奖励
	SetCDKeyReward(context.Context, *CDKeyReward) (*Empty, error)
	// 生成单人兑换码
	GenPersonalCDKey(context.Context, *PersonalCDKey) (*Empty, error)
	// 获取所有个人兑换码组信息
	GetAllPersonalCDKeyGroup(context.Context, *Empty) (*PersonalGroupInfo, error)
	// 获取一个玩家兑换码组内所有可使用的兑换码
	GetAvailableCodeFromGroup(context.Context, *AvailableCodesReq) (*AvailableCodesResp, error)
	// 设置定制兑换码
	SetCustomization(context.Context, *CustomizationCodeSet) (*Empty, error)
	// 获取定制兑换码
	GetCustomization(context.Context, *StringStruct) (*CustomizationCodeSet, error)
	// 获取定制兑换码
	SetImportCDKeyMail(context.Context, *ImportCDKeySet) (*Empty, error)
	// 设置球员产出
	SetActorOutPutStatus(context.Context, *SetActorOutPutStatusReq) (*Empty, error)
	// 版本检测
	VersionCheck(context.Context, *VersionCheckReq) (*VersionCheckResp, error)
	// 设置版本检查的基础信息
	SetVersionCheckPublic(context.Context, *VersionCheckPublic) (*Empty, error)
	// 设置白名单
	SetWhiteList(context.Context, *ChangeWhiteList) (*Empty, error)
	// 获取所有信息与白名单
	GetAllVerAndWl(context.Context, *Empty) (*AllVersionAddrAndWL, error)
	// 发送群聊天公告
	SendGroupSysNotice(context.Context, *GroupSysNoticeReq) (*Empty, error)
	ResetEngageDailyRec(context.Context, *PlayerInviteCode) (*Empty, error)
	SetEngageDailyRec(context.Context, *Int32Req) (*Empty, error)
	// 设置运营活动模块顺序
	SetOperationalActivityModSequence(context.Context, *ModSequence) (*Empty, error)
	// 删除运营活动模块顺序
	DelOperationalActivityModSequence(context.Context, *DelModSequenceReq) (*Empty, error)
	// 设置运营活动新球员预告
	SetOperationalActivityNewActorPreview(context.Context, *NewActorPreview) (*Empty, error)
	// 设置运营活动加群有礼
	SetOperationalActivityJoinGroup(context.Context, *JoinGroup) (*Empty, error)
	// 删除运营活动加群有礼
	DelOperationalActivityJoinGroup(context.Context, *DelJoinGroupReq) (*Empty, error)
	// 获取全部运营活动信息
	GetAllOperationalActivityInfo(context.Context, *Empty) (*OperationalActivityInfo, error)
	// 重置路人王公共信息
	ClearKRPublic(context.Context, *Empty) (*Empty, error)
	// 检查订单支付情况
	CheckOhayooOrderPayed(context.Context, *OrderPayed) (*OrderPayedRet, error)
	// 对比玩家是否是老用户
	CompareWidAndQid(context.Context, *PlayerInviteCode) (*Empty, error)
	// 设置系统时间
	SetTimeOffset(context.Context, *SetTimeOffsetData) (*SetTimeOffsetRes, error)
	// 设置所有系统时间
	SetAllSystemTimeOffset(context.Context, *SetTimeOffsetData) (*SetTimeOffsetRes, error)
	// 重置天梯
	ResetLadder(context.Context, *Empty) (*Empty, error)
	// 重置赛季
	ResetTour(context.Context, *Empty) (*Empty, error)
	// 重置赛券数据
	BattlepassReset(context.Context, *PlayerInviteCode) (*BattlePassInfoMap, error)
	// 重置球星之路赛季
	GloryroadSeasonReset(context.Context, *Empty) (*Empty, error)
	// 重置球星之路玩家数据
	GloryroadPlayerReset(context.Context, *PlayerInviteCode) (*Empty, error)
	// 重置玩家任务
	MissionReset(context.Context, *PlayerInviteCode) (*Empty, error)
	// AI自成长测试
	AIGrowTest(context.Context, *IntPair) (*Empty, error)
	// 创建AI
	AIGrowStart(context.Context, *Empty) (*Empty, error)
	// 移除AI
	AIGrowRemove(context.Context, *Empty) (*Empty, error)
	// 运行自成长
	AIGrowRun(context.Context, *Empty) (*Empty, error)
	// 加载AI匹配
	AIInsertMatch(context.Context, *Empty) (*Empty, error)
	// 开启匹配协程
	StartMatch(context.Context, *Empty) (*Empty, error)
	// 重置商店数据
	ShopReset(context.Context, *PlayerInviteCode) (*Empty, error)
	// 获取全部技能
	GetAllSkill(context.Context, *GetAllSkillReq) (*Empty, error)
	// 获取全部球员以及皮肤
	GetAllSkin(context.Context, *PlayerInviteCode) (*Empty, error)
	// 修复赛季数据
	FixTour(context.Context, *Empty) (*Empty, error)
	// 需要一个 rpc 方法来测试玩家数据的并发修改情况
	TestUserConcurrency(context.Context, *TestUserConcurrencyReq) (*TestUserConcurrencyRsp, error)
	// 设置商店显示信息
	ShopShowSet(context.Context, *ShopShowInfos) (*Empty, error)
	// 获取商店显示信息
	ShopShowGet(context.Context, *Empty) (*ShopShowInfos, error)
	// 删除商店显示信息
	ShopShowDel(context.Context, *ShopShowDelReq) (*Empty, error)
	// 完成所有任务
	FinishAllMission(context.Context, *PlayerInviteCode) (*Empty, error)
	// 模拟系统调用
	SimSysCall(context.Context, *Empty) (*Empty, error)
	// 设置玩家定位信息
	SetPlayerAreaCode(context.Context, *SetPlayerAreaCodeReq) (*Empty, error)
	// 将玩家身上的邮件移出
	MoveUserMailsOut(context.Context, *Empty) (*Empty, error)
	// 直接完成首充状态
	FinishFirstRecharge(context.Context, *PlayerInviteCode) (*Empty, error)
	// 记录玩家qq登录与微信登录的id
	GetQidWidFromPlayer(context.Context, *Empty) (*Empty, error)
	// 千金一刻后台配置添加
	CoinTimeCfgSet(context.Context, *BackgroundCfg) (*Empty, error)
	// 千金一刻后台配置删除
	CoinTimeCfgDel(context.Context, *DelBackgroundCfgReq) (*Empty, error)
	// 千金一刻后台配置获取
	CoinTimeCfgGet(context.Context, *Empty) (*AllBackgroundCfg, error)
	// 添加道具获取记录
	AddItemRecord(context.Context, *PlayerInviteCode) (*Empty, error)
	// 养号
	FeedAccount(context.Context, *FeedAccountReq) (*Empty, error)
	// 修复任务
	SetMissionPref(context.Context, *SetMissionPrefReq) (*Empty, error)
	mustEmbedUnimplementedManageServer()
}

// UnimplementedManageServer must be embedded to have forward compatible implementations.
type UnimplementedManageServer struct {
}

func (UnimplementedManageServer) ItemAdd(context.Context, *GM_UpdateItem) (*ItemUpdateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ItemAdd not implemented")
}
func (UnimplementedManageServer) ClearPlayer(context.Context, *PlayerInviteCode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearPlayer not implemented")
}
func (UnimplementedManageServer) SetNotice(context.Context, *NoticeInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNotice not implemented")
}
func (UnimplementedManageServer) DelNotice(context.Context, *NoticeInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelNotice not implemented")
}
func (UnimplementedManageServer) AddNotice(context.Context, *NoticeInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNotice not implemented")
}
func (UnimplementedManageServer) SendMail(context.Context, *SendMailReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMail not implemented")
}
func (UnimplementedManageServer) UnlockSystem(context.Context, *PlayerInviteCode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockSystem not implemented")
}
func (UnimplementedManageServer) GenToken(context.Context, *PlayerInviteCode) (*GenTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenToken not implemented")
}
func (UnimplementedManageServer) GenActivateCode(context.Context, *GenerateActiveCode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenActivateCode not implemented")
}
func (UnimplementedManageServer) GetActivateCodeToMjp(context.Context, *GetActiveCodeMJP) (*GetActiveCodeMJPRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivateCodeToMjp not implemented")
}
func (UnimplementedManageServer) SetUserLock(context.Context, *PlayerInviteCode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserLock not implemented")
}
func (UnimplementedManageServer) RefreshAndUnlock(context.Context, *PlayerInviteCode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshAndUnlock not implemented")
}
func (UnimplementedManageServer) GetWechatCDKey(context.Context, *GetWechatCDKeyMjp) (*WechatCDKeyMjpRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWechatCDKey not implemented")
}
func (UnimplementedManageServer) SetPublicCDKey(context.Context, *SetPublicCDKeyTime) (*PublicCDKeyRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPublicCDKey not implemented")
}
func (UnimplementedManageServer) GetPublicCDKey(context.Context, *GetAllPublicKeyNewReq) (*AllPublicKeyNewRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicCDKey not implemented")
}
func (UnimplementedManageServer) SetCDKeyReward(context.Context, *CDKeyReward) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCDKeyReward not implemented")
}
func (UnimplementedManageServer) GenPersonalCDKey(context.Context, *PersonalCDKey) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenPersonalCDKey not implemented")
}
func (UnimplementedManageServer) GetAllPersonalCDKeyGroup(context.Context, *Empty) (*PersonalGroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPersonalCDKeyGroup not implemented")
}
func (UnimplementedManageServer) GetAvailableCodeFromGroup(context.Context, *AvailableCodesReq) (*AvailableCodesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableCodeFromGroup not implemented")
}
func (UnimplementedManageServer) SetCustomization(context.Context, *CustomizationCodeSet) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCustomization not implemented")
}
func (UnimplementedManageServer) GetCustomization(context.Context, *StringStruct) (*CustomizationCodeSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomization not implemented")
}
func (UnimplementedManageServer) SetImportCDKeyMail(context.Context, *ImportCDKeySet) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetImportCDKeyMail not implemented")
}
func (UnimplementedManageServer) SetActorOutPutStatus(context.Context, *SetActorOutPutStatusReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActorOutPutStatus not implemented")
}
func (UnimplementedManageServer) VersionCheck(context.Context, *VersionCheckReq) (*VersionCheckResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VersionCheck not implemented")
}
func (UnimplementedManageServer) SetVersionCheckPublic(context.Context, *VersionCheckPublic) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVersionCheckPublic not implemented")
}
func (UnimplementedManageServer) SetWhiteList(context.Context, *ChangeWhiteList) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWhiteList not implemented")
}
func (UnimplementedManageServer) GetAllVerAndWl(context.Context, *Empty) (*AllVersionAddrAndWL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllVerAndWl not implemented")
}
func (UnimplementedManageServer) SendGroupSysNotice(context.Context, *GroupSysNoticeReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGroupSysNotice not implemented")
}
func (UnimplementedManageServer) ResetEngageDailyRec(context.Context, *PlayerInviteCode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetEngageDailyRec not implemented")
}
func (UnimplementedManageServer) SetEngageDailyRec(context.Context, *Int32Req) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEngageDailyRec not implemented")
}
func (UnimplementedManageServer) SetOperationalActivityModSequence(context.Context, *ModSequence) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOperationalActivityModSequence not implemented")
}
func (UnimplementedManageServer) DelOperationalActivityModSequence(context.Context, *DelModSequenceReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOperationalActivityModSequence not implemented")
}
func (UnimplementedManageServer) SetOperationalActivityNewActorPreview(context.Context, *NewActorPreview) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOperationalActivityNewActorPreview not implemented")
}
func (UnimplementedManageServer) SetOperationalActivityJoinGroup(context.Context, *JoinGroup) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOperationalActivityJoinGroup not implemented")
}
func (UnimplementedManageServer) DelOperationalActivityJoinGroup(context.Context, *DelJoinGroupReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOperationalActivityJoinGroup not implemented")
}
func (UnimplementedManageServer) GetAllOperationalActivityInfo(context.Context, *Empty) (*OperationalActivityInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOperationalActivityInfo not implemented")
}
func (UnimplementedManageServer) ClearKRPublic(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearKRPublic not implemented")
}
func (UnimplementedManageServer) CheckOhayooOrderPayed(context.Context, *OrderPayed) (*OrderPayedRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOhayooOrderPayed not implemented")
}
func (UnimplementedManageServer) CompareWidAndQid(context.Context, *PlayerInviteCode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareWidAndQid not implemented")
}
func (UnimplementedManageServer) SetTimeOffset(context.Context, *SetTimeOffsetData) (*SetTimeOffsetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTimeOffset not implemented")
}
func (UnimplementedManageServer) SetAllSystemTimeOffset(context.Context, *SetTimeOffsetData) (*SetTimeOffsetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAllSystemTimeOffset not implemented")
}
func (UnimplementedManageServer) ResetLadder(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetLadder not implemented")
}
func (UnimplementedManageServer) ResetTour(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetTour not implemented")
}
func (UnimplementedManageServer) BattlepassReset(context.Context, *PlayerInviteCode) (*BattlePassInfoMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BattlepassReset not implemented")
}
func (UnimplementedManageServer) GloryroadSeasonReset(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GloryroadSeasonReset not implemented")
}
func (UnimplementedManageServer) GloryroadPlayerReset(context.Context, *PlayerInviteCode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GloryroadPlayerReset not implemented")
}
func (UnimplementedManageServer) MissionReset(context.Context, *PlayerInviteCode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MissionReset not implemented")
}
func (UnimplementedManageServer) AIGrowTest(context.Context, *IntPair) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AIGrowTest not implemented")
}
func (UnimplementedManageServer) AIGrowStart(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AIGrowStart not implemented")
}
func (UnimplementedManageServer) AIGrowRemove(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AIGrowRemove not implemented")
}
func (UnimplementedManageServer) AIGrowRun(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AIGrowRun not implemented")
}
func (UnimplementedManageServer) AIInsertMatch(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AIInsertMatch not implemented")
}
func (UnimplementedManageServer) StartMatch(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMatch not implemented")
}
func (UnimplementedManageServer) ShopReset(context.Context, *PlayerInviteCode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShopReset not implemented")
}
func (UnimplementedManageServer) GetAllSkill(context.Context, *GetAllSkillReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSkill not implemented")
}
func (UnimplementedManageServer) GetAllSkin(context.Context, *PlayerInviteCode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSkin not implemented")
}
func (UnimplementedManageServer) FixTour(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FixTour not implemented")
}
func (UnimplementedManageServer) TestUserConcurrency(context.Context, *TestUserConcurrencyReq) (*TestUserConcurrencyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestUserConcurrency not implemented")
}
func (UnimplementedManageServer) ShopShowSet(context.Context, *ShopShowInfos) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShopShowSet not implemented")
}
func (UnimplementedManageServer) ShopShowGet(context.Context, *Empty) (*ShopShowInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShopShowGet not implemented")
}
func (UnimplementedManageServer) ShopShowDel(context.Context, *ShopShowDelReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShopShowDel not implemented")
}
func (UnimplementedManageServer) FinishAllMission(context.Context, *PlayerInviteCode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishAllMission not implemented")
}
func (UnimplementedManageServer) SimSysCall(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimSysCall not implemented")
}
func (UnimplementedManageServer) SetPlayerAreaCode(context.Context, *SetPlayerAreaCodeReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPlayerAreaCode not implemented")
}
func (UnimplementedManageServer) MoveUserMailsOut(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveUserMailsOut not implemented")
}
func (UnimplementedManageServer) FinishFirstRecharge(context.Context, *PlayerInviteCode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishFirstRecharge not implemented")
}
func (UnimplementedManageServer) GetQidWidFromPlayer(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQidWidFromPlayer not implemented")
}
func (UnimplementedManageServer) CoinTimeCfgSet(context.Context, *BackgroundCfg) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoinTimeCfgSet not implemented")
}
func (UnimplementedManageServer) CoinTimeCfgDel(context.Context, *DelBackgroundCfgReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoinTimeCfgDel not implemented")
}
func (UnimplementedManageServer) CoinTimeCfgGet(context.Context, *Empty) (*AllBackgroundCfg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoinTimeCfgGet not implemented")
}
func (UnimplementedManageServer) AddItemRecord(context.Context, *PlayerInviteCode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItemRecord not implemented")
}
func (UnimplementedManageServer) FeedAccount(context.Context, *FeedAccountReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedAccount not implemented")
}
func (UnimplementedManageServer) SetMissionPref(context.Context, *SetMissionPrefReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMissionPref not implemented")
}
func (UnimplementedManageServer) mustEmbedUnimplementedManageServer() {}

// UnsafeManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManageServer will
// result in compilation errors.
type UnsafeManageServer interface {
	mustEmbedUnimplementedManageServer()
}

func RegisterManageServer(s grpc.ServiceRegistrar, srv ManageServer) {
	s.RegisterService(&Manage_ServiceDesc, srv)
}

func _Manage_ItemAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GM_UpdateItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ItemAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/ItemAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ItemAdd(ctx, req.(*GM_UpdateItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ClearPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInviteCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ClearPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/ClearPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ClearPlayer(ctx, req.(*PlayerInviteCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SetNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoticeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SetNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/SetNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SetNotice(ctx, req.(*NoticeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoticeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/DelNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelNotice(ctx, req.(*NoticeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoticeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/AddNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddNotice(ctx, req.(*NoticeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SendMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SendMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/SendMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SendMail(ctx, req.(*SendMailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_UnlockSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInviteCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).UnlockSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/UnlockSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).UnlockSystem(ctx, req.(*PlayerInviteCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GenToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInviteCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GenToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/GenToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GenToken(ctx, req.(*PlayerInviteCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GenActivateCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateActiveCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GenActivateCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/GenActivateCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GenActivateCode(ctx, req.(*GenerateActiveCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetActivateCodeToMjp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveCodeMJP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetActivateCodeToMjp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/GetActivateCodeToMjp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetActivateCodeToMjp(ctx, req.(*GetActiveCodeMJP))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SetUserLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInviteCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SetUserLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/SetUserLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SetUserLock(ctx, req.(*PlayerInviteCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_RefreshAndUnlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInviteCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).RefreshAndUnlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/RefreshAndUnlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).RefreshAndUnlock(ctx, req.(*PlayerInviteCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetWechatCDKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWechatCDKeyMjp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetWechatCDKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/GetWechatCDKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetWechatCDKey(ctx, req.(*GetWechatCDKeyMjp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SetPublicCDKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPublicCDKeyTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SetPublicCDKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/SetPublicCDKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SetPublicCDKey(ctx, req.(*SetPublicCDKeyTime))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetPublicCDKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPublicKeyNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetPublicCDKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/GetPublicCDKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetPublicCDKey(ctx, req.(*GetAllPublicKeyNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SetCDKeyReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CDKeyReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SetCDKeyReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/SetCDKeyReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SetCDKeyReward(ctx, req.(*CDKeyReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GenPersonalCDKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonalCDKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GenPersonalCDKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/GenPersonalCDKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GenPersonalCDKey(ctx, req.(*PersonalCDKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetAllPersonalCDKeyGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetAllPersonalCDKeyGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/GetAllPersonalCDKeyGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetAllPersonalCDKeyGroup(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetAvailableCodeFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailableCodesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetAvailableCodeFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/GetAvailableCodeFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetAvailableCodeFromGroup(ctx, req.(*AvailableCodesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SetCustomization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomizationCodeSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SetCustomization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/SetCustomization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SetCustomization(ctx, req.(*CustomizationCodeSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetCustomization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetCustomization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/GetCustomization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetCustomization(ctx, req.(*StringStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SetImportCDKeyMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportCDKeySet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SetImportCDKeyMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/SetImportCDKeyMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SetImportCDKeyMail(ctx, req.(*ImportCDKeySet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SetActorOutPutStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetActorOutPutStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SetActorOutPutStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/SetActorOutPutStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SetActorOutPutStatus(ctx, req.(*SetActorOutPutStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_VersionCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).VersionCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/VersionCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).VersionCheck(ctx, req.(*VersionCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SetVersionCheckPublic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionCheckPublic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SetVersionCheckPublic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/SetVersionCheckPublic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SetVersionCheckPublic(ctx, req.(*VersionCheckPublic))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SetWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeWhiteList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SetWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/SetWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SetWhiteList(ctx, req.(*ChangeWhiteList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetAllVerAndWl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetAllVerAndWl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/GetAllVerAndWl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetAllVerAndWl(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SendGroupSysNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupSysNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SendGroupSysNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/SendGroupSysNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SendGroupSysNotice(ctx, req.(*GroupSysNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ResetEngageDailyRec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInviteCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ResetEngageDailyRec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/ResetEngageDailyRec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ResetEngageDailyRec(ctx, req.(*PlayerInviteCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SetEngageDailyRec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int32Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SetEngageDailyRec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/SetEngageDailyRec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SetEngageDailyRec(ctx, req.(*Int32Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SetOperationalActivityModSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModSequence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SetOperationalActivityModSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/SetOperationalActivityModSequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SetOperationalActivityModSequence(ctx, req.(*ModSequence))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelOperationalActivityModSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelModSequenceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelOperationalActivityModSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/DelOperationalActivityModSequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelOperationalActivityModSequence(ctx, req.(*DelModSequenceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SetOperationalActivityNewActorPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewActorPreview)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SetOperationalActivityNewActorPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/SetOperationalActivityNewActorPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SetOperationalActivityNewActorPreview(ctx, req.(*NewActorPreview))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SetOperationalActivityJoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SetOperationalActivityJoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/SetOperationalActivityJoinGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SetOperationalActivityJoinGroup(ctx, req.(*JoinGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelOperationalActivityJoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelJoinGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelOperationalActivityJoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/DelOperationalActivityJoinGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelOperationalActivityJoinGroup(ctx, req.(*DelJoinGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetAllOperationalActivityInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetAllOperationalActivityInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/GetAllOperationalActivityInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetAllOperationalActivityInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ClearKRPublic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ClearKRPublic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/ClearKRPublic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ClearKRPublic(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_CheckOhayooOrderPayed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderPayed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).CheckOhayooOrderPayed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/CheckOhayooOrderPayed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).CheckOhayooOrderPayed(ctx, req.(*OrderPayed))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_CompareWidAndQid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInviteCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).CompareWidAndQid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/CompareWidAndQid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).CompareWidAndQid(ctx, req.(*PlayerInviteCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SetTimeOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTimeOffsetData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SetTimeOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/SetTimeOffset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SetTimeOffset(ctx, req.(*SetTimeOffsetData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SetAllSystemTimeOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTimeOffsetData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SetAllSystemTimeOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/SetAllSystemTimeOffset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SetAllSystemTimeOffset(ctx, req.(*SetTimeOffsetData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ResetLadder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ResetLadder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/ResetLadder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ResetLadder(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ResetTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ResetTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/ResetTour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ResetTour(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_BattlepassReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInviteCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).BattlepassReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/BattlepassReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).BattlepassReset(ctx, req.(*PlayerInviteCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GloryroadSeasonReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GloryroadSeasonReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/GloryroadSeasonReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GloryroadSeasonReset(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GloryroadPlayerReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInviteCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GloryroadPlayerReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/GloryroadPlayerReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GloryroadPlayerReset(ctx, req.(*PlayerInviteCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_MissionReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInviteCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).MissionReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/MissionReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).MissionReset(ctx, req.(*PlayerInviteCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AIGrowTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AIGrowTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/AIGrowTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AIGrowTest(ctx, req.(*IntPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AIGrowStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AIGrowStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/AIGrowStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AIGrowStart(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AIGrowRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AIGrowRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/AIGrowRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AIGrowRemove(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AIGrowRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AIGrowRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/AIGrowRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AIGrowRun(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AIInsertMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AIInsertMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/AIInsertMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AIInsertMatch(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_StartMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).StartMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/StartMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).StartMatch(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ShopReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInviteCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ShopReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/ShopReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ShopReset(ctx, req.(*PlayerInviteCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetAllSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSkillReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetAllSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/GetAllSkill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetAllSkill(ctx, req.(*GetAllSkillReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetAllSkin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInviteCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetAllSkin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/GetAllSkin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetAllSkin(ctx, req.(*PlayerInviteCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_FixTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).FixTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/FixTour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).FixTour(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_TestUserConcurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestUserConcurrencyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).TestUserConcurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/TestUserConcurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).TestUserConcurrency(ctx, req.(*TestUserConcurrencyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ShopShowSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopShowInfos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ShopShowSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/ShopShowSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ShopShowSet(ctx, req.(*ShopShowInfos))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ShopShowGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ShopShowGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/ShopShowGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ShopShowGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ShopShowDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopShowDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ShopShowDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/ShopShowDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ShopShowDel(ctx, req.(*ShopShowDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_FinishAllMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInviteCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).FinishAllMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/FinishAllMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).FinishAllMission(ctx, req.(*PlayerInviteCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SimSysCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SimSysCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/SimSysCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SimSysCall(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SetPlayerAreaCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPlayerAreaCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SetPlayerAreaCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/SetPlayerAreaCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SetPlayerAreaCode(ctx, req.(*SetPlayerAreaCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_MoveUserMailsOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).MoveUserMailsOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/MoveUserMailsOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).MoveUserMailsOut(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_FinishFirstRecharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInviteCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).FinishFirstRecharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/FinishFirstRecharge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).FinishFirstRecharge(ctx, req.(*PlayerInviteCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetQidWidFromPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetQidWidFromPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/GetQidWidFromPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetQidWidFromPlayer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_CoinTimeCfgSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackgroundCfg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).CoinTimeCfgSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/CoinTimeCfgSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).CoinTimeCfgSet(ctx, req.(*BackgroundCfg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_CoinTimeCfgDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelBackgroundCfgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).CoinTimeCfgDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/CoinTimeCfgDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).CoinTimeCfgDel(ctx, req.(*DelBackgroundCfgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_CoinTimeCfgGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).CoinTimeCfgGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/CoinTimeCfgGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).CoinTimeCfgGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddItemRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInviteCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddItemRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/AddItemRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddItemRecord(ctx, req.(*PlayerInviteCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_FeedAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).FeedAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/FeedAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).FeedAccount(ctx, req.(*FeedAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SetMissionPref_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMissionPrefReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SetMissionPref(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Manage/SetMissionPref",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SetMissionPref(ctx, req.(*SetMissionPrefReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Manage_ServiceDesc is the grpc.ServiceDesc for Manage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Manage",
	HandlerType: (*ManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ItemAdd",
			Handler:    _Manage_ItemAdd_Handler,
		},
		{
			MethodName: "ClearPlayer",
			Handler:    _Manage_ClearPlayer_Handler,
		},
		{
			MethodName: "SetNotice",
			Handler:    _Manage_SetNotice_Handler,
		},
		{
			MethodName: "DelNotice",
			Handler:    _Manage_DelNotice_Handler,
		},
		{
			MethodName: "AddNotice",
			Handler:    _Manage_AddNotice_Handler,
		},
		{
			MethodName: "SendMail",
			Handler:    _Manage_SendMail_Handler,
		},
		{
			MethodName: "UnlockSystem",
			Handler:    _Manage_UnlockSystem_Handler,
		},
		{
			MethodName: "GenToken",
			Handler:    _Manage_GenToken_Handler,
		},
		{
			MethodName: "GenActivateCode",
			Handler:    _Manage_GenActivateCode_Handler,
		},
		{
			MethodName: "GetActivateCodeToMjp",
			Handler:    _Manage_GetActivateCodeToMjp_Handler,
		},
		{
			MethodName: "SetUserLock",
			Handler:    _Manage_SetUserLock_Handler,
		},
		{
			MethodName: "RefreshAndUnlock",
			Handler:    _Manage_RefreshAndUnlock_Handler,
		},
		{
			MethodName: "GetWechatCDKey",
			Handler:    _Manage_GetWechatCDKey_Handler,
		},
		{
			MethodName: "SetPublicCDKey",
			Handler:    _Manage_SetPublicCDKey_Handler,
		},
		{
			MethodName: "GetPublicCDKey",
			Handler:    _Manage_GetPublicCDKey_Handler,
		},
		{
			MethodName: "SetCDKeyReward",
			Handler:    _Manage_SetCDKeyReward_Handler,
		},
		{
			MethodName: "GenPersonalCDKey",
			Handler:    _Manage_GenPersonalCDKey_Handler,
		},
		{
			MethodName: "GetAllPersonalCDKeyGroup",
			Handler:    _Manage_GetAllPersonalCDKeyGroup_Handler,
		},
		{
			MethodName: "GetAvailableCodeFromGroup",
			Handler:    _Manage_GetAvailableCodeFromGroup_Handler,
		},
		{
			MethodName: "SetCustomization",
			Handler:    _Manage_SetCustomization_Handler,
		},
		{
			MethodName: "GetCustomization",
			Handler:    _Manage_GetCustomization_Handler,
		},
		{
			MethodName: "SetImportCDKeyMail",
			Handler:    _Manage_SetImportCDKeyMail_Handler,
		},
		{
			MethodName: "SetActorOutPutStatus",
			Handler:    _Manage_SetActorOutPutStatus_Handler,
		},
		{
			MethodName: "VersionCheck",
			Handler:    _Manage_VersionCheck_Handler,
		},
		{
			MethodName: "SetVersionCheckPublic",
			Handler:    _Manage_SetVersionCheckPublic_Handler,
		},
		{
			MethodName: "SetWhiteList",
			Handler:    _Manage_SetWhiteList_Handler,
		},
		{
			MethodName: "GetAllVerAndWl",
			Handler:    _Manage_GetAllVerAndWl_Handler,
		},
		{
			MethodName: "SendGroupSysNotice",
			Handler:    _Manage_SendGroupSysNotice_Handler,
		},
		{
			MethodName: "ResetEngageDailyRec",
			Handler:    _Manage_ResetEngageDailyRec_Handler,
		},
		{
			MethodName: "SetEngageDailyRec",
			Handler:    _Manage_SetEngageDailyRec_Handler,
		},
		{
			MethodName: "SetOperationalActivityModSequence",
			Handler:    _Manage_SetOperationalActivityModSequence_Handler,
		},
		{
			MethodName: "DelOperationalActivityModSequence",
			Handler:    _Manage_DelOperationalActivityModSequence_Handler,
		},
		{
			MethodName: "SetOperationalActivityNewActorPreview",
			Handler:    _Manage_SetOperationalActivityNewActorPreview_Handler,
		},
		{
			MethodName: "SetOperationalActivityJoinGroup",
			Handler:    _Manage_SetOperationalActivityJoinGroup_Handler,
		},
		{
			MethodName: "DelOperationalActivityJoinGroup",
			Handler:    _Manage_DelOperationalActivityJoinGroup_Handler,
		},
		{
			MethodName: "GetAllOperationalActivityInfo",
			Handler:    _Manage_GetAllOperationalActivityInfo_Handler,
		},
		{
			MethodName: "ClearKRPublic",
			Handler:    _Manage_ClearKRPublic_Handler,
		},
		{
			MethodName: "CheckOhayooOrderPayed",
			Handler:    _Manage_CheckOhayooOrderPayed_Handler,
		},
		{
			MethodName: "CompareWidAndQid",
			Handler:    _Manage_CompareWidAndQid_Handler,
		},
		{
			MethodName: "SetTimeOffset",
			Handler:    _Manage_SetTimeOffset_Handler,
		},
		{
			MethodName: "SetAllSystemTimeOffset",
			Handler:    _Manage_SetAllSystemTimeOffset_Handler,
		},
		{
			MethodName: "ResetLadder",
			Handler:    _Manage_ResetLadder_Handler,
		},
		{
			MethodName: "ResetTour",
			Handler:    _Manage_ResetTour_Handler,
		},
		{
			MethodName: "BattlepassReset",
			Handler:    _Manage_BattlepassReset_Handler,
		},
		{
			MethodName: "GloryroadSeasonReset",
			Handler:    _Manage_GloryroadSeasonReset_Handler,
		},
		{
			MethodName: "GloryroadPlayerReset",
			Handler:    _Manage_GloryroadPlayerReset_Handler,
		},
		{
			MethodName: "MissionReset",
			Handler:    _Manage_MissionReset_Handler,
		},
		{
			MethodName: "AIGrowTest",
			Handler:    _Manage_AIGrowTest_Handler,
		},
		{
			MethodName: "AIGrowStart",
			Handler:    _Manage_AIGrowStart_Handler,
		},
		{
			MethodName: "AIGrowRemove",
			Handler:    _Manage_AIGrowRemove_Handler,
		},
		{
			MethodName: "AIGrowRun",
			Handler:    _Manage_AIGrowRun_Handler,
		},
		{
			MethodName: "AIInsertMatch",
			Handler:    _Manage_AIInsertMatch_Handler,
		},
		{
			MethodName: "StartMatch",
			Handler:    _Manage_StartMatch_Handler,
		},
		{
			MethodName: "ShopReset",
			Handler:    _Manage_ShopReset_Handler,
		},
		{
			MethodName: "GetAllSkill",
			Handler:    _Manage_GetAllSkill_Handler,
		},
		{
			MethodName: "GetAllSkin",
			Handler:    _Manage_GetAllSkin_Handler,
		},
		{
			MethodName: "FixTour",
			Handler:    _Manage_FixTour_Handler,
		},
		{
			MethodName: "TestUserConcurrency",
			Handler:    _Manage_TestUserConcurrency_Handler,
		},
		{
			MethodName: "ShopShowSet",
			Handler:    _Manage_ShopShowSet_Handler,
		},
		{
			MethodName: "ShopShowGet",
			Handler:    _Manage_ShopShowGet_Handler,
		},
		{
			MethodName: "ShopShowDel",
			Handler:    _Manage_ShopShowDel_Handler,
		},
		{
			MethodName: "FinishAllMission",
			Handler:    _Manage_FinishAllMission_Handler,
		},
		{
			MethodName: "SimSysCall",
			Handler:    _Manage_SimSysCall_Handler,
		},
		{
			MethodName: "SetPlayerAreaCode",
			Handler:    _Manage_SetPlayerAreaCode_Handler,
		},
		{
			MethodName: "MoveUserMailsOut",
			Handler:    _Manage_MoveUserMailsOut_Handler,
		},
		{
			MethodName: "FinishFirstRecharge",
			Handler:    _Manage_FinishFirstRecharge_Handler,
		},
		{
			MethodName: "GetQidWidFromPlayer",
			Handler:    _Manage_GetQidWidFromPlayer_Handler,
		},
		{
			MethodName: "CoinTimeCfgSet",
			Handler:    _Manage_CoinTimeCfgSet_Handler,
		},
		{
			MethodName: "CoinTimeCfgDel",
			Handler:    _Manage_CoinTimeCfgDel_Handler,
		},
		{
			MethodName: "CoinTimeCfgGet",
			Handler:    _Manage_CoinTimeCfgGet_Handler,
		},
		{
			MethodName: "AddItemRecord",
			Handler:    _Manage_AddItemRecord_Handler,
		},
		{
			MethodName: "FeedAccount",
			Handler:    _Manage_FeedAccount_Handler,
		},
		{
			MethodName: "SetMissionPref",
			Handler:    _Manage_SetMissionPref_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_manage.proto",
}
