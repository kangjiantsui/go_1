// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RpcClient is the client API for Rpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcClient interface {
	// gate call backend 请求
	HandleRequest(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseMessage, error)
	// gate call backend 服务器玩家下线
	AgentClosed(ctx context.Context, in *AgentClosedRequest, opts ...grpc.CallOption) (*AgentClosedResponse, error)
	// http call backend 请求
	HandleHttpRequest(ctx context.Context, in *HttpRequest, opts ...grpc.CallOption) (*HttpResponse, error)
	// backend call backend 玩家登录到此服务器
	OnEnter(ctx context.Context, in *UserEnterMessage, opts ...grpc.CallOption) (*Empty, error)
	// gate call backend 玩家心跳
	OnHeartBeat(ctx context.Context, in *PlayerUid, opts ...grpc.CallOption) (*Empty, error)
	// backend call gate 推送
	HandlePush(ctx context.Context, in *PushMessage, opts ...grpc.CallOption) (*Empty, error)
	// backend call gate 关闭连接
	CloseAgent(ctx context.Context, in *CloseAgentRequest, opts ...grpc.CallOption) (*Empty, error)
	// backend call gate 绑定 uid
	Bind(ctx context.Context, in *BindRequest, opts ...grpc.CallOption) (*BindResponse, error)
	// backend call gate 设置值
	PushValue(ctx context.Context, in *PushValueRequest, opts ...grpc.CallOption) (*Empty, error)
	// backend call gate 广播给一个网关上的所有人
	Broadcast(ctx context.Context, in *PushMessage, opts ...grpc.CallOption) (*Empty, error)
	// backend call gate 检查玩家是否在线
	GetUidArrIsOnline(ctx context.Context, in *GetUidArrIsOnlineReq, opts ...grpc.CallOption) (*GetUidArrIsOnlineRsp, error)
	// backend call gate 随机后去多个在线 uid，若有，则会保证数量
	GetRandomUidArr(ctx context.Context, in *GetRandomUidArrReq, opts ...grpc.CallOption) (*GetRandomUidArrRsp, error)
	// backend call backend 指定服务器处理战斗结果
	PushFightResult(ctx context.Context, in *FightPushMsg, opts ...grpc.CallOption) (*Empty, error)
	// backend call backend 指定服务器处理战斗结果
	PushFeedFightReq(ctx context.Context, in *FeedAccountReq, opts ...grpc.CallOption) (*Empty, error)
	// backend call backend 指定服务器处理邮件
	PushMail(ctx context.Context, in *MailPushMsg, opts ...grpc.CallOption) (*Empty, error)
	// backend call backend 指定服务器清理玩家
	PushClearUser(ctx context.Context, in *ClearUserPushMsg, opts ...grpc.CallOption) (*Empty, error)
	// backend call backend 指定玩家添加道具
	PushAddItem(ctx context.Context, in *GM_UpdateItem, opts ...grpc.CallOption) (*ItemUpdateResult, error)
	// backend call backend 解锁所有系统
	PushUnlock(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error)
	// backend call backend 其他玩家接受邀请
	PushInvite(ctx context.Context, in *PushInviteMsg, opts ...grpc.CallOption) (*Empty, error)
	// backend call backend 获取玩家个人信息
	PushPlayerPersonal(ctx context.Context, in *PlayerPersonalReq, opts ...grpc.CallOption) (*PlayerPersonalResp, error)
	// backend call backend 指定玩家添加道具
	PushFixTour(ctx context.Context, in *PlayerUid, opts ...grpc.CallOption) (*Empty, error)
	// backend call backend 登陆服通知逻辑服登录消息
	PushUserLogin(ctx context.Context, in *UserLoginMsg, opts ...grpc.CallOption) (*LoginRsp, error)
	// 将在线玩家踢下线并设置锁定
	PushKickUser(ctx context.Context, in *PlayerUid, opts ...grpc.CallOption) (*Empty, error)
	// 刷新在线玩家的缓存并解锁
	PushRefreshAndUnlock(ctx context.Context, in *PlayerUid, opts ...grpc.CallOption) (*Empty, error)
	// 需要一个 rpc 方法来测试玩家数据的并发修改情况
	TestUserConcurrency(ctx context.Context, in *TestUserConcurrencyReq, opts ...grpc.CallOption) (*TestUserConcurrencyRsp, error)
	// 通知刷新球员产出状态
	NoticeActorOutputStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// 通知刷新版本信息
	NoticeVersionCheckRefresh(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// 获取玩家星辉信息
	GetPlayerStarInfo(ctx context.Context, in *PlayerUid, opts ...grpc.CallOption) (*StarInfoMsg, error)
	// 获取玩家约战推荐的基础信息
	GetPlayerEngageRecommendInfo(ctx context.Context, in *PlayerUid, opts ...grpc.CallOption) (*EngageRecommendPlayer, error)
	// 重置玩家星辉每日记录
	ResetPlayerStarDailyRec(ctx context.Context, in *PlayerUid, opts ...grpc.CallOption) (*Empty, error)
	// 设置用户每日获取星数值
	SetPlayerStarDailyNum(ctx context.Context, in *SetUserNumMsg, opts ...grpc.CallOption) (*Empty, error)
	// 推送时间偏移
	PushTimeOffset(ctx context.Context, in *SetTimeOffsetData, opts ...grpc.CallOption) (*Empty, error)
	// 通知刷新路人王公共信息
	NoticeKingRoundRefresh(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// 通知重置路人王公共信息
	NoticeKingRoundReset(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// 获取玩家static 信息
	GetPlayerSubMapData(ctx context.Context, in *PlayerUid, opts ...grpc.CallOption) (*PlayerSubMapData, error)
	// 通知对应logic发货
	PushPayItems(ctx context.Context, in *PayItems, opts ...grpc.CallOption) (*Empty, error)
	// 通知成就事件
	PushAchievementEvent(ctx context.Context, in *PushAchievementMsg, opts ...grpc.CallOption) (*Empty, error)
	// 解锁所有皮肤和球员
	PushGetAllSkin(ctx context.Context, in *PlayerUid, opts ...grpc.CallOption) (*Empty, error)
	// 设置玩家定位信息
	PushSetPlayerAreaCode(ctx context.Context, in *SetPlayerAreaCodeReq, opts ...grpc.CallOption) (*Empty, error)
	// 直接达成首充
	FinishFirstRecharge(ctx context.Context, in *PlayerUid, opts ...grpc.CallOption) (*Empty, error)
	// 推送所有服务器更新系统时间
	PushSetTimeOffset(ctx context.Context, in *SetTimeOffsetData, opts ...grpc.CallOption) (*SetTimeOffsetRes, error)
	// 推送所有服务器更新所有系统时间
	PushSetAllTimeOffset(ctx context.Context, in *SetTimeOffsetData, opts ...grpc.CallOption) (*SetTimeOffsetRes, error)
	// 设置任务
	PushSetMissionPref(ctx context.Context, in *SetMissionPrefReq, opts ...grpc.CallOption) (*Empty, error)
}

type rpcClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcClient(cc grpc.ClientConnInterface) RpcClient {
	return &rpcClient{cc}
}

func (c *rpcClient) HandleRequest(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/rpc/HandleRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) AgentClosed(ctx context.Context, in *AgentClosedRequest, opts ...grpc.CallOption) (*AgentClosedResponse, error) {
	out := new(AgentClosedResponse)
	err := c.cc.Invoke(ctx, "/rpc/AgentClosed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) HandleHttpRequest(ctx context.Context, in *HttpRequest, opts ...grpc.CallOption) (*HttpResponse, error) {
	out := new(HttpResponse)
	err := c.cc.Invoke(ctx, "/rpc/HandleHttpRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) OnEnter(ctx context.Context, in *UserEnterMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/OnEnter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) OnHeartBeat(ctx context.Context, in *PlayerUid, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/OnHeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) HandlePush(ctx context.Context, in *PushMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/HandlePush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) CloseAgent(ctx context.Context, in *CloseAgentRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/CloseAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) Bind(ctx context.Context, in *BindRequest, opts ...grpc.CallOption) (*BindResponse, error) {
	out := new(BindResponse)
	err := c.cc.Invoke(ctx, "/rpc/Bind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PushValue(ctx context.Context, in *PushValueRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/PushValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) Broadcast(ctx context.Context, in *PushMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) GetUidArrIsOnline(ctx context.Context, in *GetUidArrIsOnlineReq, opts ...grpc.CallOption) (*GetUidArrIsOnlineRsp, error) {
	out := new(GetUidArrIsOnlineRsp)
	err := c.cc.Invoke(ctx, "/rpc/GetUidArrIsOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) GetRandomUidArr(ctx context.Context, in *GetRandomUidArrReq, opts ...grpc.CallOption) (*GetRandomUidArrRsp, error) {
	out := new(GetRandomUidArrRsp)
	err := c.cc.Invoke(ctx, "/rpc/GetRandomUidArr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PushFightResult(ctx context.Context, in *FightPushMsg, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/PushFightResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PushFeedFightReq(ctx context.Context, in *FeedAccountReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/PushFeedFightReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PushMail(ctx context.Context, in *MailPushMsg, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/PushMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PushClearUser(ctx context.Context, in *ClearUserPushMsg, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/PushClearUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PushAddItem(ctx context.Context, in *GM_UpdateItem, opts ...grpc.CallOption) (*ItemUpdateResult, error) {
	out := new(ItemUpdateResult)
	err := c.cc.Invoke(ctx, "/rpc/PushAddItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PushUnlock(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/PushUnlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PushInvite(ctx context.Context, in *PushInviteMsg, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/PushInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PushPlayerPersonal(ctx context.Context, in *PlayerPersonalReq, opts ...grpc.CallOption) (*PlayerPersonalResp, error) {
	out := new(PlayerPersonalResp)
	err := c.cc.Invoke(ctx, "/rpc/PushPlayerPersonal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PushFixTour(ctx context.Context, in *PlayerUid, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/PushFixTour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PushUserLogin(ctx context.Context, in *UserLoginMsg, opts ...grpc.CallOption) (*LoginRsp, error) {
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, "/rpc/PushUserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PushKickUser(ctx context.Context, in *PlayerUid, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/PushKickUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PushRefreshAndUnlock(ctx context.Context, in *PlayerUid, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/PushRefreshAndUnlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) TestUserConcurrency(ctx context.Context, in *TestUserConcurrencyReq, opts ...grpc.CallOption) (*TestUserConcurrencyRsp, error) {
	out := new(TestUserConcurrencyRsp)
	err := c.cc.Invoke(ctx, "/rpc/TestUserConcurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) NoticeActorOutputStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/NoticeActorOutputStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) NoticeVersionCheckRefresh(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/NoticeVersionCheckRefresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) GetPlayerStarInfo(ctx context.Context, in *PlayerUid, opts ...grpc.CallOption) (*StarInfoMsg, error) {
	out := new(StarInfoMsg)
	err := c.cc.Invoke(ctx, "/rpc/GetPlayerStarInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) GetPlayerEngageRecommendInfo(ctx context.Context, in *PlayerUid, opts ...grpc.CallOption) (*EngageRecommendPlayer, error) {
	out := new(EngageRecommendPlayer)
	err := c.cc.Invoke(ctx, "/rpc/GetPlayerEngageRecommendInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) ResetPlayerStarDailyRec(ctx context.Context, in *PlayerUid, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/ResetPlayerStarDailyRec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) SetPlayerStarDailyNum(ctx context.Context, in *SetUserNumMsg, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/SetPlayerStarDailyNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PushTimeOffset(ctx context.Context, in *SetTimeOffsetData, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/PushTimeOffset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) NoticeKingRoundRefresh(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/NoticeKingRoundRefresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) NoticeKingRoundReset(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/NoticeKingRoundReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) GetPlayerSubMapData(ctx context.Context, in *PlayerUid, opts ...grpc.CallOption) (*PlayerSubMapData, error) {
	out := new(PlayerSubMapData)
	err := c.cc.Invoke(ctx, "/rpc/GetPlayerSubMapData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PushPayItems(ctx context.Context, in *PayItems, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/PushPayItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PushAchievementEvent(ctx context.Context, in *PushAchievementMsg, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/PushAchievementEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PushGetAllSkin(ctx context.Context, in *PlayerUid, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/PushGetAllSkin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PushSetPlayerAreaCode(ctx context.Context, in *SetPlayerAreaCodeReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/PushSetPlayerAreaCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) FinishFirstRecharge(ctx context.Context, in *PlayerUid, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/FinishFirstRecharge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PushSetTimeOffset(ctx context.Context, in *SetTimeOffsetData, opts ...grpc.CallOption) (*SetTimeOffsetRes, error) {
	out := new(SetTimeOffsetRes)
	err := c.cc.Invoke(ctx, "/rpc/PushSetTimeOffset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PushSetAllTimeOffset(ctx context.Context, in *SetTimeOffsetData, opts ...grpc.CallOption) (*SetTimeOffsetRes, error) {
	out := new(SetTimeOffsetRes)
	err := c.cc.Invoke(ctx, "/rpc/PushSetAllTimeOffset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PushSetMissionPref(ctx context.Context, in *SetMissionPrefReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc/PushSetMissionPref", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcServer is the server API for Rpc service.
// All implementations must embed UnimplementedRpcServer
// for forward compatibility
type RpcServer interface {
	// gate call backend 请求
	HandleRequest(context.Context, *RequestMessage) (*ResponseMessage, error)
	// gate call backend 服务器玩家下线
	AgentClosed(context.Context, *AgentClosedRequest) (*AgentClosedResponse, error)
	// http call backend 请求
	HandleHttpRequest(context.Context, *HttpRequest) (*HttpResponse, error)
	// backend call backend 玩家登录到此服务器
	OnEnter(context.Context, *UserEnterMessage) (*Empty, error)
	// gate call backend 玩家心跳
	OnHeartBeat(context.Context, *PlayerUid) (*Empty, error)
	// backend call gate 推送
	HandlePush(context.Context, *PushMessage) (*Empty, error)
	// backend call gate 关闭连接
	CloseAgent(context.Context, *CloseAgentRequest) (*Empty, error)
	// backend call gate 绑定 uid
	Bind(context.Context, *BindRequest) (*BindResponse, error)
	// backend call gate 设置值
	PushValue(context.Context, *PushValueRequest) (*Empty, error)
	// backend call gate 广播给一个网关上的所有人
	Broadcast(context.Context, *PushMessage) (*Empty, error)
	// backend call gate 检查玩家是否在线
	GetUidArrIsOnline(context.Context, *GetUidArrIsOnlineReq) (*GetUidArrIsOnlineRsp, error)
	// backend call gate 随机后去多个在线 uid，若有，则会保证数量
	GetRandomUidArr(context.Context, *GetRandomUidArrReq) (*GetRandomUidArrRsp, error)
	// backend call backend 指定服务器处理战斗结果
	PushFightResult(context.Context, *FightPushMsg) (*Empty, error)
	// backend call backend 指定服务器处理战斗结果
	PushFeedFightReq(context.Context, *FeedAccountReq) (*Empty, error)
	// backend call backend 指定服务器处理邮件
	PushMail(context.Context, *MailPushMsg) (*Empty, error)
	// backend call backend 指定服务器清理玩家
	PushClearUser(context.Context, *ClearUserPushMsg) (*Empty, error)
	// backend call backend 指定玩家添加道具
	PushAddItem(context.Context, *GM_UpdateItem) (*ItemUpdateResult, error)
	// backend call backend 解锁所有系统
	PushUnlock(context.Context, *PlayerInviteCode) (*Empty, error)
	// backend call backend 其他玩家接受邀请
	PushInvite(context.Context, *PushInviteMsg) (*Empty, error)
	// backend call backend 获取玩家个人信息
	PushPlayerPersonal(context.Context, *PlayerPersonalReq) (*PlayerPersonalResp, error)
	// backend call backend 指定玩家添加道具
	PushFixTour(context.Context, *PlayerUid) (*Empty, error)
	// backend call backend 登陆服通知逻辑服登录消息
	PushUserLogin(context.Context, *UserLoginMsg) (*LoginRsp, error)
	// 将在线玩家踢下线并设置锁定
	PushKickUser(context.Context, *PlayerUid) (*Empty, error)
	// 刷新在线玩家的缓存并解锁
	PushRefreshAndUnlock(context.Context, *PlayerUid) (*Empty, error)
	// 需要一个 rpc 方法来测试玩家数据的并发修改情况
	TestUserConcurrency(context.Context, *TestUserConcurrencyReq) (*TestUserConcurrencyRsp, error)
	// 通知刷新球员产出状态
	NoticeActorOutputStatus(context.Context, *Empty) (*Empty, error)
	// 通知刷新版本信息
	NoticeVersionCheckRefresh(context.Context, *Empty) (*Empty, error)
	// 获取玩家星辉信息
	GetPlayerStarInfo(context.Context, *PlayerUid) (*StarInfoMsg, error)
	// 获取玩家约战推荐的基础信息
	GetPlayerEngageRecommendInfo(context.Context, *PlayerUid) (*EngageRecommendPlayer, error)
	// 重置玩家星辉每日记录
	ResetPlayerStarDailyRec(context.Context, *PlayerUid) (*Empty, error)
	// 设置用户每日获取星数值
	SetPlayerStarDailyNum(context.Context, *SetUserNumMsg) (*Empty, error)
	// 推送时间偏移
	PushTimeOffset(context.Context, *SetTimeOffsetData) (*Empty, error)
	// 通知刷新路人王公共信息
	NoticeKingRoundRefresh(context.Context, *Empty) (*Empty, error)
	// 通知重置路人王公共信息
	NoticeKingRoundReset(context.Context, *Empty) (*Empty, error)
	// 获取玩家static 信息
	GetPlayerSubMapData(context.Context, *PlayerUid) (*PlayerSubMapData, error)
	// 通知对应logic发货
	PushPayItems(context.Context, *PayItems) (*Empty, error)
	// 通知成就事件
	PushAchievementEvent(context.Context, *PushAchievementMsg) (*Empty, error)
	// 解锁所有皮肤和球员
	PushGetAllSkin(context.Context, *PlayerUid) (*Empty, error)
	// 设置玩家定位信息
	PushSetPlayerAreaCode(context.Context, *SetPlayerAreaCodeReq) (*Empty, error)
	// 直接达成首充
	FinishFirstRecharge(context.Context, *PlayerUid) (*Empty, error)
	// 推送所有服务器更新系统时间
	PushSetTimeOffset(context.Context, *SetTimeOffsetData) (*SetTimeOffsetRes, error)
	// 推送所有服务器更新所有系统时间
	PushSetAllTimeOffset(context.Context, *SetTimeOffsetData) (*SetTimeOffsetRes, error)
	// 设置任务
	PushSetMissionPref(context.Context, *SetMissionPrefReq) (*Empty, error)
	mustEmbedUnimplementedRpcServer()
}

// UnimplementedRpcServer must be embedded to have forward compatible implementations.
type UnimplementedRpcServer struct {
}

func (UnimplementedRpcServer) HandleRequest(context.Context, *RequestMessage) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleRequest not implemented")
}
func (UnimplementedRpcServer) AgentClosed(context.Context, *AgentClosedRequest) (*AgentClosedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentClosed not implemented")
}
func (UnimplementedRpcServer) HandleHttpRequest(context.Context, *HttpRequest) (*HttpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleHttpRequest not implemented")
}
func (UnimplementedRpcServer) OnEnter(context.Context, *UserEnterMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnEnter not implemented")
}
func (UnimplementedRpcServer) OnHeartBeat(context.Context, *PlayerUid) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnHeartBeat not implemented")
}
func (UnimplementedRpcServer) HandlePush(context.Context, *PushMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlePush not implemented")
}
func (UnimplementedRpcServer) CloseAgent(context.Context, *CloseAgentRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseAgent not implemented")
}
func (UnimplementedRpcServer) Bind(context.Context, *BindRequest) (*BindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bind not implemented")
}
func (UnimplementedRpcServer) PushValue(context.Context, *PushValueRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushValue not implemented")
}
func (UnimplementedRpcServer) Broadcast(context.Context, *PushMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedRpcServer) GetUidArrIsOnline(context.Context, *GetUidArrIsOnlineReq) (*GetUidArrIsOnlineRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUidArrIsOnline not implemented")
}
func (UnimplementedRpcServer) GetRandomUidArr(context.Context, *GetRandomUidArrReq) (*GetRandomUidArrRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomUidArr not implemented")
}
func (UnimplementedRpcServer) PushFightResult(context.Context, *FightPushMsg) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushFightResult not implemented")
}
func (UnimplementedRpcServer) PushFeedFightReq(context.Context, *FeedAccountReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushFeedFightReq not implemented")
}
func (UnimplementedRpcServer) PushMail(context.Context, *MailPushMsg) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushMail not implemented")
}
func (UnimplementedRpcServer) PushClearUser(context.Context, *ClearUserPushMsg) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushClearUser not implemented")
}
func (UnimplementedRpcServer) PushAddItem(context.Context, *GM_UpdateItem) (*ItemUpdateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushAddItem not implemented")
}
func (UnimplementedRpcServer) PushUnlock(context.Context, *PlayerInviteCode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushUnlock not implemented")
}
func (UnimplementedRpcServer) PushInvite(context.Context, *PushInviteMsg) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushInvite not implemented")
}
func (UnimplementedRpcServer) PushPlayerPersonal(context.Context, *PlayerPersonalReq) (*PlayerPersonalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushPlayerPersonal not implemented")
}
func (UnimplementedRpcServer) PushFixTour(context.Context, *PlayerUid) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushFixTour not implemented")
}
func (UnimplementedRpcServer) PushUserLogin(context.Context, *UserLoginMsg) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushUserLogin not implemented")
}
func (UnimplementedRpcServer) PushKickUser(context.Context, *PlayerUid) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushKickUser not implemented")
}
func (UnimplementedRpcServer) PushRefreshAndUnlock(context.Context, *PlayerUid) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushRefreshAndUnlock not implemented")
}
func (UnimplementedRpcServer) TestUserConcurrency(context.Context, *TestUserConcurrencyReq) (*TestUserConcurrencyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestUserConcurrency not implemented")
}
func (UnimplementedRpcServer) NoticeActorOutputStatus(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoticeActorOutputStatus not implemented")
}
func (UnimplementedRpcServer) NoticeVersionCheckRefresh(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoticeVersionCheckRefresh not implemented")
}
func (UnimplementedRpcServer) GetPlayerStarInfo(context.Context, *PlayerUid) (*StarInfoMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStarInfo not implemented")
}
func (UnimplementedRpcServer) GetPlayerEngageRecommendInfo(context.Context, *PlayerUid) (*EngageRecommendPlayer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerEngageRecommendInfo not implemented")
}
func (UnimplementedRpcServer) ResetPlayerStarDailyRec(context.Context, *PlayerUid) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPlayerStarDailyRec not implemented")
}
func (UnimplementedRpcServer) SetPlayerStarDailyNum(context.Context, *SetUserNumMsg) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPlayerStarDailyNum not implemented")
}
func (UnimplementedRpcServer) PushTimeOffset(context.Context, *SetTimeOffsetData) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushTimeOffset not implemented")
}
func (UnimplementedRpcServer) NoticeKingRoundRefresh(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoticeKingRoundRefresh not implemented")
}
func (UnimplementedRpcServer) NoticeKingRoundReset(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoticeKingRoundReset not implemented")
}
func (UnimplementedRpcServer) GetPlayerSubMapData(context.Context, *PlayerUid) (*PlayerSubMapData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerSubMapData not implemented")
}
func (UnimplementedRpcServer) PushPayItems(context.Context, *PayItems) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushPayItems not implemented")
}
func (UnimplementedRpcServer) PushAchievementEvent(context.Context, *PushAchievementMsg) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushAchievementEvent not implemented")
}
func (UnimplementedRpcServer) PushGetAllSkin(context.Context, *PlayerUid) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushGetAllSkin not implemented")
}
func (UnimplementedRpcServer) PushSetPlayerAreaCode(context.Context, *SetPlayerAreaCodeReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushSetPlayerAreaCode not implemented")
}
func (UnimplementedRpcServer) FinishFirstRecharge(context.Context, *PlayerUid) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishFirstRecharge not implemented")
}
func (UnimplementedRpcServer) PushSetTimeOffset(context.Context, *SetTimeOffsetData) (*SetTimeOffsetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushSetTimeOffset not implemented")
}
func (UnimplementedRpcServer) PushSetAllTimeOffset(context.Context, *SetTimeOffsetData) (*SetTimeOffsetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushSetAllTimeOffset not implemented")
}
func (UnimplementedRpcServer) PushSetMissionPref(context.Context, *SetMissionPrefReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushSetMissionPref not implemented")
}
func (UnimplementedRpcServer) mustEmbedUnimplementedRpcServer() {}

// UnsafeRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcServer will
// result in compilation errors.
type UnsafeRpcServer interface {
	mustEmbedUnimplementedRpcServer()
}

func RegisterRpcServer(s grpc.ServiceRegistrar, srv RpcServer) {
	s.RegisterService(&Rpc_ServiceDesc, srv)
}

func _Rpc_HandleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).HandleRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/HandleRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).HandleRequest(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_AgentClosed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentClosedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).AgentClosed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/AgentClosed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).AgentClosed(ctx, req.(*AgentClosedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_HandleHttpRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HttpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).HandleHttpRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/HandleHttpRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).HandleHttpRequest(ctx, req.(*HttpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_OnEnter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEnterMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).OnEnter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/OnEnter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).OnEnter(ctx, req.(*UserEnterMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_OnHeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerUid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).OnHeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/OnHeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).OnHeartBeat(ctx, req.(*PlayerUid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_HandlePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).HandlePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/HandlePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).HandlePush(ctx, req.(*PushMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_CloseAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).CloseAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/CloseAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).CloseAgent(ctx, req.(*CloseAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_Bind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Bind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/Bind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Bind(ctx, req.(*BindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PushValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PushValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/PushValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PushValue(ctx, req.(*PushValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Broadcast(ctx, req.(*PushMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_GetUidArrIsOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUidArrIsOnlineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).GetUidArrIsOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/GetUidArrIsOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).GetUidArrIsOnline(ctx, req.(*GetUidArrIsOnlineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_GetRandomUidArr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomUidArrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).GetRandomUidArr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/GetRandomUidArr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).GetRandomUidArr(ctx, req.(*GetRandomUidArrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PushFightResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FightPushMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PushFightResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/PushFightResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PushFightResult(ctx, req.(*FightPushMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PushFeedFightReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PushFeedFightReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/PushFeedFightReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PushFeedFightReq(ctx, req.(*FeedAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PushMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailPushMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PushMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/PushMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PushMail(ctx, req.(*MailPushMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PushClearUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearUserPushMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PushClearUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/PushClearUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PushClearUser(ctx, req.(*ClearUserPushMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PushAddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GM_UpdateItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PushAddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/PushAddItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PushAddItem(ctx, req.(*GM_UpdateItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PushUnlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInviteCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PushUnlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/PushUnlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PushUnlock(ctx, req.(*PlayerInviteCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PushInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushInviteMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PushInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/PushInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PushInvite(ctx, req.(*PushInviteMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PushPlayerPersonal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerPersonalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PushPlayerPersonal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/PushPlayerPersonal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PushPlayerPersonal(ctx, req.(*PlayerPersonalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PushFixTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerUid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PushFixTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/PushFixTour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PushFixTour(ctx, req.(*PlayerUid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PushUserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PushUserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/PushUserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PushUserLogin(ctx, req.(*UserLoginMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PushKickUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerUid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PushKickUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/PushKickUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PushKickUser(ctx, req.(*PlayerUid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PushRefreshAndUnlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerUid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PushRefreshAndUnlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/PushRefreshAndUnlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PushRefreshAndUnlock(ctx, req.(*PlayerUid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_TestUserConcurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestUserConcurrencyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).TestUserConcurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/TestUserConcurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).TestUserConcurrency(ctx, req.(*TestUserConcurrencyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_NoticeActorOutputStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).NoticeActorOutputStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/NoticeActorOutputStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).NoticeActorOutputStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_NoticeVersionCheckRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).NoticeVersionCheckRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/NoticeVersionCheckRefresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).NoticeVersionCheckRefresh(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_GetPlayerStarInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerUid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).GetPlayerStarInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/GetPlayerStarInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).GetPlayerStarInfo(ctx, req.(*PlayerUid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_GetPlayerEngageRecommendInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerUid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).GetPlayerEngageRecommendInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/GetPlayerEngageRecommendInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).GetPlayerEngageRecommendInfo(ctx, req.(*PlayerUid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_ResetPlayerStarDailyRec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerUid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).ResetPlayerStarDailyRec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/ResetPlayerStarDailyRec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).ResetPlayerStarDailyRec(ctx, req.(*PlayerUid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_SetPlayerStarDailyNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserNumMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).SetPlayerStarDailyNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/SetPlayerStarDailyNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).SetPlayerStarDailyNum(ctx, req.(*SetUserNumMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PushTimeOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTimeOffsetData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PushTimeOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/PushTimeOffset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PushTimeOffset(ctx, req.(*SetTimeOffsetData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_NoticeKingRoundRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).NoticeKingRoundRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/NoticeKingRoundRefresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).NoticeKingRoundRefresh(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_NoticeKingRoundReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).NoticeKingRoundReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/NoticeKingRoundReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).NoticeKingRoundReset(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_GetPlayerSubMapData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerUid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).GetPlayerSubMapData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/GetPlayerSubMapData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).GetPlayerSubMapData(ctx, req.(*PlayerUid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PushPayItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayItems)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PushPayItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/PushPayItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PushPayItems(ctx, req.(*PayItems))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PushAchievementEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushAchievementMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PushAchievementEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/PushAchievementEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PushAchievementEvent(ctx, req.(*PushAchievementMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PushGetAllSkin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerUid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PushGetAllSkin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/PushGetAllSkin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PushGetAllSkin(ctx, req.(*PlayerUid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PushSetPlayerAreaCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPlayerAreaCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PushSetPlayerAreaCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/PushSetPlayerAreaCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PushSetPlayerAreaCode(ctx, req.(*SetPlayerAreaCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_FinishFirstRecharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerUid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).FinishFirstRecharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/FinishFirstRecharge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).FinishFirstRecharge(ctx, req.(*PlayerUid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PushSetTimeOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTimeOffsetData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PushSetTimeOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/PushSetTimeOffset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PushSetTimeOffset(ctx, req.(*SetTimeOffsetData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PushSetAllTimeOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTimeOffsetData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PushSetAllTimeOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/PushSetAllTimeOffset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PushSetAllTimeOffset(ctx, req.(*SetTimeOffsetData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PushSetMissionPref_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMissionPrefReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PushSetMissionPref(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc/PushSetMissionPref",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PushSetMissionPref(ctx, req.(*SetMissionPrefReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Rpc_ServiceDesc is the grpc.ServiceDesc for Rpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc",
	HandlerType: (*RpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleRequest",
			Handler:    _Rpc_HandleRequest_Handler,
		},
		{
			MethodName: "AgentClosed",
			Handler:    _Rpc_AgentClosed_Handler,
		},
		{
			MethodName: "HandleHttpRequest",
			Handler:    _Rpc_HandleHttpRequest_Handler,
		},
		{
			MethodName: "OnEnter",
			Handler:    _Rpc_OnEnter_Handler,
		},
		{
			MethodName: "OnHeartBeat",
			Handler:    _Rpc_OnHeartBeat_Handler,
		},
		{
			MethodName: "HandlePush",
			Handler:    _Rpc_HandlePush_Handler,
		},
		{
			MethodName: "CloseAgent",
			Handler:    _Rpc_CloseAgent_Handler,
		},
		{
			MethodName: "Bind",
			Handler:    _Rpc_Bind_Handler,
		},
		{
			MethodName: "PushValue",
			Handler:    _Rpc_PushValue_Handler,
		},
		{
			MethodName: "Broadcast",
			Handler:    _Rpc_Broadcast_Handler,
		},
		{
			MethodName: "GetUidArrIsOnline",
			Handler:    _Rpc_GetUidArrIsOnline_Handler,
		},
		{
			MethodName: "GetRandomUidArr",
			Handler:    _Rpc_GetRandomUidArr_Handler,
		},
		{
			MethodName: "PushFightResult",
			Handler:    _Rpc_PushFightResult_Handler,
		},
		{
			MethodName: "PushFeedFightReq",
			Handler:    _Rpc_PushFeedFightReq_Handler,
		},
		{
			MethodName: "PushMail",
			Handler:    _Rpc_PushMail_Handler,
		},
		{
			MethodName: "PushClearUser",
			Handler:    _Rpc_PushClearUser_Handler,
		},
		{
			MethodName: "PushAddItem",
			Handler:    _Rpc_PushAddItem_Handler,
		},
		{
			MethodName: "PushUnlock",
			Handler:    _Rpc_PushUnlock_Handler,
		},
		{
			MethodName: "PushInvite",
			Handler:    _Rpc_PushInvite_Handler,
		},
		{
			MethodName: "PushPlayerPersonal",
			Handler:    _Rpc_PushPlayerPersonal_Handler,
		},
		{
			MethodName: "PushFixTour",
			Handler:    _Rpc_PushFixTour_Handler,
		},
		{
			MethodName: "PushUserLogin",
			Handler:    _Rpc_PushUserLogin_Handler,
		},
		{
			MethodName: "PushKickUser",
			Handler:    _Rpc_PushKickUser_Handler,
		},
		{
			MethodName: "PushRefreshAndUnlock",
			Handler:    _Rpc_PushRefreshAndUnlock_Handler,
		},
		{
			MethodName: "TestUserConcurrency",
			Handler:    _Rpc_TestUserConcurrency_Handler,
		},
		{
			MethodName: "NoticeActorOutputStatus",
			Handler:    _Rpc_NoticeActorOutputStatus_Handler,
		},
		{
			MethodName: "NoticeVersionCheckRefresh",
			Handler:    _Rpc_NoticeVersionCheckRefresh_Handler,
		},
		{
			MethodName: "GetPlayerStarInfo",
			Handler:    _Rpc_GetPlayerStarInfo_Handler,
		},
		{
			MethodName: "GetPlayerEngageRecommendInfo",
			Handler:    _Rpc_GetPlayerEngageRecommendInfo_Handler,
		},
		{
			MethodName: "ResetPlayerStarDailyRec",
			Handler:    _Rpc_ResetPlayerStarDailyRec_Handler,
		},
		{
			MethodName: "SetPlayerStarDailyNum",
			Handler:    _Rpc_SetPlayerStarDailyNum_Handler,
		},
		{
			MethodName: "PushTimeOffset",
			Handler:    _Rpc_PushTimeOffset_Handler,
		},
		{
			MethodName: "NoticeKingRoundRefresh",
			Handler:    _Rpc_NoticeKingRoundRefresh_Handler,
		},
		{
			MethodName: "NoticeKingRoundReset",
			Handler:    _Rpc_NoticeKingRoundReset_Handler,
		},
		{
			MethodName: "GetPlayerSubMapData",
			Handler:    _Rpc_GetPlayerSubMapData_Handler,
		},
		{
			MethodName: "PushPayItems",
			Handler:    _Rpc_PushPayItems_Handler,
		},
		{
			MethodName: "PushAchievementEvent",
			Handler:    _Rpc_PushAchievementEvent_Handler,
		},
		{
			MethodName: "PushGetAllSkin",
			Handler:    _Rpc_PushGetAllSkin_Handler,
		},
		{
			MethodName: "PushSetPlayerAreaCode",
			Handler:    _Rpc_PushSetPlayerAreaCode_Handler,
		},
		{
			MethodName: "FinishFirstRecharge",
			Handler:    _Rpc_FinishFirstRecharge_Handler,
		},
		{
			MethodName: "PushSetTimeOffset",
			Handler:    _Rpc_PushSetTimeOffset_Handler,
		},
		{
			MethodName: "PushSetAllTimeOffset",
			Handler:    _Rpc_PushSetAllTimeOffset_Handler,
		},
		{
			MethodName: "PushSetMissionPref",
			Handler:    _Rpc_PushSetMissionPref_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster.proto",
}
