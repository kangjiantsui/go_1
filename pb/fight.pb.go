// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.10.0
// source: fight.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type FightState int32

const (
	FightState_F_FREE FightState = 0
	FightState_F_BUSY FightState = 1
)

// Enum value maps for FightState.
var (
	FightState_name = map[int32]string{
		0: "F_FREE",
		1: "F_BUSY",
	}
	FightState_value = map[string]int32{
		"F_FREE": 0,
		"F_BUSY": 1,
	}
)

func (x FightState) Enum() *FightState {
	p := new(FightState)
	*p = x
	return p
}

func (x FightState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FightState) Descriptor() protoreflect.EnumDescriptor {
	return file_fight_proto_enumTypes[0].Descriptor()
}

func (FightState) Type() protoreflect.EnumType {
	return &file_fight_proto_enumTypes[0]
}

func (x FightState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FightState.Descriptor instead.
func (FightState) EnumDescriptor() ([]byte, []int) {
	return file_fight_proto_rawDescGZIP(), []int{0}
}

type EngageState int32

const (
	EngageState_E_FREE EngageState = 0 // 无房间
	EngageState_E_ONE  EngageState = 1 // 房间二缺一
	EngageState_E_TWO  EngageState = 2 // 房间满人
)

// Enum value maps for EngageState.
var (
	EngageState_name = map[int32]string{
		0: "E_FREE",
		1: "E_ONE",
		2: "E_TWO",
	}
	EngageState_value = map[string]int32{
		"E_FREE": 0,
		"E_ONE":  1,
		"E_TWO":  2,
	}
)

func (x EngageState) Enum() *EngageState {
	p := new(EngageState)
	*p = x
	return p
}

func (x EngageState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EngageState) Descriptor() protoreflect.EnumDescriptor {
	return file_fight_proto_enumTypes[1].Descriptor()
}

func (EngageState) Type() protoreflect.EnumType {
	return &file_fight_proto_enumTypes[1]
}

func (x EngageState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EngageState.Descriptor instead.
func (EngageState) EnumDescriptor() ([]byte, []int) {
	return file_fight_proto_rawDescGZIP(), []int{1}
}

// 请求战斗消息
type FightReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FightId    int64  `protobuf:"varint,1,opt,name=fightId,proto3" json:"fightId,omitempty"`      // 战斗唯一id    须知：客户端8月份之后停用该字段
	FightIdStr string `protobuf:"bytes,2,opt,name=fightIdStr,proto3" json:"fightIdStr,omitempty"` // 战斗唯一id  string类型
}

func (x *FightReq) Reset() {
	*x = FightReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fight_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightReq) ProtoMessage() {}

func (x *FightReq) ProtoReflect() protoreflect.Message {
	mi := &file_fight_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightReq.ProtoReflect.Descriptor instead.
func (*FightReq) Descriptor() ([]byte, []int) {
	return file_fight_proto_rawDescGZIP(), []int{0}
}

func (x *FightReq) GetFightId() int64 {
	if x != nil {
		return x.FightId
	}
	return 0
}

func (x *FightReq) GetFightIdStr() string {
	if x != nil {
		return x.FightIdStr
	}
	return ""
}

// 战斗球员的数据
type FightActor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorId  int32           `protobuf:"varint,1,opt,name=actorId,proto3" json:"actorId,omitempty"`                                                                                            // 球员id
	Goal     int32           `protobuf:"varint,2,opt,name=goal,proto3" json:"goal,omitempty"`                                                                                                  // 进球数
	Score    int32           `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`                                                                                                // 得分数
	Dunk     int32           `protobuf:"varint,4,opt,name=dunk,proto3" json:"dunk,omitempty"`                                                                                                  // 扣篮数
	Block    int32           `protobuf:"varint,5,opt,name=block,proto3" json:"block,omitempty"`                                                                                                // 盖帽数
	Steal    int32           `protobuf:"varint,6,opt,name=steal,proto3" json:"steal,omitempty"`                                                                                                // 抢断数
	EventMap map[int32]int32 `protobuf:"bytes,7,rep,name=eventMap,proto3" json:"eventMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 希望将以上行为像<type,count>这样都放在这里
}

func (x *FightActor) Reset() {
	*x = FightActor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fight_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightActor) ProtoMessage() {}

func (x *FightActor) ProtoReflect() protoreflect.Message {
	mi := &file_fight_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightActor.ProtoReflect.Descriptor instead.
func (*FightActor) Descriptor() ([]byte, []int) {
	return file_fight_proto_rawDescGZIP(), []int{1}
}

func (x *FightActor) GetActorId() int32 {
	if x != nil {
		return x.ActorId
	}
	return 0
}

func (x *FightActor) GetGoal() int32 {
	if x != nil {
		return x.Goal
	}
	return 0
}

func (x *FightActor) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *FightActor) GetDunk() int32 {
	if x != nil {
		return x.Dunk
	}
	return 0
}

func (x *FightActor) GetBlock() int32 {
	if x != nil {
		return x.Block
	}
	return 0
}

func (x *FightActor) GetSteal() int32 {
	if x != nil {
		return x.Steal
	}
	return 0
}

func (x *FightActor) GetEventMap() map[int32]int32 {
	if x != nil {
		return x.EventMap
	}
	return nil
}

type Fighter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteCode uint64          `protobuf:"varint,1,opt,name=inviteCode,proto3" json:"inviteCode,omitempty"`                                                                                    // 玩家 id
	Result     int32           `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`                                                                                            // 是否胜利 0胜利 1失败 2平
	Actor      []*FightActor   `protobuf:"bytes,3,rep,name=actor,proto3" json:"actor,omitempty"`                                                                                               // 上场球员（参与对抗的球员）
	IsRobot    int32           `protobuf:"varint,4,opt,name=isRobot,proto3" json:"isRobot,omitempty"`                                                                                          // 是否是机器人 0 否   1 是
	Again      int32           `protobuf:"varint,5,opt,name=again,proto3" json:"again,omitempty"`                                                                                              // 是否再来一场   0 直接开始    1 再来一场开始
	BigScore   int32           `protobuf:"varint,6,opt,name=bigScore,proto3" json:"bigScore,omitempty"`                                                                                        // 大比分
	FaceMap    map[int32]int32 `protobuf:"bytes,7,rep,name=faceMap,proto3" json:"faceMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // <表情id,使用次数>
}

func (x *Fighter) Reset() {
	*x = Fighter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fight_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fighter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fighter) ProtoMessage() {}

func (x *Fighter) ProtoReflect() protoreflect.Message {
	mi := &file_fight_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fighter.ProtoReflect.Descriptor instead.
func (*Fighter) Descriptor() ([]byte, []int) {
	return file_fight_proto_rawDescGZIP(), []int{2}
}

func (x *Fighter) GetInviteCode() uint64 {
	if x != nil {
		return x.InviteCode
	}
	return 0
}

func (x *Fighter) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *Fighter) GetActor() []*FightActor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *Fighter) GetIsRobot() int32 {
	if x != nil {
		return x.IsRobot
	}
	return 0
}

func (x *Fighter) GetAgain() int32 {
	if x != nil {
		return x.Again
	}
	return 0
}

func (x *Fighter) GetBigScore() int32 {
	if x != nil {
		return x.BigScore
	}
	return 0
}

func (x *Fighter) GetFaceMap() map[int32]int32 {
	if x != nil {
		return x.FaceMap
	}
	return nil
}

type FightResultReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FightId          int64      `protobuf:"varint,1,opt,name=fightId,proto3" json:"fightId,omitempty"`                   // 战斗唯一id   须知：客户端8月份之后停用该字段
	BattleType       int32      `protobuf:"varint,2,opt,name=battleType,proto3" json:"battleType,omitempty"`             // 玩法大类
	Mode             int32      `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`                         // 比赛类型
	Stage            int32      `protobuf:"varint,4,opt,name=stage,proto3" json:"stage,omitempty"`                       // 关卡记录   仅gve使用到，gvg/pvp没有关卡属性
	Fighter          []*Fighter `protobuf:"bytes,5,rep,name=fighter,proto3" json:"fighter,omitempty"`                    // 参与玩家
	FightIdStr       string     `protobuf:"bytes,6,opt,name=fightIdStr,proto3" json:"fightIdStr,omitempty"`              // 战斗唯一id string类型
	UseMineCourt     bool       `protobuf:"varint,7,opt,name=useMineCourt,proto3" json:"useMineCourt,omitempty"`         // 是否使用自己的球场
	IsAbnormalResult bool       `protobuf:"varint,8,opt,name=isAbnormalResult,proto3" json:"isAbnormalResult,omitempty"` // 是否是异常结束
}

func (x *FightResultReq) Reset() {
	*x = FightResultReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fight_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightResultReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightResultReq) ProtoMessage() {}

func (x *FightResultReq) ProtoReflect() protoreflect.Message {
	mi := &file_fight_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightResultReq.ProtoReflect.Descriptor instead.
func (*FightResultReq) Descriptor() ([]byte, []int) {
	return file_fight_proto_rawDescGZIP(), []int{3}
}

func (x *FightResultReq) GetFightId() int64 {
	if x != nil {
		return x.FightId
	}
	return 0
}

func (x *FightResultReq) GetBattleType() int32 {
	if x != nil {
		return x.BattleType
	}
	return 0
}

func (x *FightResultReq) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *FightResultReq) GetStage() int32 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *FightResultReq) GetFighter() []*Fighter {
	if x != nil {
		return x.Fighter
	}
	return nil
}

func (x *FightResultReq) GetFightIdStr() string {
	if x != nil {
		return x.FightIdStr
	}
	return ""
}

func (x *FightResultReq) GetUseMineCourt() bool {
	if x != nil {
		return x.UseMineCourt
	}
	return false
}

func (x *FightResultReq) GetIsAbnormalResult() bool {
	if x != nil {
		return x.IsAbnormalResult
	}
	return false
}

// 设置约战房间状态
type SetEngageState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State int32 `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"` // 0 空闲   1 二缺一  2 满员
}

func (x *SetEngageState) Reset() {
	*x = SetEngageState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fight_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEngageState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEngageState) ProtoMessage() {}

func (x *SetEngageState) ProtoReflect() protoreflect.Message {
	mi := &file_fight_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEngageState.ProtoReflect.Descriptor instead.
func (*SetEngageState) Descriptor() ([]byte, []int) {
	return file_fight_proto_rawDescGZIP(), []int{4}
}

func (x *SetEngageState) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

var File_fight_proto protoreflect.FileDescriptor

var file_fight_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x66, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x44, 0x0a,
	0x08, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x67,
	0x68, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x69, 0x67, 0x68,
	0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x53, 0x74,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64,
	0x53, 0x74, 0x72, 0x22, 0x84, 0x02, 0x0a, 0x0a, 0x46, 0x69, 0x67, 0x68, 0x74, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x67, 0x6f, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x75, 0x6e, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x75, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x1a, 0x3b, 0x0a,
	0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9d, 0x02, 0x0a, 0x07, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21,
	0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x67, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x67, 0x61, 0x69,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x69, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2f, 0x0a,
	0x07, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0x3a,
	0x0a, 0x0c, 0x46, 0x61, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x88, 0x02, 0x0a, 0x0e, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x66, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x22, 0x0a, 0x07, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64,
	0x53, 0x74, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74,
	0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x4d, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x75, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65,
	0x4d, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x41,
	0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x67, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2a, 0x24, 0x0a,
	0x0a, 0x46, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x5f, 0x42, 0x55, 0x53,
	0x59, 0x10, 0x01, 0x2a, 0x2f, 0x0a, 0x0b, 0x45, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x5f, 0x54,
	0x57, 0x4f, 0x10, 0x02, 0x42, 0x0b, 0x5a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fight_proto_rawDescOnce sync.Once
	file_fight_proto_rawDescData = file_fight_proto_rawDesc
)

func file_fight_proto_rawDescGZIP() []byte {
	file_fight_proto_rawDescOnce.Do(func() {
		file_fight_proto_rawDescData = protoimpl.X.CompressGZIP(file_fight_proto_rawDescData)
	})
	return file_fight_proto_rawDescData
}

var file_fight_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_fight_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_fight_proto_goTypes = []interface{}{
	(FightState)(0),        // 0: FightState
	(EngageState)(0),       // 1: EngageState
	(*FightReq)(nil),       // 2: FightReq
	(*FightActor)(nil),     // 3: FightActor
	(*Fighter)(nil),        // 4: Fighter
	(*FightResultReq)(nil), // 5: FightResultReq
	(*SetEngageState)(nil), // 6: SetEngageState
	nil,                    // 7: FightActor.EventMapEntry
	nil,                    // 8: Fighter.FaceMapEntry
}
var file_fight_proto_depIdxs = []int32{
	7, // 0: FightActor.eventMap:type_name -> FightActor.EventMapEntry
	3, // 1: Fighter.actor:type_name -> FightActor
	8, // 2: Fighter.faceMap:type_name -> Fighter.FaceMapEntry
	4, // 3: FightResultReq.fighter:type_name -> Fighter
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_fight_proto_init() }
func file_fight_proto_init() {
	if File_fight_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fight_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FightReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fight_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FightActor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fight_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fighter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fight_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FightResultReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fight_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEngageState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fight_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fight_proto_goTypes,
		DependencyIndexes: file_fight_proto_depIdxs,
		EnumInfos:         file_fight_proto_enumTypes,
		MessageInfos:      file_fight_proto_msgTypes,
	}.Build()
	File_fight_proto = out.File
	file_fight_proto_rawDesc = nil
	file_fight_proto_goTypes = nil
	file_fight_proto_depIdxs = nil
}
