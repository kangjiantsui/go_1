// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.10.0
// source: battle_pass.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 请求赛券信息
type BattlePassInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonId int32 `protobuf:"varint,1,opt,name=seasonId,proto3" json:"seasonId,omitempty"` // 赛季id
}

func (x *BattlePassInfoReq) Reset() {
	*x = BattlePassInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_pass_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlePassInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePassInfoReq) ProtoMessage() {}

func (x *BattlePassInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_battle_pass_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePassInfoReq.ProtoReflect.Descriptor instead.
func (*BattlePassInfoReq) Descriptor() ([]byte, []int) {
	return file_battle_pass_proto_rawDescGZIP(), []int{0}
}

func (x *BattlePassInfoReq) GetSeasonId() int32 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

// 全部赛券数据
type BattlePassInfoMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfoMap     map[int32]*BattlePassInfo `protobuf:"bytes,1,rep,name=infoMap,proto3" json:"infoMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //  <赛季id，赛券数据>
	Stime       int64                     `protobuf:"varint,2,opt,name=stime,proto3" json:"stime,omitempty"`                                                                                             //  当前赛季剩余时间
	SeasonId    int32                     `protobuf:"varint,3,opt,name=seasonId,proto3" json:"seasonId,omitempty"`                                                                                       //  当前赛季id
	Double      int32                     `protobuf:"varint,4,opt,name=double,proto3" json:"double,omitempty"`                                                                                           // 双倍奖章个数
	MedalLimit  int32                     `protobuf:"varint,5,opt,name=medalLimit,proto3" json:"medalLimit,omitempty"`                                                                                   // 奖章个数限制
	RecoverFrom int64                     `protobuf:"varint,6,opt,name=recoverFrom,proto3" json:"recoverFrom,omitempty"`                                                                                 // 奖章限制恢复开始时间
}

func (x *BattlePassInfoMap) Reset() {
	*x = BattlePassInfoMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_pass_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlePassInfoMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePassInfoMap) ProtoMessage() {}

func (x *BattlePassInfoMap) ProtoReflect() protoreflect.Message {
	mi := &file_battle_pass_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePassInfoMap.ProtoReflect.Descriptor instead.
func (*BattlePassInfoMap) Descriptor() ([]byte, []int) {
	return file_battle_pass_proto_rawDescGZIP(), []int{1}
}

func (x *BattlePassInfoMap) GetInfoMap() map[int32]*BattlePassInfo {
	if x != nil {
		return x.InfoMap
	}
	return nil
}

func (x *BattlePassInfoMap) GetStime() int64 {
	if x != nil {
		return x.Stime
	}
	return 0
}

func (x *BattlePassInfoMap) GetSeasonId() int32 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *BattlePassInfoMap) GetDouble() int32 {
	if x != nil {
		return x.Double
	}
	return 0
}

func (x *BattlePassInfoMap) GetMedalLimit() int32 {
	if x != nil {
		return x.MedalLimit
	}
	return 0
}

func (x *BattlePassInfoMap) GetRecoverFrom() int64 {
	if x != nil {
		return x.RecoverFrom
	}
	return 0
}

// 赛券数据
type BattlePassInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonId       int32   `protobuf:"varint,1,opt,name=seasonId,proto3" json:"seasonId,omitempty"`                // 赛季id
	Level          int32   `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`                      // 赛券等级
	Medal          int32   `protobuf:"varint,3,opt,name=medal,proto3" json:"medal,omitempty"`                      // 当前等级奖章
	ReceivedFree   []int32 `protobuf:"varint,5,rep,packed,name=receivedFree,proto3" json:"receivedFree,omitempty"` // 已领取的免费奖励等级
	ReceivedPaid   []int32 `protobuf:"varint,6,rep,packed,name=receivedPaid,proto3" json:"receivedPaid,omitempty"` // 已领取的付费奖励等级
	Paid           int32   `protobuf:"varint,7,opt,name=paid,proto3" json:"paid,omitempty"`                        // `enum=0,1` [0]-未购买明星赛券 [1]已购买
	MaxLevelReward int32   `protobuf:"varint,8,opt,name=maxLevelReward,proto3" json:"maxLevelReward,omitempty"`    // 满级宝箱可领取数量
}

func (x *BattlePassInfo) Reset() {
	*x = BattlePassInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_pass_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlePassInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePassInfo) ProtoMessage() {}

func (x *BattlePassInfo) ProtoReflect() protoreflect.Message {
	mi := &file_battle_pass_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePassInfo.ProtoReflect.Descriptor instead.
func (*BattlePassInfo) Descriptor() ([]byte, []int) {
	return file_battle_pass_proto_rawDescGZIP(), []int{2}
}

func (x *BattlePassInfo) GetSeasonId() int32 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *BattlePassInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *BattlePassInfo) GetMedal() int32 {
	if x != nil {
		return x.Medal
	}
	return 0
}

func (x *BattlePassInfo) GetReceivedFree() []int32 {
	if x != nil {
		return x.ReceivedFree
	}
	return nil
}

func (x *BattlePassInfo) GetReceivedPaid() []int32 {
	if x != nil {
		return x.ReceivedPaid
	}
	return nil
}

func (x *BattlePassInfo) GetPaid() int32 {
	if x != nil {
		return x.Paid
	}
	return 0
}

func (x *BattlePassInfo) GetMaxLevelReward() int32 {
	if x != nil {
		return x.MaxLevelReward
	}
	return 0
}

// 领取赛券奖励
type BattlePassRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonId int32  `protobuf:"varint,1,opt,name=seasonId,proto3" json:"seasonId,omitempty"` // 赛季id
	Level    int32  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`       // 奖励等级
	Type     int32  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`         // `enum=1,2` [1]-免费奖励 [2]-付费奖励
	Belong   uint32 `protobuf:"varint,4,opt,name=belong,proto3" json:"belong,omitempty"`     // 球员id，如果奖励是球员熟练度
}

func (x *BattlePassRewardReq) Reset() {
	*x = BattlePassRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_pass_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlePassRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePassRewardReq) ProtoMessage() {}

func (x *BattlePassRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_battle_pass_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePassRewardReq.ProtoReflect.Descriptor instead.
func (*BattlePassRewardReq) Descriptor() ([]byte, []int) {
	return file_battle_pass_proto_rawDescGZIP(), []int{3}
}

func (x *BattlePassRewardReq) GetSeasonId() int32 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *BattlePassRewardReq) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *BattlePassRewardReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *BattlePassRewardReq) GetBelong() uint32 {
	if x != nil {
		return x.Belong
	}
	return 0
}

// 赛券领奖返回
type BattlePassRewardResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info         *BattlePassInfo  `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`                 // 更新后的数据
	RewardResult *RewardResultRes `protobuf:"bytes,2,opt,name=rewardResult,proto3" json:"rewardResult,omitempty"` //领奖结果
}

func (x *BattlePassRewardResp) Reset() {
	*x = BattlePassRewardResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_pass_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlePassRewardResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePassRewardResp) ProtoMessage() {}

func (x *BattlePassRewardResp) ProtoReflect() protoreflect.Message {
	mi := &file_battle_pass_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePassRewardResp.ProtoReflect.Descriptor instead.
func (*BattlePassRewardResp) Descriptor() ([]byte, []int) {
	return file_battle_pass_proto_rawDescGZIP(), []int{4}
}

func (x *BattlePassRewardResp) GetInfo() *BattlePassInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *BattlePassRewardResp) GetRewardResult() *RewardResultRes {
	if x != nil {
		return x.RewardResult
	}
	return nil
}

// 购买赛券
type BattlePassBuyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` // `enum` = 1,2 [1]-普通 [2]-大礼包
}

func (x *BattlePassBuyReq) Reset() {
	*x = BattlePassBuyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_pass_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlePassBuyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePassBuyReq) ProtoMessage() {}

func (x *BattlePassBuyReq) ProtoReflect() protoreflect.Message {
	mi := &file_battle_pass_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePassBuyReq.ProtoReflect.Descriptor instead.
func (*BattlePassBuyReq) Descriptor() ([]byte, []int) {
	return file_battle_pass_proto_rawDescGZIP(), []int{5}
}

func (x *BattlePassBuyReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

// 赛券消费返回
type BattlepassBuyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info         *BattlePassInfo  `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`                 //赛券信息
	RewardResult *RewardResultRes `protobuf:"bytes,2,opt,name=rewardResult,proto3" json:"rewardResult,omitempty"` //领奖结果
}

func (x *BattlepassBuyResp) Reset() {
	*x = BattlepassBuyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_pass_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlepassBuyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlepassBuyResp) ProtoMessage() {}

func (x *BattlepassBuyResp) ProtoReflect() protoreflect.Message {
	mi := &file_battle_pass_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlepassBuyResp.ProtoReflect.Descriptor instead.
func (*BattlepassBuyResp) Descriptor() ([]byte, []int) {
	return file_battle_pass_proto_rawDescGZIP(), []int{6}
}

func (x *BattlepassBuyResp) GetInfo() *BattlePassInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *BattlepassBuyResp) GetRewardResult() *RewardResultRes {
	if x != nil {
		return x.RewardResult
	}
	return nil
}

var File_battle_pass_proto protoreflect.FileDescriptor

var file_battle_pass_proto_rawDesc = []byte{
	0x0a, 0x11, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x2f, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0xa7, 0x02, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x12, 0x39, 0x0a, 0x07, 0x69, 0x6e, 0x66, 0x6f, 0x4d, 0x61,
	0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x69, 0x6e, 0x66, 0x6f, 0x4d, 0x61,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x65, 0x64, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x1a, 0x4b, 0x0a,
	0x0c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdc, 0x01, 0x0a, 0x0e, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6d, 0x65, 0x64, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x46, 0x72, 0x65, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x46, 0x72, 0x65, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x50, 0x61, 0x69, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x50, 0x61, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x69,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x73, 0x0a, 0x13, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x22, 0x71,
	0x0a, 0x14, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0c, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x26, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x42,
	0x75, 0x79, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x6e, 0x0a, 0x11, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x70, 0x61, 0x73, 0x73, 0x42, 0x75, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0b, 0x5a, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_battle_pass_proto_rawDescOnce sync.Once
	file_battle_pass_proto_rawDescData = file_battle_pass_proto_rawDesc
)

func file_battle_pass_proto_rawDescGZIP() []byte {
	file_battle_pass_proto_rawDescOnce.Do(func() {
		file_battle_pass_proto_rawDescData = protoimpl.X.CompressGZIP(file_battle_pass_proto_rawDescData)
	})
	return file_battle_pass_proto_rawDescData
}

var file_battle_pass_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_battle_pass_proto_goTypes = []interface{}{
	(*BattlePassInfoReq)(nil),    // 0: BattlePassInfoReq
	(*BattlePassInfoMap)(nil),    // 1: BattlePassInfoMap
	(*BattlePassInfo)(nil),       // 2: BattlePassInfo
	(*BattlePassRewardReq)(nil),  // 3: BattlePassRewardReq
	(*BattlePassRewardResp)(nil), // 4: BattlePassRewardResp
	(*BattlePassBuyReq)(nil),     // 5: BattlePassBuyReq
	(*BattlepassBuyResp)(nil),    // 6: BattlepassBuyResp
	nil,                          // 7: BattlePassInfoMap.InfoMapEntry
	(*RewardResultRes)(nil),      // 8: RewardResultRes
}
var file_battle_pass_proto_depIdxs = []int32{
	7, // 0: BattlePassInfoMap.infoMap:type_name -> BattlePassInfoMap.InfoMapEntry
	2, // 1: BattlePassRewardResp.info:type_name -> BattlePassInfo
	8, // 2: BattlePassRewardResp.rewardResult:type_name -> RewardResultRes
	2, // 3: BattlepassBuyResp.info:type_name -> BattlePassInfo
	8, // 4: BattlepassBuyResp.rewardResult:type_name -> RewardResultRes
	2, // 5: BattlePassInfoMap.InfoMapEntry.value:type_name -> BattlePassInfo
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_battle_pass_proto_init() }
func file_battle_pass_proto_init() {
	if File_battle_pass_proto != nil {
		return
	}
	file_item_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_battle_pass_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlePassInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_pass_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlePassInfoMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_pass_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlePassInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_pass_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlePassRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_pass_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlePassRewardResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_pass_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlePassBuyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_pass_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlepassBuyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_battle_pass_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_battle_pass_proto_goTypes,
		DependencyIndexes: file_battle_pass_proto_depIdxs,
		MessageInfos:      file_battle_pass_proto_msgTypes,
	}.Build()
	File_battle_pass_proto = out.File
	file_battle_pass_proto_rawDesc = nil
	file_battle_pass_proto_goTypes = nil
	file_battle_pass_proto_depIdxs = nil
}
