// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BaseClient is the client API for Base service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BaseClient interface {
	// 检查登录
	//
	// 在掉线后需要调用，否则会出现 407 need login
	CheckLogin(ctx context.Context, in *CheckLoginReq, opts ...grpc.CallOption) (*LoginRsp, error)
	// 登录
	//
	// 可能出现 405-407
	BaseLogin(ctx context.Context, in *BaseLoginReq, opts ...grpc.CallOption) (*LoginRsp, error)
	// 苹果登录 sign in with apple
	//
	// 可能出现 405-407
	AppleLogin(ctx context.Context, in *AppleLoginReq, opts ...grpc.CallOption) (*LoginRsp, error)
	// 微信登录
	//
	// 可能出现 405-407
	WechatLogin(ctx context.Context, in *WechatLoginReq, opts ...grpc.CallOption) (*LoginRsp, error)
	// QQ登录
	//
	// 可能出现 405-407
	QQLogin(ctx context.Context, in *QQLoginReq, opts ...grpc.CallOption) (*LoginRsp, error)
	// Ohayoo登录
	//
	// 可能出现 405-407
	OhayooLogin(ctx context.Context, in *OhayooLoginReq, opts ...grpc.CallOption) (*LoginRsp, error)
	// 心跳
	HeartBeat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// 获取所有公告
	GetNotice(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NoticeResp, error)
}

type baseClient struct {
	cc grpc.ClientConnInterface
}

func NewBaseClient(cc grpc.ClientConnInterface) BaseClient {
	return &baseClient{cc}
}

func (c *baseClient) CheckLogin(ctx context.Context, in *CheckLoginReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, "/Base/CheckLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) BaseLogin(ctx context.Context, in *BaseLoginReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, "/Base/BaseLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) AppleLogin(ctx context.Context, in *AppleLoginReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, "/Base/AppleLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) WechatLogin(ctx context.Context, in *WechatLoginReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, "/Base/WechatLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) QQLogin(ctx context.Context, in *QQLoginReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, "/Base/QQLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) OhayooLogin(ctx context.Context, in *OhayooLoginReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, "/Base/OhayooLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) HeartBeat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Base/HeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) GetNotice(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NoticeResp, error) {
	out := new(NoticeResp)
	err := c.cc.Invoke(ctx, "/Base/GetNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaseServer is the server API for Base service.
// All implementations must embed UnimplementedBaseServer
// for forward compatibility
type BaseServer interface {
	// 检查登录
	//
	// 在掉线后需要调用，否则会出现 407 need login
	CheckLogin(context.Context, *CheckLoginReq) (*LoginRsp, error)
	// 登录
	//
	// 可能出现 405-407
	BaseLogin(context.Context, *BaseLoginReq) (*LoginRsp, error)
	// 苹果登录 sign in with apple
	//
	// 可能出现 405-407
	AppleLogin(context.Context, *AppleLoginReq) (*LoginRsp, error)
	// 微信登录
	//
	// 可能出现 405-407
	WechatLogin(context.Context, *WechatLoginReq) (*LoginRsp, error)
	// QQ登录
	//
	// 可能出现 405-407
	QQLogin(context.Context, *QQLoginReq) (*LoginRsp, error)
	// Ohayoo登录
	//
	// 可能出现 405-407
	OhayooLogin(context.Context, *OhayooLoginReq) (*LoginRsp, error)
	// 心跳
	HeartBeat(context.Context, *Empty) (*Empty, error)
	// 获取所有公告
	GetNotice(context.Context, *Empty) (*NoticeResp, error)
	mustEmbedUnimplementedBaseServer()
}

// UnimplementedBaseServer must be embedded to have forward compatible implementations.
type UnimplementedBaseServer struct {
}

func (UnimplementedBaseServer) CheckLogin(context.Context, *CheckLoginReq) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLogin not implemented")
}
func (UnimplementedBaseServer) BaseLogin(context.Context, *BaseLoginReq) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BaseLogin not implemented")
}
func (UnimplementedBaseServer) AppleLogin(context.Context, *AppleLoginReq) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppleLogin not implemented")
}
func (UnimplementedBaseServer) WechatLogin(context.Context, *WechatLoginReq) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatLogin not implemented")
}
func (UnimplementedBaseServer) QQLogin(context.Context, *QQLoginReq) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QQLogin not implemented")
}
func (UnimplementedBaseServer) OhayooLogin(context.Context, *OhayooLoginReq) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OhayooLogin not implemented")
}
func (UnimplementedBaseServer) HeartBeat(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (UnimplementedBaseServer) GetNotice(context.Context, *Empty) (*NoticeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotice not implemented")
}
func (UnimplementedBaseServer) mustEmbedUnimplementedBaseServer() {}

// UnsafeBaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BaseServer will
// result in compilation errors.
type UnsafeBaseServer interface {
	mustEmbedUnimplementedBaseServer()
}

func RegisterBaseServer(s grpc.ServiceRegistrar, srv BaseServer) {
	s.RegisterService(&Base_ServiceDesc, srv)
}

func _Base_CheckLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).CheckLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Base/CheckLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).CheckLogin(ctx, req.(*CheckLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_BaseLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).BaseLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Base/BaseLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).BaseLogin(ctx, req.(*BaseLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_AppleLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppleLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).AppleLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Base/AppleLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).AppleLogin(ctx, req.(*AppleLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_WechatLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).WechatLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Base/WechatLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).WechatLogin(ctx, req.(*WechatLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_QQLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QQLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).QQLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Base/QQLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).QQLogin(ctx, req.(*QQLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_OhayooLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OhayooLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).OhayooLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Base/OhayooLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).OhayooLogin(ctx, req.(*OhayooLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Base/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).HeartBeat(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_GetNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).GetNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Base/GetNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).GetNotice(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Base_ServiceDesc is the grpc.ServiceDesc for Base service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Base_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Base",
	HandlerType: (*BaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckLogin",
			Handler:    _Base_CheckLogin_Handler,
		},
		{
			MethodName: "BaseLogin",
			Handler:    _Base_BaseLogin_Handler,
		},
		{
			MethodName: "AppleLogin",
			Handler:    _Base_AppleLogin_Handler,
		},
		{
			MethodName: "WechatLogin",
			Handler:    _Base_WechatLogin_Handler,
		},
		{
			MethodName: "QQLogin",
			Handler:    _Base_QQLogin_Handler,
		},
		{
			MethodName: "OhayooLogin",
			Handler:    _Base_OhayooLogin_Handler,
		},
		{
			MethodName: "HeartBeat",
			Handler:    _Base_HeartBeat_Handler,
		},
		{
			MethodName: "GetNotice",
			Handler:    _Base_GetNotice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_base.proto",
}
