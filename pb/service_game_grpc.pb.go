// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameClient is the client API for Game service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameClient interface {
	// 一次发多个请求
	//
	// 限制为非登陆接口
	GroupMsg(ctx context.Context, in *GroupReq, opts ...grpc.CallOption) (*GroupRsp, error)
	// 获取玩家主界面数据
	PlayerBase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Player, error)
	// 球员升级
	ActorUpdate(ctx context.Context, in *ActorUpdateReq, opts ...grpc.CallOption) (*Actor, error)
	// 设置球员组
	//
	// code:200/400/500/501
	ActorGroup(ctx context.Context, in *ActorGroupReq, opts ...grpc.CallOption) (*ActorInfo, error)
	// 设置显示球员
	ActorShow(ctx context.Context, in *ActorShowReq, opts ...grpc.CallOption) (*ActorInfo, error)
	// 获得球员产出状态
	GetActorOutPutStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ActorOutPutStatus, error)
	// 获取宝箱可获得的球员
	GetActorsAvailable(ctx context.Context, in *ActorsAvailableReq, opts ...grpc.CallOption) (*ActorsAvailableResp, error)
	// 获取宝箱可获得的球员
	GetActorsCanBuy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ActorsAvailableResp, error)
	// 获取球员产出途径与当前途径倒计时
	GetActorStatusAndTime(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ActorStatusAndTime, error)
	// 获取赛季挑战赛数据
	Tour(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TourInfo, error)
	// 领取赛季挑战赛奖励
	TourReward(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TourRewardResp, error)
	// 添加赛季挑战赛场次记录
	TourAdd(ctx context.Context, in *TourUpdate, opts ...grpc.CallOption) (*TourInfo, error)
	// 获取天梯玩法数据
	Ladder(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LadderInfo, error)
	// 领取天梯奖励
	LadderReward(ctx context.Context, in *LadderRewardReq, opts ...grpc.CallOption) (*LadderRewardResp, error)
	// 战斗结算
	FightResult(ctx context.Context, in *FightResultReq, opts ...grpc.CallOption) (*RewardResultRes, error)
	// 战斗锁定请求
	FightCheck(ctx context.Context, in *MatchReq, opts ...grpc.CallOption) (*MatchParamsResp, error)
	// 战斗开始消息
	FightRequest(ctx context.Context, in *FightReq, opts ...grpc.CallOption) (*Empty, error)
	// 设置约战房间状态
	EngageStateSet(ctx context.Context, in *SetEngageState, opts ...grpc.CallOption) (*Empty, error)
	// 获取赛券信息
	BattlePass(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BattlePassInfoMap, error)
	// 领取赛券奖励
	BattlePassReward(ctx context.Context, in *BattlePassRewardReq, opts ...grpc.CallOption) (*BattlePassRewardResp, error)
	// 购买明星赛券
	BattlePassBuy(ctx context.Context, in *BattlePassBuyReq, opts ...grpc.CallOption) (*BattlepassBuyResp, error)
	// 消耗宝石提升赛券到下一等级
	BattlePassLevelUp(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BattlepassBuyResp, error)
	// 获取球星之路信息
	Gloryroad(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GloryroadInfo, error)
	// 球星之路领取奖励
	GloryroadReward(ctx context.Context, in *GloryroadRewardReq, opts ...grpc.CallOption) (*GloryroadRewardResp, error)
	// 球星之路上赛季球员杯数
	GloryroadLastSeasonActorCupGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GloryroadLastSeasonActorCup, error)
	// 球星之路领取赛季奖励
	GloryroadSeasonReward(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GloryroadRewardResp, error)
	// 获取任务列表
	MissionGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MissionInfo, error)
	// 获取解锁系统
	ControlGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OpenControlInfo, error)
	// 获取商店信息
	ShopGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ShopInfoResp, error)
	// 购买商品请求
	ShopBuy(ctx context.Context, in *ShopBuyReq, opts ...grpc.CallOption) (*ShopBuyResp, error)
	// 商店刷新
	ShopRefresh(ctx context.Context, in *ShopRefreshReq, opts ...grpc.CallOption) (*ShopRefreshResp, error)
	// 请求新手引导信息
	GuideGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GuideInfoResp, error)
	// 记录新手引导信息
	GuideMark(ctx context.Context, in *GuideMarkReq, opts ...grpc.CallOption) (*GuideInfoResp, error)
	// 记录弱引导信息
	WeakGuideMark(ctx context.Context, in *WeakGuideReq, opts ...grpc.CallOption) (*WeakGuideResp, error)
	// 请求弱引导信息
	WeakGuideInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WeakGuideResp, error)
	// 记录UI弱引导
	WeakUIGuideMark(ctx context.Context, in *UIWeakGuideMarkReq, opts ...grpc.CallOption) (*GuideInfoResp, error)
	// 玩家个人信息
	PlayerPersonal(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*PlayerPersonalResp, error)
	// 修改头像
	PlayerAvatar(ctx context.Context, in *PlayerAvatarReq, opts ...grpc.CallOption) (*PlayerStatic, error)
	// 修改昵称
	PlayerName(ctx context.Context, in *PlayerNameReq, opts ...grpc.CallOption) (*PlayerRenameResp, error)
	// 换头像框
	ModifyAvatarFrame(ctx context.Context, in *ModifyAvatarFrameReq, opts ...grpc.CallOption) (*PlayerStatic, error)
	// 换称号
	ModifyTitle(ctx context.Context, in *ModifyTitleReq, opts ...grpc.CallOption) (*PlayerStatic, error)
	// 换炫彩名
	ModifyColorful(ctx context.Context, in *ModifyColorfulReq, opts ...grpc.CallOption) (*PlayerStatic, error)
	// 获取生涯记录
	RecordGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RecordInfo, error)
	// 获取皮肤信息
	SkinGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SkinInfo, error)
	// 皮肤操作，装备 卸下 切换
	SkinEquip(ctx context.Context, in *SkinReq, opts ...grpc.CallOption) (*SkinEquipInfo, error)
	// 装备球员技能
	SkillEquip(ctx context.Context, in *ActorSkillReq, opts ...grpc.CallOption) (*Actor, error)
	// 审批好友申请
	FriendRatify(ctx context.Context, in *FriendReqRatify, opts ...grpc.CallOption) (*FriendInfoResp, error)
	// 添加好友
	FriendAdd(ctx context.Context, in *FriendAddReq, opts ...grpc.CallOption) (*RecommendFriends, error)
	// 获取好友信息
	FriendInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FriendInfoResp, error)
	// 刷新推荐列表
	FriendRefresh(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RecommendFriends, error)
	// 删除好友
	FriendDelete(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Friends, error)
	// 接受分享
	AcceptSharing(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*InviteInfo, error)
	// 获取玩家匹配参数
	GetMatchParams(ctx context.Context, in *MatchReq, opts ...grpc.CallOption) (*MatchParamsResp, error)
	// 获取分享邀请信息
	GetInviteInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InviteInfo, error)
	// 领取分享邀请奖励返回
	InviteReward(ctx context.Context, in *InviteRewardReq, opts ...grpc.CallOption) (*InviteRewardResp, error)
	// 获取所有邮件
	GetMails(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MailInfo, error)
	// 领取邮件奖励
	GetMailRewards(ctx context.Context, in *DealMailReq, opts ...grpc.CallOption) (*DealMailResult, error)
	// 设置邮件读取
	SetMailRead(ctx context.Context, in *DealMailReq, opts ...grpc.CallOption) (*ReadOrDeleteMailResult, error)
	// 删除邮件
	DeleteMails(ctx context.Context, in *DealMailReq, opts ...grpc.CallOption) (*ReadOrDeleteMailResult, error)
	// 观看广告完成
	AdvertiseFinish(ctx context.Context, in *AdvertiseFinishReq, opts ...grpc.CallOption) (*AdvertiseFinishResp, error)
	// 获取广告信息
	GetAdvertiseInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AdvertiseInfo, error)
	// 领取看广告奖励
	AdvertiseReward(ctx context.Context, in *AdvertiseRewardReq, opts ...grpc.CallOption) (*AdvertiseRewardResp, error)
	// 获取好友约战列表新
	GetFriendInviteBattleList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FriendInviteBattleListResp, error)
	// 获取好友约战列表
	GetFriendYuezhanList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FriendYuezhanListResp, error)
	// 获取七日签到信息
	GetSignIn7Day(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SignIn7DayInfo, error)
	// 七日签到，签到
	SignIn7Day(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SingIn7DeyResp, error)
	// 绑定激活码
	BindAC(ctx context.Context, in *BindActivateCode, opts ...grpc.CallOption) (*Empty, error)
	// 领取绑定账号奖励
	BindReward(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ItemUpdateResult, error)
	// Ohayoo账号绑定
	//
	OhayooAccountBind(ctx context.Context, in *OhayooBind, opts ...grpc.CallOption) (*LoginRsp, error)
	// 开始看广告
	AdvertiseBegin(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AdvertiseBeginResp, error)
	// 使用兑换码
	UseCDKeyReq(ctx context.Context, in *UseCDKey, opts ...grpc.CallOption) (*ItemUpdateResult, error)
	// 是否领取加群有礼的奖励
	HasHakenGroupReward(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HasTakenReward, error)
	// 获取主界面信息
	GetMainInterfaceMsg(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MainInterface, error)
	// 获得聊天登录信息
	GetChatLoginInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChatLoginResp, error)
	// 获取用户userid
	GetUserChatUserId(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*SingleChatUserId, error)
	// 批量获取用户userid
	GetMultiUserChatUserId(ctx context.Context, in *MultiSingleChatUserId, opts ...grpc.CallOption) (*MultiSingleChatUserIdResp, error)
	// 获取成就信息
	GetAchievementInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AchievementInfo, error)
	// 领取成就奖励
	AchievementReward(ctx context.Context, in *AchievementRewardReq, opts ...grpc.CallOption) (*AchievementRewardResp, error)
	// 客户端触发的成就事件,如发起分享/开关音乐
	AchievementEvent(ctx context.Context, in *AchievementEventReq, opts ...grpc.CallOption) (*AchievementInfo, error)
	// 获取所有表情信息
	GetAllFaceInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FaceInfo, error)
	// 设置表情栏位 成功返回200
	SetFaceSlot(ctx context.Context, in *FaceSlot, opts ...grpc.CallOption) (*FaceInfo, error)
	// 获取每日签到信息
	DailySignInInfoGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DailySignInInfo, error)
	// 每日签到签到
	DailySignIn(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SignInResp, error)
	// 每日签到开始看广告
	DailySignInBeginAdvertise(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AdvertiseId, error)
	// 每日签到看广告完成
	DailySignInFinishAdvertise(ctx context.Context, in *AdvertiseId, opts ...grpc.CallOption) (*DailySignInInfo, error)
	// 每日签到补签
	DailySignInReissue(ctx context.Context, in *ReissueReq, opts ...grpc.CallOption) (*SignInResp, error)
	// 领取累计签到奖励
	DailySignInReceiveCumulativeReward(ctx context.Context, in *ReceiveCumulativeRewardReq, opts ...grpc.CallOption) (*SignInResp, error)
	// 获取服务器当前时间戳
	DailySignInGetTimestamp(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Timestamp, error)
	// 获取星辉信息
	GetStarInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StarInfoResp, error)
	// 领取星辉奖励
	GetStarReward(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ItemUpdateResult, error)
	// 获取排行榜信息
	LeaderboardGet(ctx context.Context, in *LeaderboardReq, opts ...grpc.CallOption) (*LeaderboardInfo, error)
	// 获取排行榜定位信息
	LeaderboardLocate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AreaCodeResp, error)
	// 排行榜重新定位
	LeaderboardRelocate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AreaCodeResp, error)
	// 获取约战推荐列表
	GetEngageRecommendList(ctx context.Context, in *EngageRecommendReq, opts ...grpc.CallOption) (*EngageRecommendList, error)
	// 领取首充礼包
	ReceiveFirstRechargeGiftPack(ctx context.Context, in *ReceiveFirstRechargeGiftPackReq, opts ...grpc.CallOption) (*GiftPackResp, error)
	// 获取礼包信息
	GetGiftPackInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GiftPackInfo, error)
	// 购买皮肤礼包
	BuySkinGiftPack(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GiftPackResp, error)
	// 领取迎新礼包
	NewBieGiftReward(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GiftPackResp, error)
	// 获取运营活动信息
	GetOperationalActivity(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OperationalActivityInfo, error)
	// 获取路人王信息
	GetKingRoundInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*KingRoundInfo, error)
	// 领取路人王卡片奖励
	GetKingRoundCard(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OptKRInfo, error)
	// 领取路人王站点奖励
	GetKingRoundReward(ctx context.Context, in *TakeKingRoundReward, opts ...grpc.CallOption) (*OptKRInfo, error)
	// 报名
	SignKingRound(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OptKRInfo, error)
	// 路人王锁
	LockKingRound(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*KingRoundInfo, error)
	// 获取个性化信息
	PersonalityGetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PersonalityInfo, error)
	// 开始看转盘广告
	TurntableBeginAd(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AdBeginResp, error)
	// 完成看转盘广告
	TurntableFinishAd(ctx context.Context, in *AdFinishReq, opts ...grpc.CallOption) (*TurntableInfo, error)
	// 玩转盘
	PlayTurntable(ctx context.Context, in *TurntableReq, opts ...grpc.CallOption) (*TurntableResp, error)
	// 获取转盘信息
	GetTurntableInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TurntableInfo, error)
	// 获取ohayoo充值订单信息
	GetOhayooOrderInfo(ctx context.Context, in *PayOrderReq, opts ...grpc.CallOption) (*OhayooExternalOrderPayload, error)
	// 获取苹果充值订单信息
	GetAppStoreOrderInfo(ctx context.Context, in *PayOrderReq, opts ...grpc.CallOption) (*AppstoreOrderRsp, error)
	// 商店验证订单
	AppStoreVerify(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyRsp, error)
	// 获取wechat充值订单信息
	GetWechatOrderInfo(ctx context.Context, in *PayOrderReq, opts ...grpc.CallOption) (*WechatExternalOrderPayload, error)
	// 获取alipay充值订单信息
	GetAlipayOrderInfo(ctx context.Context, in *PayOrderReq, opts ...grpc.CallOption) (*AliPayExternalOrderPayload, error)
	// 创建二维码订单
	CreateQRCodeOrder(ctx context.Context, in *PayOrderReq, opts ...grpc.CallOption) (*QRCodePayOrderPayload, error)
	// 查询订单发货信息
	CheckPayDelivery(ctx context.Context, in *CheckOrderDelivery, opts ...grpc.CallOption) (*CheckOrderDeliveryRet, error)
	ClientSetOrderStatus(ctx context.Context, in *ClientOrderStatus, opts ...grpc.CallOption) (*Empty, error)
	// 查询玩家能否购买
	GetCanPay(ctx context.Context, in *CanPay, opts ...grpc.CallOption) (*Empty, error)
	// 设置实名制信息
	SetRealNameInfo(ctx context.Context, in *RealNameInfo, opts ...grpc.CallOption) (*Empty, error)
	// 获取实名制信息
	GetRealNameInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RealNameInfo, error)
	// 领取实名制奖励
	RealNameReward(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RealNameRewardResp, error)
	// 实名制转发 确认实名制
	RealNameQueryRedirect(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RealNameQueryRedirectGoRet, error)
	// 实名制转发 认证实名制
	RealNameCheckRedirectReq(ctx context.Context, in *RealNameCheckRedirect, opts ...grpc.CallOption) (*RealNameCheckRedirectRet, error)
	// 获取新球员活动信息
	GetNewActorActivityInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NewActorActivity, error)
	// 设置新球员活动通关
	SetNewActorActivityPass(ctx context.Context, in *IntPair, opts ...grpc.CallOption) (*NewActorActivityUpdate, error)
	// 领取新球员活动奖励
	GetNewActorActivityReward(ctx context.Context, in *IntPair, opts ...grpc.CallOption) (*NewActorActivityUpdate, error)
	// 新手任务信息
	NoviceTaskGetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NoviceTaskInfo, error)
	// 新手任务领奖
	NoviceTaskReward(ctx context.Context, in *NoviceTaskRewardReq, opts ...grpc.CallOption) (*NoviceTaskRewardResp, error)
	// 新手任务重训练
	NoviceTaskRemake(ctx context.Context, in *NoviceTaskRemakeReq, opts ...grpc.CallOption) (*NoviceTaskInfo, error)
	// 新手任务领取每日奖励
	NoviceDailyReward(ctx context.Context, in *NoviceDailyRewardReq, opts ...grpc.CallOption) (*NoviceTaskRewardResp, error)
	// 活动签到,签到
	ActivitySignIn(ctx context.Context, in *ActivitySignInReq, opts ...grpc.CallOption) (*ActivitySignInResp, error)
	// 活动签到,获取玩家信息
	ActivitySignInGetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ActivitySignInInfo, error)
	// 活动签到,领取额外奖励
	ActivitySignInReward(ctx context.Context, in *ActivitySignInReq, opts ...grpc.CallOption) (*ActivitySignInResp, error)
	// 千金一刻,活动信息
	CoinTimeGetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CoinTimeInfo, error)
	// 请求道具获取记录
	ItemRecordReq(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ItemRecord, error)
	// 扭蛋信息
	EggGetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*EggInfo, error)
	// 扭蛋玩
	EggPlay(ctx context.Context, in *PlayReq, opts ...grpc.CallOption) (*PlayResp, error)
	// 扭蛋幸运点兑换
	EggExchange(ctx context.Context, in *ExchangeReq, opts ...grpc.CallOption) (*ExchangeResp, error)
	// 扭蛋买票
	EggBuy(ctx context.Context, in *BuyReq, opts ...grpc.CallOption) (*BuyResp, error)
	// 获取球场信息
	GetCourtInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CourtInfo, error)
	// 购买球场装饰
	BuyCourtDecoration(ctx context.Context, in *BuyCourtDecoratorOpt, opts ...grpc.CallOption) (*CourtBuyRet, error)
	// 装载球场装饰
	LoadCourtDecoration(ctx context.Context, in *CourtDecoratorOpt, opts ...grpc.CallOption) (*Empty, error)
	// 卸载球场装饰
	UnloadCourtDecoration(ctx context.Context, in *CourtDecoratorOpt, opts ...grpc.CallOption) (*Empty, error)
	// 修改使用的球场
	ChangeCourtUsed(ctx context.Context, in *CourtChange, opts ...grpc.CallOption) (*CourtInfo, error)
	// 球场碎片补齐
	FillCourtChip(ctx context.Context, in *FillCourtChipReq, opts ...grpc.CallOption) (*ItemUpdateResult, error)
	// 给自己添加道具
	AddItemToMe(ctx context.Context, in *ItemUpdate, opts ...grpc.CallOption) (*ItemUpdateResult, error)
	// 给自己服务器改时间
	AddTimeToMe(ctx context.Context, in *SetTimeOffsetData, opts ...grpc.CallOption) (*SetTimeOffsetRes, error)
	// 修改自己服务器所有系统的时间
	AddAllTimeToMe(ctx context.Context, in *SetTimeOffsetData, opts ...grpc.CallOption) (*SetTimeOffsetRes, error)
	// 获取特权信息
	GetPrivilegeInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PrivilegeInfo, error)
	// 商店新信息
	ShopNewGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ShopNewInfo, error)
	// 商店新买
	ShopNewBuy(ctx context.Context, in *ShopNewBuyReq, opts ...grpc.CallOption) (*ShopNewBuyResp, error)
	// 商店新刷
	ShopNewRefresh(ctx context.Context, in *ShopNewRefreshReq, opts ...grpc.CallOption) (*ShopNewRefreshResp, error)
	// 给自己加全部球员和技能
	AddAllActorToMe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type gameClient struct {
	cc grpc.ClientConnInterface
}

func NewGameClient(cc grpc.ClientConnInterface) GameClient {
	return &gameClient{cc}
}

func (c *gameClient) GroupMsg(ctx context.Context, in *GroupReq, opts ...grpc.CallOption) (*GroupRsp, error) {
	out := new(GroupRsp)
	err := c.cc.Invoke(ctx, "/Game/GroupMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) PlayerBase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Player, error) {
	out := new(Player)
	err := c.cc.Invoke(ctx, "/Game/PlayerBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) ActorUpdate(ctx context.Context, in *ActorUpdateReq, opts ...grpc.CallOption) (*Actor, error) {
	out := new(Actor)
	err := c.cc.Invoke(ctx, "/Game/ActorUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) ActorGroup(ctx context.Context, in *ActorGroupReq, opts ...grpc.CallOption) (*ActorInfo, error) {
	out := new(ActorInfo)
	err := c.cc.Invoke(ctx, "/Game/ActorGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) ActorShow(ctx context.Context, in *ActorShowReq, opts ...grpc.CallOption) (*ActorInfo, error) {
	out := new(ActorInfo)
	err := c.cc.Invoke(ctx, "/Game/ActorShow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetActorOutPutStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ActorOutPutStatus, error) {
	out := new(ActorOutPutStatus)
	err := c.cc.Invoke(ctx, "/Game/GetActorOutPutStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetActorsAvailable(ctx context.Context, in *ActorsAvailableReq, opts ...grpc.CallOption) (*ActorsAvailableResp, error) {
	out := new(ActorsAvailableResp)
	err := c.cc.Invoke(ctx, "/Game/GetActorsAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetActorsCanBuy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ActorsAvailableResp, error) {
	out := new(ActorsAvailableResp)
	err := c.cc.Invoke(ctx, "/Game/GetActorsCanBuy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetActorStatusAndTime(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ActorStatusAndTime, error) {
	out := new(ActorStatusAndTime)
	err := c.cc.Invoke(ctx, "/Game/GetActorStatusAndTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) Tour(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TourInfo, error) {
	out := new(TourInfo)
	err := c.cc.Invoke(ctx, "/Game/Tour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) TourReward(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TourRewardResp, error) {
	out := new(TourRewardResp)
	err := c.cc.Invoke(ctx, "/Game/TourReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) TourAdd(ctx context.Context, in *TourUpdate, opts ...grpc.CallOption) (*TourInfo, error) {
	out := new(TourInfo)
	err := c.cc.Invoke(ctx, "/Game/TourAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) Ladder(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LadderInfo, error) {
	out := new(LadderInfo)
	err := c.cc.Invoke(ctx, "/Game/Ladder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) LadderReward(ctx context.Context, in *LadderRewardReq, opts ...grpc.CallOption) (*LadderRewardResp, error) {
	out := new(LadderRewardResp)
	err := c.cc.Invoke(ctx, "/Game/LadderReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) FightResult(ctx context.Context, in *FightResultReq, opts ...grpc.CallOption) (*RewardResultRes, error) {
	out := new(RewardResultRes)
	err := c.cc.Invoke(ctx, "/Game/FightResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) FightCheck(ctx context.Context, in *MatchReq, opts ...grpc.CallOption) (*MatchParamsResp, error) {
	out := new(MatchParamsResp)
	err := c.cc.Invoke(ctx, "/Game/FightCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) FightRequest(ctx context.Context, in *FightReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Game/FightRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) EngageStateSet(ctx context.Context, in *SetEngageState, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Game/EngageStateSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) BattlePass(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BattlePassInfoMap, error) {
	out := new(BattlePassInfoMap)
	err := c.cc.Invoke(ctx, "/Game/BattlePass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) BattlePassReward(ctx context.Context, in *BattlePassRewardReq, opts ...grpc.CallOption) (*BattlePassRewardResp, error) {
	out := new(BattlePassRewardResp)
	err := c.cc.Invoke(ctx, "/Game/BattlePassReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) BattlePassBuy(ctx context.Context, in *BattlePassBuyReq, opts ...grpc.CallOption) (*BattlepassBuyResp, error) {
	out := new(BattlepassBuyResp)
	err := c.cc.Invoke(ctx, "/Game/BattlePassBuy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) BattlePassLevelUp(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BattlepassBuyResp, error) {
	out := new(BattlepassBuyResp)
	err := c.cc.Invoke(ctx, "/Game/BattlePassLevelUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) Gloryroad(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GloryroadInfo, error) {
	out := new(GloryroadInfo)
	err := c.cc.Invoke(ctx, "/Game/Gloryroad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GloryroadReward(ctx context.Context, in *GloryroadRewardReq, opts ...grpc.CallOption) (*GloryroadRewardResp, error) {
	out := new(GloryroadRewardResp)
	err := c.cc.Invoke(ctx, "/Game/GloryroadReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GloryroadLastSeasonActorCupGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GloryroadLastSeasonActorCup, error) {
	out := new(GloryroadLastSeasonActorCup)
	err := c.cc.Invoke(ctx, "/Game/GloryroadLastSeasonActorCupGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GloryroadSeasonReward(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GloryroadRewardResp, error) {
	out := new(GloryroadRewardResp)
	err := c.cc.Invoke(ctx, "/Game/GloryroadSeasonReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) MissionGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MissionInfo, error) {
	out := new(MissionInfo)
	err := c.cc.Invoke(ctx, "/Game/MissionGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) ControlGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OpenControlInfo, error) {
	out := new(OpenControlInfo)
	err := c.cc.Invoke(ctx, "/Game/ControlGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) ShopGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ShopInfoResp, error) {
	out := new(ShopInfoResp)
	err := c.cc.Invoke(ctx, "/Game/ShopGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) ShopBuy(ctx context.Context, in *ShopBuyReq, opts ...grpc.CallOption) (*ShopBuyResp, error) {
	out := new(ShopBuyResp)
	err := c.cc.Invoke(ctx, "/Game/ShopBuy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) ShopRefresh(ctx context.Context, in *ShopRefreshReq, opts ...grpc.CallOption) (*ShopRefreshResp, error) {
	out := new(ShopRefreshResp)
	err := c.cc.Invoke(ctx, "/Game/ShopRefresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GuideGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GuideInfoResp, error) {
	out := new(GuideInfoResp)
	err := c.cc.Invoke(ctx, "/Game/GuideGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GuideMark(ctx context.Context, in *GuideMarkReq, opts ...grpc.CallOption) (*GuideInfoResp, error) {
	out := new(GuideInfoResp)
	err := c.cc.Invoke(ctx, "/Game/GuideMark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) WeakGuideMark(ctx context.Context, in *WeakGuideReq, opts ...grpc.CallOption) (*WeakGuideResp, error) {
	out := new(WeakGuideResp)
	err := c.cc.Invoke(ctx, "/Game/WeakGuideMark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) WeakGuideInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WeakGuideResp, error) {
	out := new(WeakGuideResp)
	err := c.cc.Invoke(ctx, "/Game/WeakGuideInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) WeakUIGuideMark(ctx context.Context, in *UIWeakGuideMarkReq, opts ...grpc.CallOption) (*GuideInfoResp, error) {
	out := new(GuideInfoResp)
	err := c.cc.Invoke(ctx, "/Game/WeakUIGuideMark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) PlayerPersonal(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*PlayerPersonalResp, error) {
	out := new(PlayerPersonalResp)
	err := c.cc.Invoke(ctx, "/Game/PlayerPersonal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) PlayerAvatar(ctx context.Context, in *PlayerAvatarReq, opts ...grpc.CallOption) (*PlayerStatic, error) {
	out := new(PlayerStatic)
	err := c.cc.Invoke(ctx, "/Game/PlayerAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) PlayerName(ctx context.Context, in *PlayerNameReq, opts ...grpc.CallOption) (*PlayerRenameResp, error) {
	out := new(PlayerRenameResp)
	err := c.cc.Invoke(ctx, "/Game/PlayerName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) ModifyAvatarFrame(ctx context.Context, in *ModifyAvatarFrameReq, opts ...grpc.CallOption) (*PlayerStatic, error) {
	out := new(PlayerStatic)
	err := c.cc.Invoke(ctx, "/Game/ModifyAvatarFrame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) ModifyTitle(ctx context.Context, in *ModifyTitleReq, opts ...grpc.CallOption) (*PlayerStatic, error) {
	out := new(PlayerStatic)
	err := c.cc.Invoke(ctx, "/Game/ModifyTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) ModifyColorful(ctx context.Context, in *ModifyColorfulReq, opts ...grpc.CallOption) (*PlayerStatic, error) {
	out := new(PlayerStatic)
	err := c.cc.Invoke(ctx, "/Game/ModifyColorful", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) RecordGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RecordInfo, error) {
	out := new(RecordInfo)
	err := c.cc.Invoke(ctx, "/Game/RecordGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) SkinGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SkinInfo, error) {
	out := new(SkinInfo)
	err := c.cc.Invoke(ctx, "/Game/SkinGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) SkinEquip(ctx context.Context, in *SkinReq, opts ...grpc.CallOption) (*SkinEquipInfo, error) {
	out := new(SkinEquipInfo)
	err := c.cc.Invoke(ctx, "/Game/SkinEquip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) SkillEquip(ctx context.Context, in *ActorSkillReq, opts ...grpc.CallOption) (*Actor, error) {
	out := new(Actor)
	err := c.cc.Invoke(ctx, "/Game/SkillEquip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) FriendRatify(ctx context.Context, in *FriendReqRatify, opts ...grpc.CallOption) (*FriendInfoResp, error) {
	out := new(FriendInfoResp)
	err := c.cc.Invoke(ctx, "/Game/FriendRatify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) FriendAdd(ctx context.Context, in *FriendAddReq, opts ...grpc.CallOption) (*RecommendFriends, error) {
	out := new(RecommendFriends)
	err := c.cc.Invoke(ctx, "/Game/FriendAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) FriendInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FriendInfoResp, error) {
	out := new(FriendInfoResp)
	err := c.cc.Invoke(ctx, "/Game/FriendInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) FriendRefresh(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RecommendFriends, error) {
	out := new(RecommendFriends)
	err := c.cc.Invoke(ctx, "/Game/FriendRefresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) FriendDelete(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*Friends, error) {
	out := new(Friends)
	err := c.cc.Invoke(ctx, "/Game/FriendDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) AcceptSharing(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*InviteInfo, error) {
	out := new(InviteInfo)
	err := c.cc.Invoke(ctx, "/Game/AcceptSharing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetMatchParams(ctx context.Context, in *MatchReq, opts ...grpc.CallOption) (*MatchParamsResp, error) {
	out := new(MatchParamsResp)
	err := c.cc.Invoke(ctx, "/Game/GetMatchParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetInviteInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InviteInfo, error) {
	out := new(InviteInfo)
	err := c.cc.Invoke(ctx, "/Game/GetInviteInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) InviteReward(ctx context.Context, in *InviteRewardReq, opts ...grpc.CallOption) (*InviteRewardResp, error) {
	out := new(InviteRewardResp)
	err := c.cc.Invoke(ctx, "/Game/InviteReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetMails(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MailInfo, error) {
	out := new(MailInfo)
	err := c.cc.Invoke(ctx, "/Game/GetMails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetMailRewards(ctx context.Context, in *DealMailReq, opts ...grpc.CallOption) (*DealMailResult, error) {
	out := new(DealMailResult)
	err := c.cc.Invoke(ctx, "/Game/GetMailRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) SetMailRead(ctx context.Context, in *DealMailReq, opts ...grpc.CallOption) (*ReadOrDeleteMailResult, error) {
	out := new(ReadOrDeleteMailResult)
	err := c.cc.Invoke(ctx, "/Game/SetMailRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) DeleteMails(ctx context.Context, in *DealMailReq, opts ...grpc.CallOption) (*ReadOrDeleteMailResult, error) {
	out := new(ReadOrDeleteMailResult)
	err := c.cc.Invoke(ctx, "/Game/DeleteMails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) AdvertiseFinish(ctx context.Context, in *AdvertiseFinishReq, opts ...grpc.CallOption) (*AdvertiseFinishResp, error) {
	out := new(AdvertiseFinishResp)
	err := c.cc.Invoke(ctx, "/Game/AdvertiseFinish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetAdvertiseInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AdvertiseInfo, error) {
	out := new(AdvertiseInfo)
	err := c.cc.Invoke(ctx, "/Game/GetAdvertiseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) AdvertiseReward(ctx context.Context, in *AdvertiseRewardReq, opts ...grpc.CallOption) (*AdvertiseRewardResp, error) {
	out := new(AdvertiseRewardResp)
	err := c.cc.Invoke(ctx, "/Game/AdvertiseReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetFriendInviteBattleList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FriendInviteBattleListResp, error) {
	out := new(FriendInviteBattleListResp)
	err := c.cc.Invoke(ctx, "/Game/GetFriendInviteBattleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetFriendYuezhanList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FriendYuezhanListResp, error) {
	out := new(FriendYuezhanListResp)
	err := c.cc.Invoke(ctx, "/Game/GetFriendYuezhanList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetSignIn7Day(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SignIn7DayInfo, error) {
	out := new(SignIn7DayInfo)
	err := c.cc.Invoke(ctx, "/Game/GetSignIn7Day", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) SignIn7Day(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SingIn7DeyResp, error) {
	out := new(SingIn7DeyResp)
	err := c.cc.Invoke(ctx, "/Game/SignIn7Day", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) BindAC(ctx context.Context, in *BindActivateCode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Game/BindAC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) BindReward(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ItemUpdateResult, error) {
	out := new(ItemUpdateResult)
	err := c.cc.Invoke(ctx, "/Game/BindReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) OhayooAccountBind(ctx context.Context, in *OhayooBind, opts ...grpc.CallOption) (*LoginRsp, error) {
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, "/Game/OhayooAccountBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) AdvertiseBegin(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AdvertiseBeginResp, error) {
	out := new(AdvertiseBeginResp)
	err := c.cc.Invoke(ctx, "/Game/AdvertiseBegin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) UseCDKeyReq(ctx context.Context, in *UseCDKey, opts ...grpc.CallOption) (*ItemUpdateResult, error) {
	out := new(ItemUpdateResult)
	err := c.cc.Invoke(ctx, "/Game/UseCDKeyReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) HasHakenGroupReward(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HasTakenReward, error) {
	out := new(HasTakenReward)
	err := c.cc.Invoke(ctx, "/Game/HasHakenGroupReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetMainInterfaceMsg(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MainInterface, error) {
	out := new(MainInterface)
	err := c.cc.Invoke(ctx, "/Game/GetMainInterfaceMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetChatLoginInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChatLoginResp, error) {
	out := new(ChatLoginResp)
	err := c.cc.Invoke(ctx, "/Game/GetChatLoginInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetUserChatUserId(ctx context.Context, in *PlayerInviteCode, opts ...grpc.CallOption) (*SingleChatUserId, error) {
	out := new(SingleChatUserId)
	err := c.cc.Invoke(ctx, "/Game/GetUserChatUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetMultiUserChatUserId(ctx context.Context, in *MultiSingleChatUserId, opts ...grpc.CallOption) (*MultiSingleChatUserIdResp, error) {
	out := new(MultiSingleChatUserIdResp)
	err := c.cc.Invoke(ctx, "/Game/GetMultiUserChatUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetAchievementInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AchievementInfo, error) {
	out := new(AchievementInfo)
	err := c.cc.Invoke(ctx, "/Game/GetAchievementInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) AchievementReward(ctx context.Context, in *AchievementRewardReq, opts ...grpc.CallOption) (*AchievementRewardResp, error) {
	out := new(AchievementRewardResp)
	err := c.cc.Invoke(ctx, "/Game/AchievementReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) AchievementEvent(ctx context.Context, in *AchievementEventReq, opts ...grpc.CallOption) (*AchievementInfo, error) {
	out := new(AchievementInfo)
	err := c.cc.Invoke(ctx, "/Game/AchievementEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetAllFaceInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FaceInfo, error) {
	out := new(FaceInfo)
	err := c.cc.Invoke(ctx, "/Game/GetAllFaceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) SetFaceSlot(ctx context.Context, in *FaceSlot, opts ...grpc.CallOption) (*FaceInfo, error) {
	out := new(FaceInfo)
	err := c.cc.Invoke(ctx, "/Game/SetFaceSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) DailySignInInfoGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DailySignInInfo, error) {
	out := new(DailySignInInfo)
	err := c.cc.Invoke(ctx, "/Game/DailySignInInfoGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) DailySignIn(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SignInResp, error) {
	out := new(SignInResp)
	err := c.cc.Invoke(ctx, "/Game/DailySignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) DailySignInBeginAdvertise(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AdvertiseId, error) {
	out := new(AdvertiseId)
	err := c.cc.Invoke(ctx, "/Game/DailySignInBeginAdvertise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) DailySignInFinishAdvertise(ctx context.Context, in *AdvertiseId, opts ...grpc.CallOption) (*DailySignInInfo, error) {
	out := new(DailySignInInfo)
	err := c.cc.Invoke(ctx, "/Game/DailySignInFinishAdvertise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) DailySignInReissue(ctx context.Context, in *ReissueReq, opts ...grpc.CallOption) (*SignInResp, error) {
	out := new(SignInResp)
	err := c.cc.Invoke(ctx, "/Game/DailySignInReissue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) DailySignInReceiveCumulativeReward(ctx context.Context, in *ReceiveCumulativeRewardReq, opts ...grpc.CallOption) (*SignInResp, error) {
	out := new(SignInResp)
	err := c.cc.Invoke(ctx, "/Game/DailySignInReceiveCumulativeReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) DailySignInGetTimestamp(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Timestamp, error) {
	out := new(Timestamp)
	err := c.cc.Invoke(ctx, "/Game/DailySignInGetTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetStarInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StarInfoResp, error) {
	out := new(StarInfoResp)
	err := c.cc.Invoke(ctx, "/Game/GetStarInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetStarReward(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ItemUpdateResult, error) {
	out := new(ItemUpdateResult)
	err := c.cc.Invoke(ctx, "/Game/GetStarReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) LeaderboardGet(ctx context.Context, in *LeaderboardReq, opts ...grpc.CallOption) (*LeaderboardInfo, error) {
	out := new(LeaderboardInfo)
	err := c.cc.Invoke(ctx, "/Game/LeaderboardGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) LeaderboardLocate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AreaCodeResp, error) {
	out := new(AreaCodeResp)
	err := c.cc.Invoke(ctx, "/Game/LeaderboardLocate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) LeaderboardRelocate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AreaCodeResp, error) {
	out := new(AreaCodeResp)
	err := c.cc.Invoke(ctx, "/Game/LeaderboardRelocate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetEngageRecommendList(ctx context.Context, in *EngageRecommendReq, opts ...grpc.CallOption) (*EngageRecommendList, error) {
	out := new(EngageRecommendList)
	err := c.cc.Invoke(ctx, "/Game/GetEngageRecommendList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) ReceiveFirstRechargeGiftPack(ctx context.Context, in *ReceiveFirstRechargeGiftPackReq, opts ...grpc.CallOption) (*GiftPackResp, error) {
	out := new(GiftPackResp)
	err := c.cc.Invoke(ctx, "/Game/ReceiveFirstRechargeGiftPack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetGiftPackInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GiftPackInfo, error) {
	out := new(GiftPackInfo)
	err := c.cc.Invoke(ctx, "/Game/GetGiftPackInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) BuySkinGiftPack(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GiftPackResp, error) {
	out := new(GiftPackResp)
	err := c.cc.Invoke(ctx, "/Game/BuySkinGiftPack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) NewBieGiftReward(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GiftPackResp, error) {
	out := new(GiftPackResp)
	err := c.cc.Invoke(ctx, "/Game/NewBieGiftReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetOperationalActivity(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OperationalActivityInfo, error) {
	out := new(OperationalActivityInfo)
	err := c.cc.Invoke(ctx, "/Game/GetOperationalActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetKingRoundInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*KingRoundInfo, error) {
	out := new(KingRoundInfo)
	err := c.cc.Invoke(ctx, "/Game/GetKingRoundInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetKingRoundCard(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OptKRInfo, error) {
	out := new(OptKRInfo)
	err := c.cc.Invoke(ctx, "/Game/GetKingRoundCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetKingRoundReward(ctx context.Context, in *TakeKingRoundReward, opts ...grpc.CallOption) (*OptKRInfo, error) {
	out := new(OptKRInfo)
	err := c.cc.Invoke(ctx, "/Game/GetKingRoundReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) SignKingRound(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OptKRInfo, error) {
	out := new(OptKRInfo)
	err := c.cc.Invoke(ctx, "/Game/SignKingRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) LockKingRound(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*KingRoundInfo, error) {
	out := new(KingRoundInfo)
	err := c.cc.Invoke(ctx, "/Game/LockKingRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) PersonalityGetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PersonalityInfo, error) {
	out := new(PersonalityInfo)
	err := c.cc.Invoke(ctx, "/Game/PersonalityGetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) TurntableBeginAd(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AdBeginResp, error) {
	out := new(AdBeginResp)
	err := c.cc.Invoke(ctx, "/Game/TurntableBeginAd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) TurntableFinishAd(ctx context.Context, in *AdFinishReq, opts ...grpc.CallOption) (*TurntableInfo, error) {
	out := new(TurntableInfo)
	err := c.cc.Invoke(ctx, "/Game/TurntableFinishAd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) PlayTurntable(ctx context.Context, in *TurntableReq, opts ...grpc.CallOption) (*TurntableResp, error) {
	out := new(TurntableResp)
	err := c.cc.Invoke(ctx, "/Game/PlayTurntable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetTurntableInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TurntableInfo, error) {
	out := new(TurntableInfo)
	err := c.cc.Invoke(ctx, "/Game/GetTurntableInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetOhayooOrderInfo(ctx context.Context, in *PayOrderReq, opts ...grpc.CallOption) (*OhayooExternalOrderPayload, error) {
	out := new(OhayooExternalOrderPayload)
	err := c.cc.Invoke(ctx, "/Game/GetOhayooOrderInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetAppStoreOrderInfo(ctx context.Context, in *PayOrderReq, opts ...grpc.CallOption) (*AppstoreOrderRsp, error) {
	out := new(AppstoreOrderRsp)
	err := c.cc.Invoke(ctx, "/Game/GetAppStoreOrderInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) AppStoreVerify(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyRsp, error) {
	out := new(VerifyRsp)
	err := c.cc.Invoke(ctx, "/Game/AppStoreVerify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetWechatOrderInfo(ctx context.Context, in *PayOrderReq, opts ...grpc.CallOption) (*WechatExternalOrderPayload, error) {
	out := new(WechatExternalOrderPayload)
	err := c.cc.Invoke(ctx, "/Game/GetWechatOrderInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetAlipayOrderInfo(ctx context.Context, in *PayOrderReq, opts ...grpc.CallOption) (*AliPayExternalOrderPayload, error) {
	out := new(AliPayExternalOrderPayload)
	err := c.cc.Invoke(ctx, "/Game/GetAlipayOrderInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) CreateQRCodeOrder(ctx context.Context, in *PayOrderReq, opts ...grpc.CallOption) (*QRCodePayOrderPayload, error) {
	out := new(QRCodePayOrderPayload)
	err := c.cc.Invoke(ctx, "/Game/CreateQRCodeOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) CheckPayDelivery(ctx context.Context, in *CheckOrderDelivery, opts ...grpc.CallOption) (*CheckOrderDeliveryRet, error) {
	out := new(CheckOrderDeliveryRet)
	err := c.cc.Invoke(ctx, "/Game/CheckPayDelivery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) ClientSetOrderStatus(ctx context.Context, in *ClientOrderStatus, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Game/ClientSetOrderStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetCanPay(ctx context.Context, in *CanPay, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Game/GetCanPay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) SetRealNameInfo(ctx context.Context, in *RealNameInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Game/SetRealNameInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetRealNameInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RealNameInfo, error) {
	out := new(RealNameInfo)
	err := c.cc.Invoke(ctx, "/Game/GetRealNameInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) RealNameReward(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RealNameRewardResp, error) {
	out := new(RealNameRewardResp)
	err := c.cc.Invoke(ctx, "/Game/RealNameReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) RealNameQueryRedirect(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RealNameQueryRedirectGoRet, error) {
	out := new(RealNameQueryRedirectGoRet)
	err := c.cc.Invoke(ctx, "/Game/RealNameQueryRedirect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) RealNameCheckRedirectReq(ctx context.Context, in *RealNameCheckRedirect, opts ...grpc.CallOption) (*RealNameCheckRedirectRet, error) {
	out := new(RealNameCheckRedirectRet)
	err := c.cc.Invoke(ctx, "/Game/RealNameCheckRedirectReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetNewActorActivityInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NewActorActivity, error) {
	out := new(NewActorActivity)
	err := c.cc.Invoke(ctx, "/Game/GetNewActorActivityInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) SetNewActorActivityPass(ctx context.Context, in *IntPair, opts ...grpc.CallOption) (*NewActorActivityUpdate, error) {
	out := new(NewActorActivityUpdate)
	err := c.cc.Invoke(ctx, "/Game/SetNewActorActivityPass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetNewActorActivityReward(ctx context.Context, in *IntPair, opts ...grpc.CallOption) (*NewActorActivityUpdate, error) {
	out := new(NewActorActivityUpdate)
	err := c.cc.Invoke(ctx, "/Game/GetNewActorActivityReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) NoviceTaskGetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NoviceTaskInfo, error) {
	out := new(NoviceTaskInfo)
	err := c.cc.Invoke(ctx, "/Game/NoviceTaskGetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) NoviceTaskReward(ctx context.Context, in *NoviceTaskRewardReq, opts ...grpc.CallOption) (*NoviceTaskRewardResp, error) {
	out := new(NoviceTaskRewardResp)
	err := c.cc.Invoke(ctx, "/Game/NoviceTaskReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) NoviceTaskRemake(ctx context.Context, in *NoviceTaskRemakeReq, opts ...grpc.CallOption) (*NoviceTaskInfo, error) {
	out := new(NoviceTaskInfo)
	err := c.cc.Invoke(ctx, "/Game/NoviceTaskRemake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) NoviceDailyReward(ctx context.Context, in *NoviceDailyRewardReq, opts ...grpc.CallOption) (*NoviceTaskRewardResp, error) {
	out := new(NoviceTaskRewardResp)
	err := c.cc.Invoke(ctx, "/Game/NoviceDailyReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) ActivitySignIn(ctx context.Context, in *ActivitySignInReq, opts ...grpc.CallOption) (*ActivitySignInResp, error) {
	out := new(ActivitySignInResp)
	err := c.cc.Invoke(ctx, "/Game/ActivitySignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) ActivitySignInGetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ActivitySignInInfo, error) {
	out := new(ActivitySignInInfo)
	err := c.cc.Invoke(ctx, "/Game/ActivitySignInGetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) ActivitySignInReward(ctx context.Context, in *ActivitySignInReq, opts ...grpc.CallOption) (*ActivitySignInResp, error) {
	out := new(ActivitySignInResp)
	err := c.cc.Invoke(ctx, "/Game/ActivitySignInReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) CoinTimeGetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CoinTimeInfo, error) {
	out := new(CoinTimeInfo)
	err := c.cc.Invoke(ctx, "/Game/CoinTimeGetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) ItemRecordReq(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ItemRecord, error) {
	out := new(ItemRecord)
	err := c.cc.Invoke(ctx, "/Game/ItemRecordReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) EggGetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*EggInfo, error) {
	out := new(EggInfo)
	err := c.cc.Invoke(ctx, "/Game/EggGetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) EggPlay(ctx context.Context, in *PlayReq, opts ...grpc.CallOption) (*PlayResp, error) {
	out := new(PlayResp)
	err := c.cc.Invoke(ctx, "/Game/EggPlay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) EggExchange(ctx context.Context, in *ExchangeReq, opts ...grpc.CallOption) (*ExchangeResp, error) {
	out := new(ExchangeResp)
	err := c.cc.Invoke(ctx, "/Game/EggExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) EggBuy(ctx context.Context, in *BuyReq, opts ...grpc.CallOption) (*BuyResp, error) {
	out := new(BuyResp)
	err := c.cc.Invoke(ctx, "/Game/EggBuy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetCourtInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CourtInfo, error) {
	out := new(CourtInfo)
	err := c.cc.Invoke(ctx, "/Game/GetCourtInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) BuyCourtDecoration(ctx context.Context, in *BuyCourtDecoratorOpt, opts ...grpc.CallOption) (*CourtBuyRet, error) {
	out := new(CourtBuyRet)
	err := c.cc.Invoke(ctx, "/Game/BuyCourtDecoration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) LoadCourtDecoration(ctx context.Context, in *CourtDecoratorOpt, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Game/LoadCourtDecoration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) UnloadCourtDecoration(ctx context.Context, in *CourtDecoratorOpt, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Game/UnloadCourtDecoration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) ChangeCourtUsed(ctx context.Context, in *CourtChange, opts ...grpc.CallOption) (*CourtInfo, error) {
	out := new(CourtInfo)
	err := c.cc.Invoke(ctx, "/Game/ChangeCourtUsed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) FillCourtChip(ctx context.Context, in *FillCourtChipReq, opts ...grpc.CallOption) (*ItemUpdateResult, error) {
	out := new(ItemUpdateResult)
	err := c.cc.Invoke(ctx, "/Game/FillCourtChip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) AddItemToMe(ctx context.Context, in *ItemUpdate, opts ...grpc.CallOption) (*ItemUpdateResult, error) {
	out := new(ItemUpdateResult)
	err := c.cc.Invoke(ctx, "/Game/AddItemToMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) AddTimeToMe(ctx context.Context, in *SetTimeOffsetData, opts ...grpc.CallOption) (*SetTimeOffsetRes, error) {
	out := new(SetTimeOffsetRes)
	err := c.cc.Invoke(ctx, "/Game/AddTimeToMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) AddAllTimeToMe(ctx context.Context, in *SetTimeOffsetData, opts ...grpc.CallOption) (*SetTimeOffsetRes, error) {
	out := new(SetTimeOffsetRes)
	err := c.cc.Invoke(ctx, "/Game/AddAllTimeToMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetPrivilegeInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PrivilegeInfo, error) {
	out := new(PrivilegeInfo)
	err := c.cc.Invoke(ctx, "/Game/GetPrivilegeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) ShopNewGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ShopNewInfo, error) {
	out := new(ShopNewInfo)
	err := c.cc.Invoke(ctx, "/Game/ShopNewGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) ShopNewBuy(ctx context.Context, in *ShopNewBuyReq, opts ...grpc.CallOption) (*ShopNewBuyResp, error) {
	out := new(ShopNewBuyResp)
	err := c.cc.Invoke(ctx, "/Game/ShopNewBuy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) ShopNewRefresh(ctx context.Context, in *ShopNewRefreshReq, opts ...grpc.CallOption) (*ShopNewRefreshResp, error) {
	out := new(ShopNewRefreshResp)
	err := c.cc.Invoke(ctx, "/Game/ShopNewRefresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) AddAllActorToMe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Game/AddAllActorToMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServer is the server API for Game service.
// All implementations must embed UnimplementedGameServer
// for forward compatibility
type GameServer interface {
	// 一次发多个请求
	//
	// 限制为非登陆接口
	GroupMsg(context.Context, *GroupReq) (*GroupRsp, error)
	// 获取玩家主界面数据
	PlayerBase(context.Context, *Empty) (*Player, error)
	// 球员升级
	ActorUpdate(context.Context, *ActorUpdateReq) (*Actor, error)
	// 设置球员组
	//
	// code:200/400/500/501
	ActorGroup(context.Context, *ActorGroupReq) (*ActorInfo, error)
	// 设置显示球员
	ActorShow(context.Context, *ActorShowReq) (*ActorInfo, error)
	// 获得球员产出状态
	GetActorOutPutStatus(context.Context, *Empty) (*ActorOutPutStatus, error)
	// 获取宝箱可获得的球员
	GetActorsAvailable(context.Context, *ActorsAvailableReq) (*ActorsAvailableResp, error)
	// 获取宝箱可获得的球员
	GetActorsCanBuy(context.Context, *Empty) (*ActorsAvailableResp, error)
	// 获取球员产出途径与当前途径倒计时
	GetActorStatusAndTime(context.Context, *Empty) (*ActorStatusAndTime, error)
	// 获取赛季挑战赛数据
	Tour(context.Context, *Empty) (*TourInfo, error)
	// 领取赛季挑战赛奖励
	TourReward(context.Context, *Empty) (*TourRewardResp, error)
	// 添加赛季挑战赛场次记录
	TourAdd(context.Context, *TourUpdate) (*TourInfo, error)
	// 获取天梯玩法数据
	Ladder(context.Context, *Empty) (*LadderInfo, error)
	// 领取天梯奖励
	LadderReward(context.Context, *LadderRewardReq) (*LadderRewardResp, error)
	// 战斗结算
	FightResult(context.Context, *FightResultReq) (*RewardResultRes, error)
	// 战斗锁定请求
	FightCheck(context.Context, *MatchReq) (*MatchParamsResp, error)
	// 战斗开始消息
	FightRequest(context.Context, *FightReq) (*Empty, error)
	// 设置约战房间状态
	EngageStateSet(context.Context, *SetEngageState) (*Empty, error)
	// 获取赛券信息
	BattlePass(context.Context, *Empty) (*BattlePassInfoMap, error)
	// 领取赛券奖励
	BattlePassReward(context.Context, *BattlePassRewardReq) (*BattlePassRewardResp, error)
	// 购买明星赛券
	BattlePassBuy(context.Context, *BattlePassBuyReq) (*BattlepassBuyResp, error)
	// 消耗宝石提升赛券到下一等级
	BattlePassLevelUp(context.Context, *Empty) (*BattlepassBuyResp, error)
	// 获取球星之路信息
	Gloryroad(context.Context, *Empty) (*GloryroadInfo, error)
	// 球星之路领取奖励
	GloryroadReward(context.Context, *GloryroadRewardReq) (*GloryroadRewardResp, error)
	// 球星之路上赛季球员杯数
	GloryroadLastSeasonActorCupGet(context.Context, *Empty) (*GloryroadLastSeasonActorCup, error)
	// 球星之路领取赛季奖励
	GloryroadSeasonReward(context.Context, *Empty) (*GloryroadRewardResp, error)
	// 获取任务列表
	MissionGet(context.Context, *Empty) (*MissionInfo, error)
	// 获取解锁系统
	ControlGet(context.Context, *Empty) (*OpenControlInfo, error)
	// 获取商店信息
	ShopGet(context.Context, *Empty) (*ShopInfoResp, error)
	// 购买商品请求
	ShopBuy(context.Context, *ShopBuyReq) (*ShopBuyResp, error)
	// 商店刷新
	ShopRefresh(context.Context, *ShopRefreshReq) (*ShopRefreshResp, error)
	// 请求新手引导信息
	GuideGet(context.Context, *Empty) (*GuideInfoResp, error)
	// 记录新手引导信息
	GuideMark(context.Context, *GuideMarkReq) (*GuideInfoResp, error)
	// 记录弱引导信息
	WeakGuideMark(context.Context, *WeakGuideReq) (*WeakGuideResp, error)
	// 请求弱引导信息
	WeakGuideInfo(context.Context, *Empty) (*WeakGuideResp, error)
	// 记录UI弱引导
	WeakUIGuideMark(context.Context, *UIWeakGuideMarkReq) (*GuideInfoResp, error)
	// 玩家个人信息
	PlayerPersonal(context.Context, *PlayerInviteCode) (*PlayerPersonalResp, error)
	// 修改头像
	PlayerAvatar(context.Context, *PlayerAvatarReq) (*PlayerStatic, error)
	// 修改昵称
	PlayerName(context.Context, *PlayerNameReq) (*PlayerRenameResp, error)
	// 换头像框
	ModifyAvatarFrame(context.Context, *ModifyAvatarFrameReq) (*PlayerStatic, error)
	// 换称号
	ModifyTitle(context.Context, *ModifyTitleReq) (*PlayerStatic, error)
	// 换炫彩名
	ModifyColorful(context.Context, *ModifyColorfulReq) (*PlayerStatic, error)
	// 获取生涯记录
	RecordGet(context.Context, *Empty) (*RecordInfo, error)
	// 获取皮肤信息
	SkinGet(context.Context, *Empty) (*SkinInfo, error)
	// 皮肤操作，装备 卸下 切换
	SkinEquip(context.Context, *SkinReq) (*SkinEquipInfo, error)
	// 装备球员技能
	SkillEquip(context.Context, *ActorSkillReq) (*Actor, error)
	// 审批好友申请
	FriendRatify(context.Context, *FriendReqRatify) (*FriendInfoResp, error)
	// 添加好友
	FriendAdd(context.Context, *FriendAddReq) (*RecommendFriends, error)
	// 获取好友信息
	FriendInfo(context.Context, *Empty) (*FriendInfoResp, error)
	// 刷新推荐列表
	FriendRefresh(context.Context, *Empty) (*RecommendFriends, error)
	// 删除好友
	FriendDelete(context.Context, *PlayerInviteCode) (*Friends, error)
	// 接受分享
	AcceptSharing(context.Context, *PlayerInviteCode) (*InviteInfo, error)
	// 获取玩家匹配参数
	GetMatchParams(context.Context, *MatchReq) (*MatchParamsResp, error)
	// 获取分享邀请信息
	GetInviteInfo(context.Context, *Empty) (*InviteInfo, error)
	// 领取分享邀请奖励返回
	InviteReward(context.Context, *InviteRewardReq) (*InviteRewardResp, error)
	// 获取所有邮件
	GetMails(context.Context, *Empty) (*MailInfo, error)
	// 领取邮件奖励
	GetMailRewards(context.Context, *DealMailReq) (*DealMailResult, error)
	// 设置邮件读取
	SetMailRead(context.Context, *DealMailReq) (*ReadOrDeleteMailResult, error)
	// 删除邮件
	DeleteMails(context.Context, *DealMailReq) (*ReadOrDeleteMailResult, error)
	// 观看广告完成
	AdvertiseFinish(context.Context, *AdvertiseFinishReq) (*AdvertiseFinishResp, error)
	// 获取广告信息
	GetAdvertiseInfo(context.Context, *Empty) (*AdvertiseInfo, error)
	// 领取看广告奖励
	AdvertiseReward(context.Context, *AdvertiseRewardReq) (*AdvertiseRewardResp, error)
	// 获取好友约战列表新
	GetFriendInviteBattleList(context.Context, *Empty) (*FriendInviteBattleListResp, error)
	// 获取好友约战列表
	GetFriendYuezhanList(context.Context, *Empty) (*FriendYuezhanListResp, error)
	// 获取七日签到信息
	GetSignIn7Day(context.Context, *Empty) (*SignIn7DayInfo, error)
	// 七日签到，签到
	SignIn7Day(context.Context, *Empty) (*SingIn7DeyResp, error)
	// 绑定激活码
	BindAC(context.Context, *BindActivateCode) (*Empty, error)
	// 领取绑定账号奖励
	BindReward(context.Context, *Empty) (*ItemUpdateResult, error)
	// Ohayoo账号绑定
	//
	OhayooAccountBind(context.Context, *OhayooBind) (*LoginRsp, error)
	// 开始看广告
	AdvertiseBegin(context.Context, *Empty) (*AdvertiseBeginResp, error)
	// 使用兑换码
	UseCDKeyReq(context.Context, *UseCDKey) (*ItemUpdateResult, error)
	// 是否领取加群有礼的奖励
	HasHakenGroupReward(context.Context, *Empty) (*HasTakenReward, error)
	// 获取主界面信息
	GetMainInterfaceMsg(context.Context, *Empty) (*MainInterface, error)
	// 获得聊天登录信息
	GetChatLoginInfo(context.Context, *Empty) (*ChatLoginResp, error)
	// 获取用户userid
	GetUserChatUserId(context.Context, *PlayerInviteCode) (*SingleChatUserId, error)
	// 批量获取用户userid
	GetMultiUserChatUserId(context.Context, *MultiSingleChatUserId) (*MultiSingleChatUserIdResp, error)
	// 获取成就信息
	GetAchievementInfo(context.Context, *Empty) (*AchievementInfo, error)
	// 领取成就奖励
	AchievementReward(context.Context, *AchievementRewardReq) (*AchievementRewardResp, error)
	// 客户端触发的成就事件,如发起分享/开关音乐
	AchievementEvent(context.Context, *AchievementEventReq) (*AchievementInfo, error)
	// 获取所有表情信息
	GetAllFaceInfo(context.Context, *Empty) (*FaceInfo, error)
	// 设置表情栏位 成功返回200
	SetFaceSlot(context.Context, *FaceSlot) (*FaceInfo, error)
	// 获取每日签到信息
	DailySignInInfoGet(context.Context, *Empty) (*DailySignInInfo, error)
	// 每日签到签到
	DailySignIn(context.Context, *Empty) (*SignInResp, error)
	// 每日签到开始看广告
	DailySignInBeginAdvertise(context.Context, *Empty) (*AdvertiseId, error)
	// 每日签到看广告完成
	DailySignInFinishAdvertise(context.Context, *AdvertiseId) (*DailySignInInfo, error)
	// 每日签到补签
	DailySignInReissue(context.Context, *ReissueReq) (*SignInResp, error)
	// 领取累计签到奖励
	DailySignInReceiveCumulativeReward(context.Context, *ReceiveCumulativeRewardReq) (*SignInResp, error)
	// 获取服务器当前时间戳
	DailySignInGetTimestamp(context.Context, *Empty) (*Timestamp, error)
	// 获取星辉信息
	GetStarInfo(context.Context, *Empty) (*StarInfoResp, error)
	// 领取星辉奖励
	GetStarReward(context.Context, *Empty) (*ItemUpdateResult, error)
	// 获取排行榜信息
	LeaderboardGet(context.Context, *LeaderboardReq) (*LeaderboardInfo, error)
	// 获取排行榜定位信息
	LeaderboardLocate(context.Context, *Empty) (*AreaCodeResp, error)
	// 排行榜重新定位
	LeaderboardRelocate(context.Context, *Empty) (*AreaCodeResp, error)
	// 获取约战推荐列表
	GetEngageRecommendList(context.Context, *EngageRecommendReq) (*EngageRecommendList, error)
	// 领取首充礼包
	ReceiveFirstRechargeGiftPack(context.Context, *ReceiveFirstRechargeGiftPackReq) (*GiftPackResp, error)
	// 获取礼包信息
	GetGiftPackInfo(context.Context, *Empty) (*GiftPackInfo, error)
	// 购买皮肤礼包
	BuySkinGiftPack(context.Context, *Empty) (*GiftPackResp, error)
	// 领取迎新礼包
	NewBieGiftReward(context.Context, *Empty) (*GiftPackResp, error)
	// 获取运营活动信息
	GetOperationalActivity(context.Context, *Empty) (*OperationalActivityInfo, error)
	// 获取路人王信息
	GetKingRoundInfo(context.Context, *Empty) (*KingRoundInfo, error)
	// 领取路人王卡片奖励
	GetKingRoundCard(context.Context, *Empty) (*OptKRInfo, error)
	// 领取路人王站点奖励
	GetKingRoundReward(context.Context, *TakeKingRoundReward) (*OptKRInfo, error)
	// 报名
	SignKingRound(context.Context, *Empty) (*OptKRInfo, error)
	// 路人王锁
	LockKingRound(context.Context, *Empty) (*KingRoundInfo, error)
	// 获取个性化信息
	PersonalityGetInfo(context.Context, *Empty) (*PersonalityInfo, error)
	// 开始看转盘广告
	TurntableBeginAd(context.Context, *Empty) (*AdBeginResp, error)
	// 完成看转盘广告
	TurntableFinishAd(context.Context, *AdFinishReq) (*TurntableInfo, error)
	// 玩转盘
	PlayTurntable(context.Context, *TurntableReq) (*TurntableResp, error)
	// 获取转盘信息
	GetTurntableInfo(context.Context, *Empty) (*TurntableInfo, error)
	// 获取ohayoo充值订单信息
	GetOhayooOrderInfo(context.Context, *PayOrderReq) (*OhayooExternalOrderPayload, error)
	// 获取苹果充值订单信息
	GetAppStoreOrderInfo(context.Context, *PayOrderReq) (*AppstoreOrderRsp, error)
	// 商店验证订单
	AppStoreVerify(context.Context, *VerifyReq) (*VerifyRsp, error)
	// 获取wechat充值订单信息
	GetWechatOrderInfo(context.Context, *PayOrderReq) (*WechatExternalOrderPayload, error)
	// 获取alipay充值订单信息
	GetAlipayOrderInfo(context.Context, *PayOrderReq) (*AliPayExternalOrderPayload, error)
	// 创建二维码订单
	CreateQRCodeOrder(context.Context, *PayOrderReq) (*QRCodePayOrderPayload, error)
	// 查询订单发货信息
	CheckPayDelivery(context.Context, *CheckOrderDelivery) (*CheckOrderDeliveryRet, error)
	ClientSetOrderStatus(context.Context, *ClientOrderStatus) (*Empty, error)
	// 查询玩家能否购买
	GetCanPay(context.Context, *CanPay) (*Empty, error)
	// 设置实名制信息
	SetRealNameInfo(context.Context, *RealNameInfo) (*Empty, error)
	// 获取实名制信息
	GetRealNameInfo(context.Context, *Empty) (*RealNameInfo, error)
	// 领取实名制奖励
	RealNameReward(context.Context, *Empty) (*RealNameRewardResp, error)
	// 实名制转发 确认实名制
	RealNameQueryRedirect(context.Context, *Empty) (*RealNameQueryRedirectGoRet, error)
	// 实名制转发 认证实名制
	RealNameCheckRedirectReq(context.Context, *RealNameCheckRedirect) (*RealNameCheckRedirectRet, error)
	// 获取新球员活动信息
	GetNewActorActivityInfo(context.Context, *Empty) (*NewActorActivity, error)
	// 设置新球员活动通关
	SetNewActorActivityPass(context.Context, *IntPair) (*NewActorActivityUpdate, error)
	// 领取新球员活动奖励
	GetNewActorActivityReward(context.Context, *IntPair) (*NewActorActivityUpdate, error)
	// 新手任务信息
	NoviceTaskGetInfo(context.Context, *Empty) (*NoviceTaskInfo, error)
	// 新手任务领奖
	NoviceTaskReward(context.Context, *NoviceTaskRewardReq) (*NoviceTaskRewardResp, error)
	// 新手任务重训练
	NoviceTaskRemake(context.Context, *NoviceTaskRemakeReq) (*NoviceTaskInfo, error)
	// 新手任务领取每日奖励
	NoviceDailyReward(context.Context, *NoviceDailyRewardReq) (*NoviceTaskRewardResp, error)
	// 活动签到,签到
	ActivitySignIn(context.Context, *ActivitySignInReq) (*ActivitySignInResp, error)
	// 活动签到,获取玩家信息
	ActivitySignInGetInfo(context.Context, *Empty) (*ActivitySignInInfo, error)
	// 活动签到,领取额外奖励
	ActivitySignInReward(context.Context, *ActivitySignInReq) (*ActivitySignInResp, error)
	// 千金一刻,活动信息
	CoinTimeGetInfo(context.Context, *Empty) (*CoinTimeInfo, error)
	// 请求道具获取记录
	ItemRecordReq(context.Context, *Empty) (*ItemRecord, error)
	// 扭蛋信息
	EggGetInfo(context.Context, *Empty) (*EggInfo, error)
	// 扭蛋玩
	EggPlay(context.Context, *PlayReq) (*PlayResp, error)
	// 扭蛋幸运点兑换
	EggExchange(context.Context, *ExchangeReq) (*ExchangeResp, error)
	// 扭蛋买票
	EggBuy(context.Context, *BuyReq) (*BuyResp, error)
	// 获取球场信息
	GetCourtInfo(context.Context, *Empty) (*CourtInfo, error)
	// 购买球场装饰
	BuyCourtDecoration(context.Context, *BuyCourtDecoratorOpt) (*CourtBuyRet, error)
	// 装载球场装饰
	LoadCourtDecoration(context.Context, *CourtDecoratorOpt) (*Empty, error)
	// 卸载球场装饰
	UnloadCourtDecoration(context.Context, *CourtDecoratorOpt) (*Empty, error)
	// 修改使用的球场
	ChangeCourtUsed(context.Context, *CourtChange) (*CourtInfo, error)
	// 球场碎片补齐
	FillCourtChip(context.Context, *FillCourtChipReq) (*ItemUpdateResult, error)
	// 给自己添加道具
	AddItemToMe(context.Context, *ItemUpdate) (*ItemUpdateResult, error)
	// 给自己服务器改时间
	AddTimeToMe(context.Context, *SetTimeOffsetData) (*SetTimeOffsetRes, error)
	// 修改自己服务器所有系统的时间
	AddAllTimeToMe(context.Context, *SetTimeOffsetData) (*SetTimeOffsetRes, error)
	// 获取特权信息
	GetPrivilegeInfo(context.Context, *Empty) (*PrivilegeInfo, error)
	// 商店新信息
	ShopNewGet(context.Context, *Empty) (*ShopNewInfo, error)
	// 商店新买
	ShopNewBuy(context.Context, *ShopNewBuyReq) (*ShopNewBuyResp, error)
	// 商店新刷
	ShopNewRefresh(context.Context, *ShopNewRefreshReq) (*ShopNewRefreshResp, error)
	// 给自己加全部球员和技能
	AddAllActorToMe(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedGameServer()
}

// UnimplementedGameServer must be embedded to have forward compatible implementations.
type UnimplementedGameServer struct {
}

func (UnimplementedGameServer) GroupMsg(context.Context, *GroupReq) (*GroupRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupMsg not implemented")
}
func (UnimplementedGameServer) PlayerBase(context.Context, *Empty) (*Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerBase not implemented")
}
func (UnimplementedGameServer) ActorUpdate(context.Context, *ActorUpdateReq) (*Actor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActorUpdate not implemented")
}
func (UnimplementedGameServer) ActorGroup(context.Context, *ActorGroupReq) (*ActorInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActorGroup not implemented")
}
func (UnimplementedGameServer) ActorShow(context.Context, *ActorShowReq) (*ActorInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActorShow not implemented")
}
func (UnimplementedGameServer) GetActorOutPutStatus(context.Context, *Empty) (*ActorOutPutStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActorOutPutStatus not implemented")
}
func (UnimplementedGameServer) GetActorsAvailable(context.Context, *ActorsAvailableReq) (*ActorsAvailableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActorsAvailable not implemented")
}
func (UnimplementedGameServer) GetActorsCanBuy(context.Context, *Empty) (*ActorsAvailableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActorsCanBuy not implemented")
}
func (UnimplementedGameServer) GetActorStatusAndTime(context.Context, *Empty) (*ActorStatusAndTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActorStatusAndTime not implemented")
}
func (UnimplementedGameServer) Tour(context.Context, *Empty) (*TourInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tour not implemented")
}
func (UnimplementedGameServer) TourReward(context.Context, *Empty) (*TourRewardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TourReward not implemented")
}
func (UnimplementedGameServer) TourAdd(context.Context, *TourUpdate) (*TourInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TourAdd not implemented")
}
func (UnimplementedGameServer) Ladder(context.Context, *Empty) (*LadderInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ladder not implemented")
}
func (UnimplementedGameServer) LadderReward(context.Context, *LadderRewardReq) (*LadderRewardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LadderReward not implemented")
}
func (UnimplementedGameServer) FightResult(context.Context, *FightResultReq) (*RewardResultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FightResult not implemented")
}
func (UnimplementedGameServer) FightCheck(context.Context, *MatchReq) (*MatchParamsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FightCheck not implemented")
}
func (UnimplementedGameServer) FightRequest(context.Context, *FightReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FightRequest not implemented")
}
func (UnimplementedGameServer) EngageStateSet(context.Context, *SetEngageState) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EngageStateSet not implemented")
}
func (UnimplementedGameServer) BattlePass(context.Context, *Empty) (*BattlePassInfoMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BattlePass not implemented")
}
func (UnimplementedGameServer) BattlePassReward(context.Context, *BattlePassRewardReq) (*BattlePassRewardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BattlePassReward not implemented")
}
func (UnimplementedGameServer) BattlePassBuy(context.Context, *BattlePassBuyReq) (*BattlepassBuyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BattlePassBuy not implemented")
}
func (UnimplementedGameServer) BattlePassLevelUp(context.Context, *Empty) (*BattlepassBuyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BattlePassLevelUp not implemented")
}
func (UnimplementedGameServer) Gloryroad(context.Context, *Empty) (*GloryroadInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gloryroad not implemented")
}
func (UnimplementedGameServer) GloryroadReward(context.Context, *GloryroadRewardReq) (*GloryroadRewardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GloryroadReward not implemented")
}
func (UnimplementedGameServer) GloryroadLastSeasonActorCupGet(context.Context, *Empty) (*GloryroadLastSeasonActorCup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GloryroadLastSeasonActorCupGet not implemented")
}
func (UnimplementedGameServer) GloryroadSeasonReward(context.Context, *Empty) (*GloryroadRewardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GloryroadSeasonReward not implemented")
}
func (UnimplementedGameServer) MissionGet(context.Context, *Empty) (*MissionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MissionGet not implemented")
}
func (UnimplementedGameServer) ControlGet(context.Context, *Empty) (*OpenControlInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControlGet not implemented")
}
func (UnimplementedGameServer) ShopGet(context.Context, *Empty) (*ShopInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShopGet not implemented")
}
func (UnimplementedGameServer) ShopBuy(context.Context, *ShopBuyReq) (*ShopBuyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShopBuy not implemented")
}
func (UnimplementedGameServer) ShopRefresh(context.Context, *ShopRefreshReq) (*ShopRefreshResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShopRefresh not implemented")
}
func (UnimplementedGameServer) GuideGet(context.Context, *Empty) (*GuideInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuideGet not implemented")
}
func (UnimplementedGameServer) GuideMark(context.Context, *GuideMarkReq) (*GuideInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuideMark not implemented")
}
func (UnimplementedGameServer) WeakGuideMark(context.Context, *WeakGuideReq) (*WeakGuideResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WeakGuideMark not implemented")
}
func (UnimplementedGameServer) WeakGuideInfo(context.Context, *Empty) (*WeakGuideResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WeakGuideInfo not implemented")
}
func (UnimplementedGameServer) WeakUIGuideMark(context.Context, *UIWeakGuideMarkReq) (*GuideInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WeakUIGuideMark not implemented")
}
func (UnimplementedGameServer) PlayerPersonal(context.Context, *PlayerInviteCode) (*PlayerPersonalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerPersonal not implemented")
}
func (UnimplementedGameServer) PlayerAvatar(context.Context, *PlayerAvatarReq) (*PlayerStatic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerAvatar not implemented")
}
func (UnimplementedGameServer) PlayerName(context.Context, *PlayerNameReq) (*PlayerRenameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerName not implemented")
}
func (UnimplementedGameServer) ModifyAvatarFrame(context.Context, *ModifyAvatarFrameReq) (*PlayerStatic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyAvatarFrame not implemented")
}
func (UnimplementedGameServer) ModifyTitle(context.Context, *ModifyTitleReq) (*PlayerStatic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyTitle not implemented")
}
func (UnimplementedGameServer) ModifyColorful(context.Context, *ModifyColorfulReq) (*PlayerStatic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyColorful not implemented")
}
func (UnimplementedGameServer) RecordGet(context.Context, *Empty) (*RecordInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordGet not implemented")
}
func (UnimplementedGameServer) SkinGet(context.Context, *Empty) (*SkinInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkinGet not implemented")
}
func (UnimplementedGameServer) SkinEquip(context.Context, *SkinReq) (*SkinEquipInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkinEquip not implemented")
}
func (UnimplementedGameServer) SkillEquip(context.Context, *ActorSkillReq) (*Actor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkillEquip not implemented")
}
func (UnimplementedGameServer) FriendRatify(context.Context, *FriendReqRatify) (*FriendInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendRatify not implemented")
}
func (UnimplementedGameServer) FriendAdd(context.Context, *FriendAddReq) (*RecommendFriends, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendAdd not implemented")
}
func (UnimplementedGameServer) FriendInfo(context.Context, *Empty) (*FriendInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendInfo not implemented")
}
func (UnimplementedGameServer) FriendRefresh(context.Context, *Empty) (*RecommendFriends, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendRefresh not implemented")
}
func (UnimplementedGameServer) FriendDelete(context.Context, *PlayerInviteCode) (*Friends, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendDelete not implemented")
}
func (UnimplementedGameServer) AcceptSharing(context.Context, *PlayerInviteCode) (*InviteInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptSharing not implemented")
}
func (UnimplementedGameServer) GetMatchParams(context.Context, *MatchReq) (*MatchParamsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchParams not implemented")
}
func (UnimplementedGameServer) GetInviteInfo(context.Context, *Empty) (*InviteInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInviteInfo not implemented")
}
func (UnimplementedGameServer) InviteReward(context.Context, *InviteRewardReq) (*InviteRewardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteReward not implemented")
}
func (UnimplementedGameServer) GetMails(context.Context, *Empty) (*MailInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMails not implemented")
}
func (UnimplementedGameServer) GetMailRewards(context.Context, *DealMailReq) (*DealMailResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMailRewards not implemented")
}
func (UnimplementedGameServer) SetMailRead(context.Context, *DealMailReq) (*ReadOrDeleteMailResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMailRead not implemented")
}
func (UnimplementedGameServer) DeleteMails(context.Context, *DealMailReq) (*ReadOrDeleteMailResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMails not implemented")
}
func (UnimplementedGameServer) AdvertiseFinish(context.Context, *AdvertiseFinishReq) (*AdvertiseFinishResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdvertiseFinish not implemented")
}
func (UnimplementedGameServer) GetAdvertiseInfo(context.Context, *Empty) (*AdvertiseInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdvertiseInfo not implemented")
}
func (UnimplementedGameServer) AdvertiseReward(context.Context, *AdvertiseRewardReq) (*AdvertiseRewardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdvertiseReward not implemented")
}
func (UnimplementedGameServer) GetFriendInviteBattleList(context.Context, *Empty) (*FriendInviteBattleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendInviteBattleList not implemented")
}
func (UnimplementedGameServer) GetFriendYuezhanList(context.Context, *Empty) (*FriendYuezhanListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendYuezhanList not implemented")
}
func (UnimplementedGameServer) GetSignIn7Day(context.Context, *Empty) (*SignIn7DayInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignIn7Day not implemented")
}
func (UnimplementedGameServer) SignIn7Day(context.Context, *Empty) (*SingIn7DeyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn7Day not implemented")
}
func (UnimplementedGameServer) BindAC(context.Context, *BindActivateCode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindAC not implemented")
}
func (UnimplementedGameServer) BindReward(context.Context, *Empty) (*ItemUpdateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindReward not implemented")
}
func (UnimplementedGameServer) OhayooAccountBind(context.Context, *OhayooBind) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OhayooAccountBind not implemented")
}
func (UnimplementedGameServer) AdvertiseBegin(context.Context, *Empty) (*AdvertiseBeginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdvertiseBegin not implemented")
}
func (UnimplementedGameServer) UseCDKeyReq(context.Context, *UseCDKey) (*ItemUpdateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseCDKeyReq not implemented")
}
func (UnimplementedGameServer) HasHakenGroupReward(context.Context, *Empty) (*HasTakenReward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasHakenGroupReward not implemented")
}
func (UnimplementedGameServer) GetMainInterfaceMsg(context.Context, *Empty) (*MainInterface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMainInterfaceMsg not implemented")
}
func (UnimplementedGameServer) GetChatLoginInfo(context.Context, *Empty) (*ChatLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatLoginInfo not implemented")
}
func (UnimplementedGameServer) GetUserChatUserId(context.Context, *PlayerInviteCode) (*SingleChatUserId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserChatUserId not implemented")
}
func (UnimplementedGameServer) GetMultiUserChatUserId(context.Context, *MultiSingleChatUserId) (*MultiSingleChatUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiUserChatUserId not implemented")
}
func (UnimplementedGameServer) GetAchievementInfo(context.Context, *Empty) (*AchievementInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAchievementInfo not implemented")
}
func (UnimplementedGameServer) AchievementReward(context.Context, *AchievementRewardReq) (*AchievementRewardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AchievementReward not implemented")
}
func (UnimplementedGameServer) AchievementEvent(context.Context, *AchievementEventReq) (*AchievementInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AchievementEvent not implemented")
}
func (UnimplementedGameServer) GetAllFaceInfo(context.Context, *Empty) (*FaceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFaceInfo not implemented")
}
func (UnimplementedGameServer) SetFaceSlot(context.Context, *FaceSlot) (*FaceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFaceSlot not implemented")
}
func (UnimplementedGameServer) DailySignInInfoGet(context.Context, *Empty) (*DailySignInInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DailySignInInfoGet not implemented")
}
func (UnimplementedGameServer) DailySignIn(context.Context, *Empty) (*SignInResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DailySignIn not implemented")
}
func (UnimplementedGameServer) DailySignInBeginAdvertise(context.Context, *Empty) (*AdvertiseId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DailySignInBeginAdvertise not implemented")
}
func (UnimplementedGameServer) DailySignInFinishAdvertise(context.Context, *AdvertiseId) (*DailySignInInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DailySignInFinishAdvertise not implemented")
}
func (UnimplementedGameServer) DailySignInReissue(context.Context, *ReissueReq) (*SignInResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DailySignInReissue not implemented")
}
func (UnimplementedGameServer) DailySignInReceiveCumulativeReward(context.Context, *ReceiveCumulativeRewardReq) (*SignInResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DailySignInReceiveCumulativeReward not implemented")
}
func (UnimplementedGameServer) DailySignInGetTimestamp(context.Context, *Empty) (*Timestamp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DailySignInGetTimestamp not implemented")
}
func (UnimplementedGameServer) GetStarInfo(context.Context, *Empty) (*StarInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStarInfo not implemented")
}
func (UnimplementedGameServer) GetStarReward(context.Context, *Empty) (*ItemUpdateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStarReward not implemented")
}
func (UnimplementedGameServer) LeaderboardGet(context.Context, *LeaderboardReq) (*LeaderboardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaderboardGet not implemented")
}
func (UnimplementedGameServer) LeaderboardLocate(context.Context, *Empty) (*AreaCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaderboardLocate not implemented")
}
func (UnimplementedGameServer) LeaderboardRelocate(context.Context, *Empty) (*AreaCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaderboardRelocate not implemented")
}
func (UnimplementedGameServer) GetEngageRecommendList(context.Context, *EngageRecommendReq) (*EngageRecommendList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEngageRecommendList not implemented")
}
func (UnimplementedGameServer) ReceiveFirstRechargeGiftPack(context.Context, *ReceiveFirstRechargeGiftPackReq) (*GiftPackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveFirstRechargeGiftPack not implemented")
}
func (UnimplementedGameServer) GetGiftPackInfo(context.Context, *Empty) (*GiftPackInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGiftPackInfo not implemented")
}
func (UnimplementedGameServer) BuySkinGiftPack(context.Context, *Empty) (*GiftPackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuySkinGiftPack not implemented")
}
func (UnimplementedGameServer) NewBieGiftReward(context.Context, *Empty) (*GiftPackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewBieGiftReward not implemented")
}
func (UnimplementedGameServer) GetOperationalActivity(context.Context, *Empty) (*OperationalActivityInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperationalActivity not implemented")
}
func (UnimplementedGameServer) GetKingRoundInfo(context.Context, *Empty) (*KingRoundInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKingRoundInfo not implemented")
}
func (UnimplementedGameServer) GetKingRoundCard(context.Context, *Empty) (*OptKRInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKingRoundCard not implemented")
}
func (UnimplementedGameServer) GetKingRoundReward(context.Context, *TakeKingRoundReward) (*OptKRInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKingRoundReward not implemented")
}
func (UnimplementedGameServer) SignKingRound(context.Context, *Empty) (*OptKRInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignKingRound not implemented")
}
func (UnimplementedGameServer) LockKingRound(context.Context, *Empty) (*KingRoundInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockKingRound not implemented")
}
func (UnimplementedGameServer) PersonalityGetInfo(context.Context, *Empty) (*PersonalityInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersonalityGetInfo not implemented")
}
func (UnimplementedGameServer) TurntableBeginAd(context.Context, *Empty) (*AdBeginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TurntableBeginAd not implemented")
}
func (UnimplementedGameServer) TurntableFinishAd(context.Context, *AdFinishReq) (*TurntableInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TurntableFinishAd not implemented")
}
func (UnimplementedGameServer) PlayTurntable(context.Context, *TurntableReq) (*TurntableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayTurntable not implemented")
}
func (UnimplementedGameServer) GetTurntableInfo(context.Context, *Empty) (*TurntableInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTurntableInfo not implemented")
}
func (UnimplementedGameServer) GetOhayooOrderInfo(context.Context, *PayOrderReq) (*OhayooExternalOrderPayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOhayooOrderInfo not implemented")
}
func (UnimplementedGameServer) GetAppStoreOrderInfo(context.Context, *PayOrderReq) (*AppstoreOrderRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppStoreOrderInfo not implemented")
}
func (UnimplementedGameServer) AppStoreVerify(context.Context, *VerifyReq) (*VerifyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppStoreVerify not implemented")
}
func (UnimplementedGameServer) GetWechatOrderInfo(context.Context, *PayOrderReq) (*WechatExternalOrderPayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWechatOrderInfo not implemented")
}
func (UnimplementedGameServer) GetAlipayOrderInfo(context.Context, *PayOrderReq) (*AliPayExternalOrderPayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlipayOrderInfo not implemented")
}
func (UnimplementedGameServer) CreateQRCodeOrder(context.Context, *PayOrderReq) (*QRCodePayOrderPayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQRCodeOrder not implemented")
}
func (UnimplementedGameServer) CheckPayDelivery(context.Context, *CheckOrderDelivery) (*CheckOrderDeliveryRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPayDelivery not implemented")
}
func (UnimplementedGameServer) ClientSetOrderStatus(context.Context, *ClientOrderStatus) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientSetOrderStatus not implemented")
}
func (UnimplementedGameServer) GetCanPay(context.Context, *CanPay) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCanPay not implemented")
}
func (UnimplementedGameServer) SetRealNameInfo(context.Context, *RealNameInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRealNameInfo not implemented")
}
func (UnimplementedGameServer) GetRealNameInfo(context.Context, *Empty) (*RealNameInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealNameInfo not implemented")
}
func (UnimplementedGameServer) RealNameReward(context.Context, *Empty) (*RealNameRewardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RealNameReward not implemented")
}
func (UnimplementedGameServer) RealNameQueryRedirect(context.Context, *Empty) (*RealNameQueryRedirectGoRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RealNameQueryRedirect not implemented")
}
func (UnimplementedGameServer) RealNameCheckRedirectReq(context.Context, *RealNameCheckRedirect) (*RealNameCheckRedirectRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RealNameCheckRedirectReq not implemented")
}
func (UnimplementedGameServer) GetNewActorActivityInfo(context.Context, *Empty) (*NewActorActivity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewActorActivityInfo not implemented")
}
func (UnimplementedGameServer) SetNewActorActivityPass(context.Context, *IntPair) (*NewActorActivityUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNewActorActivityPass not implemented")
}
func (UnimplementedGameServer) GetNewActorActivityReward(context.Context, *IntPair) (*NewActorActivityUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewActorActivityReward not implemented")
}
func (UnimplementedGameServer) NoviceTaskGetInfo(context.Context, *Empty) (*NoviceTaskInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoviceTaskGetInfo not implemented")
}
func (UnimplementedGameServer) NoviceTaskReward(context.Context, *NoviceTaskRewardReq) (*NoviceTaskRewardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoviceTaskReward not implemented")
}
func (UnimplementedGameServer) NoviceTaskRemake(context.Context, *NoviceTaskRemakeReq) (*NoviceTaskInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoviceTaskRemake not implemented")
}
func (UnimplementedGameServer) NoviceDailyReward(context.Context, *NoviceDailyRewardReq) (*NoviceTaskRewardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoviceDailyReward not implemented")
}
func (UnimplementedGameServer) ActivitySignIn(context.Context, *ActivitySignInReq) (*ActivitySignInResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivitySignIn not implemented")
}
func (UnimplementedGameServer) ActivitySignInGetInfo(context.Context, *Empty) (*ActivitySignInInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivitySignInGetInfo not implemented")
}
func (UnimplementedGameServer) ActivitySignInReward(context.Context, *ActivitySignInReq) (*ActivitySignInResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivitySignInReward not implemented")
}
func (UnimplementedGameServer) CoinTimeGetInfo(context.Context, *Empty) (*CoinTimeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoinTimeGetInfo not implemented")
}
func (UnimplementedGameServer) ItemRecordReq(context.Context, *Empty) (*ItemRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ItemRecordReq not implemented")
}
func (UnimplementedGameServer) EggGetInfo(context.Context, *Empty) (*EggInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EggGetInfo not implemented")
}
func (UnimplementedGameServer) EggPlay(context.Context, *PlayReq) (*PlayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EggPlay not implemented")
}
func (UnimplementedGameServer) EggExchange(context.Context, *ExchangeReq) (*ExchangeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EggExchange not implemented")
}
func (UnimplementedGameServer) EggBuy(context.Context, *BuyReq) (*BuyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EggBuy not implemented")
}
func (UnimplementedGameServer) GetCourtInfo(context.Context, *Empty) (*CourtInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourtInfo not implemented")
}
func (UnimplementedGameServer) BuyCourtDecoration(context.Context, *BuyCourtDecoratorOpt) (*CourtBuyRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyCourtDecoration not implemented")
}
func (UnimplementedGameServer) LoadCourtDecoration(context.Context, *CourtDecoratorOpt) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadCourtDecoration not implemented")
}
func (UnimplementedGameServer) UnloadCourtDecoration(context.Context, *CourtDecoratorOpt) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnloadCourtDecoration not implemented")
}
func (UnimplementedGameServer) ChangeCourtUsed(context.Context, *CourtChange) (*CourtInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCourtUsed not implemented")
}
func (UnimplementedGameServer) FillCourtChip(context.Context, *FillCourtChipReq) (*ItemUpdateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FillCourtChip not implemented")
}
func (UnimplementedGameServer) AddItemToMe(context.Context, *ItemUpdate) (*ItemUpdateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItemToMe not implemented")
}
func (UnimplementedGameServer) AddTimeToMe(context.Context, *SetTimeOffsetData) (*SetTimeOffsetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTimeToMe not implemented")
}
func (UnimplementedGameServer) AddAllTimeToMe(context.Context, *SetTimeOffsetData) (*SetTimeOffsetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAllTimeToMe not implemented")
}
func (UnimplementedGameServer) GetPrivilegeInfo(context.Context, *Empty) (*PrivilegeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivilegeInfo not implemented")
}
func (UnimplementedGameServer) ShopNewGet(context.Context, *Empty) (*ShopNewInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShopNewGet not implemented")
}
func (UnimplementedGameServer) ShopNewBuy(context.Context, *ShopNewBuyReq) (*ShopNewBuyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShopNewBuy not implemented")
}
func (UnimplementedGameServer) ShopNewRefresh(context.Context, *ShopNewRefreshReq) (*ShopNewRefreshResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShopNewRefresh not implemented")
}
func (UnimplementedGameServer) AddAllActorToMe(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAllActorToMe not implemented")
}
func (UnimplementedGameServer) mustEmbedUnimplementedGameServer() {}

// UnsafeGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServer will
// result in compilation errors.
type UnsafeGameServer interface {
	mustEmbedUnimplementedGameServer()
}

func RegisterGameServer(s grpc.ServiceRegistrar, srv GameServer) {
	s.RegisterService(&Game_ServiceDesc, srv)
}

func _Game_GroupMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GroupMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GroupMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GroupMsg(ctx, req.(*GroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_PlayerBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).PlayerBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/PlayerBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).PlayerBase(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_ActorUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActorUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).ActorUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/ActorUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).ActorUpdate(ctx, req.(*ActorUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_ActorGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActorGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).ActorGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/ActorGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).ActorGroup(ctx, req.(*ActorGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_ActorShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActorShowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).ActorShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/ActorShow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).ActorShow(ctx, req.(*ActorShowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetActorOutPutStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetActorOutPutStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetActorOutPutStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetActorOutPutStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetActorsAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActorsAvailableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetActorsAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetActorsAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetActorsAvailable(ctx, req.(*ActorsAvailableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetActorsCanBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetActorsCanBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetActorsCanBuy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetActorsCanBuy(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetActorStatusAndTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetActorStatusAndTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetActorStatusAndTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetActorStatusAndTime(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_Tour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).Tour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/Tour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).Tour(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_TourReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).TourReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/TourReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).TourReward(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_TourAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).TourAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/TourAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).TourAdd(ctx, req.(*TourUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_Ladder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).Ladder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/Ladder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).Ladder(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_LadderReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LadderRewardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).LadderReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/LadderReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).LadderReward(ctx, req.(*LadderRewardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_FightResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FightResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).FightResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/FightResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).FightResult(ctx, req.(*FightResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_FightCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).FightCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/FightCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).FightCheck(ctx, req.(*MatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_FightRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FightReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).FightRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/FightRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).FightRequest(ctx, req.(*FightReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_EngageStateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEngageState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).EngageStateSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/EngageStateSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).EngageStateSet(ctx, req.(*SetEngageState))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_BattlePass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).BattlePass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/BattlePass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).BattlePass(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_BattlePassReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BattlePassRewardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).BattlePassReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/BattlePassReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).BattlePassReward(ctx, req.(*BattlePassRewardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_BattlePassBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BattlePassBuyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).BattlePassBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/BattlePassBuy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).BattlePassBuy(ctx, req.(*BattlePassBuyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_BattlePassLevelUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).BattlePassLevelUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/BattlePassLevelUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).BattlePassLevelUp(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_Gloryroad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).Gloryroad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/Gloryroad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).Gloryroad(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GloryroadReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GloryroadRewardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GloryroadReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GloryroadReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GloryroadReward(ctx, req.(*GloryroadRewardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GloryroadLastSeasonActorCupGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GloryroadLastSeasonActorCupGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GloryroadLastSeasonActorCupGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GloryroadLastSeasonActorCupGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GloryroadSeasonReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GloryroadSeasonReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GloryroadSeasonReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GloryroadSeasonReward(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_MissionGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).MissionGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/MissionGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).MissionGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_ControlGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).ControlGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/ControlGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).ControlGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_ShopGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).ShopGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/ShopGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).ShopGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_ShopBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopBuyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).ShopBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/ShopBuy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).ShopBuy(ctx, req.(*ShopBuyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_ShopRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopRefreshReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).ShopRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/ShopRefresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).ShopRefresh(ctx, req.(*ShopRefreshReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GuideGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GuideGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GuideGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GuideGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GuideMark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuideMarkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GuideMark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GuideMark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GuideMark(ctx, req.(*GuideMarkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_WeakGuideMark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeakGuideReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).WeakGuideMark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/WeakGuideMark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).WeakGuideMark(ctx, req.(*WeakGuideReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_WeakGuideInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).WeakGuideInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/WeakGuideInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).WeakGuideInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_WeakUIGuideMark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UIWeakGuideMarkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).WeakUIGuideMark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/WeakUIGuideMark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).WeakUIGuideMark(ctx, req.(*UIWeakGuideMarkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_PlayerPersonal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInviteCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).PlayerPersonal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/PlayerPersonal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).PlayerPersonal(ctx, req.(*PlayerInviteCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_PlayerAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerAvatarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).PlayerAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/PlayerAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).PlayerAvatar(ctx, req.(*PlayerAvatarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_PlayerName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).PlayerName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/PlayerName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).PlayerName(ctx, req.(*PlayerNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_ModifyAvatarFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyAvatarFrameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).ModifyAvatarFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/ModifyAvatarFrame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).ModifyAvatarFrame(ctx, req.(*ModifyAvatarFrameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_ModifyTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyTitleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).ModifyTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/ModifyTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).ModifyTitle(ctx, req.(*ModifyTitleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_ModifyColorful_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyColorfulReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).ModifyColorful(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/ModifyColorful",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).ModifyColorful(ctx, req.(*ModifyColorfulReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_RecordGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).RecordGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/RecordGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).RecordGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_SkinGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).SkinGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/SkinGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).SkinGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_SkinEquip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).SkinEquip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/SkinEquip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).SkinEquip(ctx, req.(*SkinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_SkillEquip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActorSkillReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).SkillEquip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/SkillEquip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).SkillEquip(ctx, req.(*ActorSkillReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_FriendRatify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendReqRatify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).FriendRatify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/FriendRatify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).FriendRatify(ctx, req.(*FriendReqRatify))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_FriendAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).FriendAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/FriendAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).FriendAdd(ctx, req.(*FriendAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_FriendInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).FriendInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/FriendInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).FriendInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_FriendRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).FriendRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/FriendRefresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).FriendRefresh(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_FriendDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInviteCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).FriendDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/FriendDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).FriendDelete(ctx, req.(*PlayerInviteCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_AcceptSharing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInviteCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).AcceptSharing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/AcceptSharing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).AcceptSharing(ctx, req.(*PlayerInviteCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetMatchParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetMatchParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetMatchParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetMatchParams(ctx, req.(*MatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetInviteInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetInviteInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetInviteInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetInviteInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_InviteReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteRewardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).InviteReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/InviteReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).InviteReward(ctx, req.(*InviteRewardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetMails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetMails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetMails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetMails(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetMailRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealMailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetMailRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetMailRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetMailRewards(ctx, req.(*DealMailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_SetMailRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealMailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).SetMailRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/SetMailRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).SetMailRead(ctx, req.(*DealMailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_DeleteMails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealMailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).DeleteMails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/DeleteMails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).DeleteMails(ctx, req.(*DealMailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_AdvertiseFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvertiseFinishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).AdvertiseFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/AdvertiseFinish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).AdvertiseFinish(ctx, req.(*AdvertiseFinishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetAdvertiseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetAdvertiseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetAdvertiseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetAdvertiseInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_AdvertiseReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvertiseRewardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).AdvertiseReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/AdvertiseReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).AdvertiseReward(ctx, req.(*AdvertiseRewardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetFriendInviteBattleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetFriendInviteBattleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetFriendInviteBattleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetFriendInviteBattleList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetFriendYuezhanList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetFriendYuezhanList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetFriendYuezhanList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetFriendYuezhanList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetSignIn7Day_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetSignIn7Day(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetSignIn7Day",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetSignIn7Day(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_SignIn7Day_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).SignIn7Day(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/SignIn7Day",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).SignIn7Day(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_BindAC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindActivateCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).BindAC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/BindAC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).BindAC(ctx, req.(*BindActivateCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_BindReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).BindReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/BindReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).BindReward(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_OhayooAccountBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OhayooBind)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).OhayooAccountBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/OhayooAccountBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).OhayooAccountBind(ctx, req.(*OhayooBind))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_AdvertiseBegin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).AdvertiseBegin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/AdvertiseBegin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).AdvertiseBegin(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_UseCDKeyReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseCDKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).UseCDKeyReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/UseCDKeyReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).UseCDKeyReq(ctx, req.(*UseCDKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_HasHakenGroupReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).HasHakenGroupReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/HasHakenGroupReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).HasHakenGroupReward(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetMainInterfaceMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetMainInterfaceMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetMainInterfaceMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetMainInterfaceMsg(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetChatLoginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetChatLoginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetChatLoginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetChatLoginInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetUserChatUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInviteCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetUserChatUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetUserChatUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetUserChatUserId(ctx, req.(*PlayerInviteCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetMultiUserChatUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiSingleChatUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetMultiUserChatUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetMultiUserChatUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetMultiUserChatUserId(ctx, req.(*MultiSingleChatUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetAchievementInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetAchievementInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetAchievementInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetAchievementInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_AchievementReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AchievementRewardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).AchievementReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/AchievementReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).AchievementReward(ctx, req.(*AchievementRewardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_AchievementEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AchievementEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).AchievementEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/AchievementEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).AchievementEvent(ctx, req.(*AchievementEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetAllFaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetAllFaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetAllFaceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetAllFaceInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_SetFaceSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FaceSlot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).SetFaceSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/SetFaceSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).SetFaceSlot(ctx, req.(*FaceSlot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_DailySignInInfoGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).DailySignInInfoGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/DailySignInInfoGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).DailySignInInfoGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_DailySignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).DailySignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/DailySignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).DailySignIn(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_DailySignInBeginAdvertise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).DailySignInBeginAdvertise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/DailySignInBeginAdvertise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).DailySignInBeginAdvertise(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_DailySignInFinishAdvertise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvertiseId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).DailySignInFinishAdvertise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/DailySignInFinishAdvertise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).DailySignInFinishAdvertise(ctx, req.(*AdvertiseId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_DailySignInReissue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReissueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).DailySignInReissue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/DailySignInReissue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).DailySignInReissue(ctx, req.(*ReissueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_DailySignInReceiveCumulativeReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveCumulativeRewardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).DailySignInReceiveCumulativeReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/DailySignInReceiveCumulativeReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).DailySignInReceiveCumulativeReward(ctx, req.(*ReceiveCumulativeRewardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_DailySignInGetTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).DailySignInGetTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/DailySignInGetTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).DailySignInGetTimestamp(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetStarInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetStarInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetStarInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetStarInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetStarReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetStarReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetStarReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetStarReward(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_LeaderboardGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderboardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).LeaderboardGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/LeaderboardGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).LeaderboardGet(ctx, req.(*LeaderboardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_LeaderboardLocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).LeaderboardLocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/LeaderboardLocate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).LeaderboardLocate(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_LeaderboardRelocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).LeaderboardRelocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/LeaderboardRelocate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).LeaderboardRelocate(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetEngageRecommendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngageRecommendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetEngageRecommendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetEngageRecommendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetEngageRecommendList(ctx, req.(*EngageRecommendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_ReceiveFirstRechargeGiftPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveFirstRechargeGiftPackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).ReceiveFirstRechargeGiftPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/ReceiveFirstRechargeGiftPack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).ReceiveFirstRechargeGiftPack(ctx, req.(*ReceiveFirstRechargeGiftPackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetGiftPackInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetGiftPackInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetGiftPackInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetGiftPackInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_BuySkinGiftPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).BuySkinGiftPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/BuySkinGiftPack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).BuySkinGiftPack(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_NewBieGiftReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).NewBieGiftReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/NewBieGiftReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).NewBieGiftReward(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetOperationalActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetOperationalActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetOperationalActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetOperationalActivity(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetKingRoundInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetKingRoundInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetKingRoundInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetKingRoundInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetKingRoundCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetKingRoundCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetKingRoundCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetKingRoundCard(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetKingRoundReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TakeKingRoundReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetKingRoundReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetKingRoundReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetKingRoundReward(ctx, req.(*TakeKingRoundReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_SignKingRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).SignKingRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/SignKingRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).SignKingRound(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_LockKingRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).LockKingRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/LockKingRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).LockKingRound(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_PersonalityGetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).PersonalityGetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/PersonalityGetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).PersonalityGetInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_TurntableBeginAd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).TurntableBeginAd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/TurntableBeginAd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).TurntableBeginAd(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_TurntableFinishAd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdFinishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).TurntableFinishAd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/TurntableFinishAd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).TurntableFinishAd(ctx, req.(*AdFinishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_PlayTurntable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TurntableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).PlayTurntable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/PlayTurntable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).PlayTurntable(ctx, req.(*TurntableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetTurntableInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetTurntableInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetTurntableInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetTurntableInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetOhayooOrderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetOhayooOrderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetOhayooOrderInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetOhayooOrderInfo(ctx, req.(*PayOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetAppStoreOrderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetAppStoreOrderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetAppStoreOrderInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetAppStoreOrderInfo(ctx, req.(*PayOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_AppStoreVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).AppStoreVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/AppStoreVerify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).AppStoreVerify(ctx, req.(*VerifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetWechatOrderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetWechatOrderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetWechatOrderInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetWechatOrderInfo(ctx, req.(*PayOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetAlipayOrderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetAlipayOrderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetAlipayOrderInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetAlipayOrderInfo(ctx, req.(*PayOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_CreateQRCodeOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).CreateQRCodeOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/CreateQRCodeOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).CreateQRCodeOrder(ctx, req.(*PayOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_CheckPayDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckOrderDelivery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).CheckPayDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/CheckPayDelivery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).CheckPayDelivery(ctx, req.(*CheckOrderDelivery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_ClientSetOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientOrderStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).ClientSetOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/ClientSetOrderStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).ClientSetOrderStatus(ctx, req.(*ClientOrderStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetCanPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanPay)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetCanPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetCanPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetCanPay(ctx, req.(*CanPay))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_SetRealNameInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealNameInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).SetRealNameInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/SetRealNameInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).SetRealNameInfo(ctx, req.(*RealNameInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetRealNameInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetRealNameInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetRealNameInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetRealNameInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_RealNameReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).RealNameReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/RealNameReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).RealNameReward(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_RealNameQueryRedirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).RealNameQueryRedirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/RealNameQueryRedirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).RealNameQueryRedirect(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_RealNameCheckRedirectReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealNameCheckRedirect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).RealNameCheckRedirectReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/RealNameCheckRedirectReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).RealNameCheckRedirectReq(ctx, req.(*RealNameCheckRedirect))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetNewActorActivityInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetNewActorActivityInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetNewActorActivityInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetNewActorActivityInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_SetNewActorActivityPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).SetNewActorActivityPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/SetNewActorActivityPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).SetNewActorActivityPass(ctx, req.(*IntPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetNewActorActivityReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetNewActorActivityReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetNewActorActivityReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetNewActorActivityReward(ctx, req.(*IntPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_NoviceTaskGetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).NoviceTaskGetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/NoviceTaskGetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).NoviceTaskGetInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_NoviceTaskReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoviceTaskRewardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).NoviceTaskReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/NoviceTaskReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).NoviceTaskReward(ctx, req.(*NoviceTaskRewardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_NoviceTaskRemake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoviceTaskRemakeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).NoviceTaskRemake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/NoviceTaskRemake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).NoviceTaskRemake(ctx, req.(*NoviceTaskRemakeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_NoviceDailyReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoviceDailyRewardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).NoviceDailyReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/NoviceDailyReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).NoviceDailyReward(ctx, req.(*NoviceDailyRewardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_ActivitySignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivitySignInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).ActivitySignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/ActivitySignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).ActivitySignIn(ctx, req.(*ActivitySignInReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_ActivitySignInGetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).ActivitySignInGetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/ActivitySignInGetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).ActivitySignInGetInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_ActivitySignInReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivitySignInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).ActivitySignInReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/ActivitySignInReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).ActivitySignInReward(ctx, req.(*ActivitySignInReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_CoinTimeGetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).CoinTimeGetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/CoinTimeGetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).CoinTimeGetInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_ItemRecordReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).ItemRecordReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/ItemRecordReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).ItemRecordReq(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_EggGetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).EggGetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/EggGetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).EggGetInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_EggPlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).EggPlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/EggPlay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).EggPlay(ctx, req.(*PlayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_EggExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).EggExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/EggExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).EggExchange(ctx, req.(*ExchangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_EggBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).EggBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/EggBuy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).EggBuy(ctx, req.(*BuyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetCourtInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetCourtInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetCourtInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetCourtInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_BuyCourtDecoration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyCourtDecoratorOpt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).BuyCourtDecoration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/BuyCourtDecoration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).BuyCourtDecoration(ctx, req.(*BuyCourtDecoratorOpt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_LoadCourtDecoration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourtDecoratorOpt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).LoadCourtDecoration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/LoadCourtDecoration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).LoadCourtDecoration(ctx, req.(*CourtDecoratorOpt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_UnloadCourtDecoration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourtDecoratorOpt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).UnloadCourtDecoration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/UnloadCourtDecoration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).UnloadCourtDecoration(ctx, req.(*CourtDecoratorOpt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_ChangeCourtUsed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourtChange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).ChangeCourtUsed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/ChangeCourtUsed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).ChangeCourtUsed(ctx, req.(*CourtChange))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_FillCourtChip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FillCourtChipReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).FillCourtChip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/FillCourtChip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).FillCourtChip(ctx, req.(*FillCourtChipReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_AddItemToMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).AddItemToMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/AddItemToMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).AddItemToMe(ctx, req.(*ItemUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_AddTimeToMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTimeOffsetData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).AddTimeToMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/AddTimeToMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).AddTimeToMe(ctx, req.(*SetTimeOffsetData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_AddAllTimeToMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTimeOffsetData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).AddAllTimeToMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/AddAllTimeToMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).AddAllTimeToMe(ctx, req.(*SetTimeOffsetData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetPrivilegeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetPrivilegeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetPrivilegeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetPrivilegeInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_ShopNewGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).ShopNewGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/ShopNewGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).ShopNewGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_ShopNewBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopNewBuyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).ShopNewBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/ShopNewBuy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).ShopNewBuy(ctx, req.(*ShopNewBuyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_ShopNewRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopNewRefreshReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).ShopNewRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/ShopNewRefresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).ShopNewRefresh(ctx, req.(*ShopNewRefreshReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_AddAllActorToMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).AddAllActorToMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/AddAllActorToMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).AddAllActorToMe(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Game_ServiceDesc is the grpc.ServiceDesc for Game service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Game_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Game",
	HandlerType: (*GameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GroupMsg",
			Handler:    _Game_GroupMsg_Handler,
		},
		{
			MethodName: "PlayerBase",
			Handler:    _Game_PlayerBase_Handler,
		},
		{
			MethodName: "ActorUpdate",
			Handler:    _Game_ActorUpdate_Handler,
		},
		{
			MethodName: "ActorGroup",
			Handler:    _Game_ActorGroup_Handler,
		},
		{
			MethodName: "ActorShow",
			Handler:    _Game_ActorShow_Handler,
		},
		{
			MethodName: "GetActorOutPutStatus",
			Handler:    _Game_GetActorOutPutStatus_Handler,
		},
		{
			MethodName: "GetActorsAvailable",
			Handler:    _Game_GetActorsAvailable_Handler,
		},
		{
			MethodName: "GetActorsCanBuy",
			Handler:    _Game_GetActorsCanBuy_Handler,
		},
		{
			MethodName: "GetActorStatusAndTime",
			Handler:    _Game_GetActorStatusAndTime_Handler,
		},
		{
			MethodName: "Tour",
			Handler:    _Game_Tour_Handler,
		},
		{
			MethodName: "TourReward",
			Handler:    _Game_TourReward_Handler,
		},
		{
			MethodName: "TourAdd",
			Handler:    _Game_TourAdd_Handler,
		},
		{
			MethodName: "Ladder",
			Handler:    _Game_Ladder_Handler,
		},
		{
			MethodName: "LadderReward",
			Handler:    _Game_LadderReward_Handler,
		},
		{
			MethodName: "FightResult",
			Handler:    _Game_FightResult_Handler,
		},
		{
			MethodName: "FightCheck",
			Handler:    _Game_FightCheck_Handler,
		},
		{
			MethodName: "FightRequest",
			Handler:    _Game_FightRequest_Handler,
		},
		{
			MethodName: "EngageStateSet",
			Handler:    _Game_EngageStateSet_Handler,
		},
		{
			MethodName: "BattlePass",
			Handler:    _Game_BattlePass_Handler,
		},
		{
			MethodName: "BattlePassReward",
			Handler:    _Game_BattlePassReward_Handler,
		},
		{
			MethodName: "BattlePassBuy",
			Handler:    _Game_BattlePassBuy_Handler,
		},
		{
			MethodName: "BattlePassLevelUp",
			Handler:    _Game_BattlePassLevelUp_Handler,
		},
		{
			MethodName: "Gloryroad",
			Handler:    _Game_Gloryroad_Handler,
		},
		{
			MethodName: "GloryroadReward",
			Handler:    _Game_GloryroadReward_Handler,
		},
		{
			MethodName: "GloryroadLastSeasonActorCupGet",
			Handler:    _Game_GloryroadLastSeasonActorCupGet_Handler,
		},
		{
			MethodName: "GloryroadSeasonReward",
			Handler:    _Game_GloryroadSeasonReward_Handler,
		},
		{
			MethodName: "MissionGet",
			Handler:    _Game_MissionGet_Handler,
		},
		{
			MethodName: "ControlGet",
			Handler:    _Game_ControlGet_Handler,
		},
		{
			MethodName: "ShopGet",
			Handler:    _Game_ShopGet_Handler,
		},
		{
			MethodName: "ShopBuy",
			Handler:    _Game_ShopBuy_Handler,
		},
		{
			MethodName: "ShopRefresh",
			Handler:    _Game_ShopRefresh_Handler,
		},
		{
			MethodName: "GuideGet",
			Handler:    _Game_GuideGet_Handler,
		},
		{
			MethodName: "GuideMark",
			Handler:    _Game_GuideMark_Handler,
		},
		{
			MethodName: "WeakGuideMark",
			Handler:    _Game_WeakGuideMark_Handler,
		},
		{
			MethodName: "WeakGuideInfo",
			Handler:    _Game_WeakGuideInfo_Handler,
		},
		{
			MethodName: "WeakUIGuideMark",
			Handler:    _Game_WeakUIGuideMark_Handler,
		},
		{
			MethodName: "PlayerPersonal",
			Handler:    _Game_PlayerPersonal_Handler,
		},
		{
			MethodName: "PlayerAvatar",
			Handler:    _Game_PlayerAvatar_Handler,
		},
		{
			MethodName: "PlayerName",
			Handler:    _Game_PlayerName_Handler,
		},
		{
			MethodName: "ModifyAvatarFrame",
			Handler:    _Game_ModifyAvatarFrame_Handler,
		},
		{
			MethodName: "ModifyTitle",
			Handler:    _Game_ModifyTitle_Handler,
		},
		{
			MethodName: "ModifyColorful",
			Handler:    _Game_ModifyColorful_Handler,
		},
		{
			MethodName: "RecordGet",
			Handler:    _Game_RecordGet_Handler,
		},
		{
			MethodName: "SkinGet",
			Handler:    _Game_SkinGet_Handler,
		},
		{
			MethodName: "SkinEquip",
			Handler:    _Game_SkinEquip_Handler,
		},
		{
			MethodName: "SkillEquip",
			Handler:    _Game_SkillEquip_Handler,
		},
		{
			MethodName: "FriendRatify",
			Handler:    _Game_FriendRatify_Handler,
		},
		{
			MethodName: "FriendAdd",
			Handler:    _Game_FriendAdd_Handler,
		},
		{
			MethodName: "FriendInfo",
			Handler:    _Game_FriendInfo_Handler,
		},
		{
			MethodName: "FriendRefresh",
			Handler:    _Game_FriendRefresh_Handler,
		},
		{
			MethodName: "FriendDelete",
			Handler:    _Game_FriendDelete_Handler,
		},
		{
			MethodName: "AcceptSharing",
			Handler:    _Game_AcceptSharing_Handler,
		},
		{
			MethodName: "GetMatchParams",
			Handler:    _Game_GetMatchParams_Handler,
		},
		{
			MethodName: "GetInviteInfo",
			Handler:    _Game_GetInviteInfo_Handler,
		},
		{
			MethodName: "InviteReward",
			Handler:    _Game_InviteReward_Handler,
		},
		{
			MethodName: "GetMails",
			Handler:    _Game_GetMails_Handler,
		},
		{
			MethodName: "GetMailRewards",
			Handler:    _Game_GetMailRewards_Handler,
		},
		{
			MethodName: "SetMailRead",
			Handler:    _Game_SetMailRead_Handler,
		},
		{
			MethodName: "DeleteMails",
			Handler:    _Game_DeleteMails_Handler,
		},
		{
			MethodName: "AdvertiseFinish",
			Handler:    _Game_AdvertiseFinish_Handler,
		},
		{
			MethodName: "GetAdvertiseInfo",
			Handler:    _Game_GetAdvertiseInfo_Handler,
		},
		{
			MethodName: "AdvertiseReward",
			Handler:    _Game_AdvertiseReward_Handler,
		},
		{
			MethodName: "GetFriendInviteBattleList",
			Handler:    _Game_GetFriendInviteBattleList_Handler,
		},
		{
			MethodName: "GetFriendYuezhanList",
			Handler:    _Game_GetFriendYuezhanList_Handler,
		},
		{
			MethodName: "GetSignIn7Day",
			Handler:    _Game_GetSignIn7Day_Handler,
		},
		{
			MethodName: "SignIn7Day",
			Handler:    _Game_SignIn7Day_Handler,
		},
		{
			MethodName: "BindAC",
			Handler:    _Game_BindAC_Handler,
		},
		{
			MethodName: "BindReward",
			Handler:    _Game_BindReward_Handler,
		},
		{
			MethodName: "OhayooAccountBind",
			Handler:    _Game_OhayooAccountBind_Handler,
		},
		{
			MethodName: "AdvertiseBegin",
			Handler:    _Game_AdvertiseBegin_Handler,
		},
		{
			MethodName: "UseCDKeyReq",
			Handler:    _Game_UseCDKeyReq_Handler,
		},
		{
			MethodName: "HasHakenGroupReward",
			Handler:    _Game_HasHakenGroupReward_Handler,
		},
		{
			MethodName: "GetMainInterfaceMsg",
			Handler:    _Game_GetMainInterfaceMsg_Handler,
		},
		{
			MethodName: "GetChatLoginInfo",
			Handler:    _Game_GetChatLoginInfo_Handler,
		},
		{
			MethodName: "GetUserChatUserId",
			Handler:    _Game_GetUserChatUserId_Handler,
		},
		{
			MethodName: "GetMultiUserChatUserId",
			Handler:    _Game_GetMultiUserChatUserId_Handler,
		},
		{
			MethodName: "GetAchievementInfo",
			Handler:    _Game_GetAchievementInfo_Handler,
		},
		{
			MethodName: "AchievementReward",
			Handler:    _Game_AchievementReward_Handler,
		},
		{
			MethodName: "AchievementEvent",
			Handler:    _Game_AchievementEvent_Handler,
		},
		{
			MethodName: "GetAllFaceInfo",
			Handler:    _Game_GetAllFaceInfo_Handler,
		},
		{
			MethodName: "SetFaceSlot",
			Handler:    _Game_SetFaceSlot_Handler,
		},
		{
			MethodName: "DailySignInInfoGet",
			Handler:    _Game_DailySignInInfoGet_Handler,
		},
		{
			MethodName: "DailySignIn",
			Handler:    _Game_DailySignIn_Handler,
		},
		{
			MethodName: "DailySignInBeginAdvertise",
			Handler:    _Game_DailySignInBeginAdvertise_Handler,
		},
		{
			MethodName: "DailySignInFinishAdvertise",
			Handler:    _Game_DailySignInFinishAdvertise_Handler,
		},
		{
			MethodName: "DailySignInReissue",
			Handler:    _Game_DailySignInReissue_Handler,
		},
		{
			MethodName: "DailySignInReceiveCumulativeReward",
			Handler:    _Game_DailySignInReceiveCumulativeReward_Handler,
		},
		{
			MethodName: "DailySignInGetTimestamp",
			Handler:    _Game_DailySignInGetTimestamp_Handler,
		},
		{
			MethodName: "GetStarInfo",
			Handler:    _Game_GetStarInfo_Handler,
		},
		{
			MethodName: "GetStarReward",
			Handler:    _Game_GetStarReward_Handler,
		},
		{
			MethodName: "LeaderboardGet",
			Handler:    _Game_LeaderboardGet_Handler,
		},
		{
			MethodName: "LeaderboardLocate",
			Handler:    _Game_LeaderboardLocate_Handler,
		},
		{
			MethodName: "LeaderboardRelocate",
			Handler:    _Game_LeaderboardRelocate_Handler,
		},
		{
			MethodName: "GetEngageRecommendList",
			Handler:    _Game_GetEngageRecommendList_Handler,
		},
		{
			MethodName: "ReceiveFirstRechargeGiftPack",
			Handler:    _Game_ReceiveFirstRechargeGiftPack_Handler,
		},
		{
			MethodName: "GetGiftPackInfo",
			Handler:    _Game_GetGiftPackInfo_Handler,
		},
		{
			MethodName: "BuySkinGiftPack",
			Handler:    _Game_BuySkinGiftPack_Handler,
		},
		{
			MethodName: "NewBieGiftReward",
			Handler:    _Game_NewBieGiftReward_Handler,
		},
		{
			MethodName: "GetOperationalActivity",
			Handler:    _Game_GetOperationalActivity_Handler,
		},
		{
			MethodName: "GetKingRoundInfo",
			Handler:    _Game_GetKingRoundInfo_Handler,
		},
		{
			MethodName: "GetKingRoundCard",
			Handler:    _Game_GetKingRoundCard_Handler,
		},
		{
			MethodName: "GetKingRoundReward",
			Handler:    _Game_GetKingRoundReward_Handler,
		},
		{
			MethodName: "SignKingRound",
			Handler:    _Game_SignKingRound_Handler,
		},
		{
			MethodName: "LockKingRound",
			Handler:    _Game_LockKingRound_Handler,
		},
		{
			MethodName: "PersonalityGetInfo",
			Handler:    _Game_PersonalityGetInfo_Handler,
		},
		{
			MethodName: "TurntableBeginAd",
			Handler:    _Game_TurntableBeginAd_Handler,
		},
		{
			MethodName: "TurntableFinishAd",
			Handler:    _Game_TurntableFinishAd_Handler,
		},
		{
			MethodName: "PlayTurntable",
			Handler:    _Game_PlayTurntable_Handler,
		},
		{
			MethodName: "GetTurntableInfo",
			Handler:    _Game_GetTurntableInfo_Handler,
		},
		{
			MethodName: "GetOhayooOrderInfo",
			Handler:    _Game_GetOhayooOrderInfo_Handler,
		},
		{
			MethodName: "GetAppStoreOrderInfo",
			Handler:    _Game_GetAppStoreOrderInfo_Handler,
		},
		{
			MethodName: "AppStoreVerify",
			Handler:    _Game_AppStoreVerify_Handler,
		},
		{
			MethodName: "GetWechatOrderInfo",
			Handler:    _Game_GetWechatOrderInfo_Handler,
		},
		{
			MethodName: "GetAlipayOrderInfo",
			Handler:    _Game_GetAlipayOrderInfo_Handler,
		},
		{
			MethodName: "CreateQRCodeOrder",
			Handler:    _Game_CreateQRCodeOrder_Handler,
		},
		{
			MethodName: "CheckPayDelivery",
			Handler:    _Game_CheckPayDelivery_Handler,
		},
		{
			MethodName: "ClientSetOrderStatus",
			Handler:    _Game_ClientSetOrderStatus_Handler,
		},
		{
			MethodName: "GetCanPay",
			Handler:    _Game_GetCanPay_Handler,
		},
		{
			MethodName: "SetRealNameInfo",
			Handler:    _Game_SetRealNameInfo_Handler,
		},
		{
			MethodName: "GetRealNameInfo",
			Handler:    _Game_GetRealNameInfo_Handler,
		},
		{
			MethodName: "RealNameReward",
			Handler:    _Game_RealNameReward_Handler,
		},
		{
			MethodName: "RealNameQueryRedirect",
			Handler:    _Game_RealNameQueryRedirect_Handler,
		},
		{
			MethodName: "RealNameCheckRedirectReq",
			Handler:    _Game_RealNameCheckRedirectReq_Handler,
		},
		{
			MethodName: "GetNewActorActivityInfo",
			Handler:    _Game_GetNewActorActivityInfo_Handler,
		},
		{
			MethodName: "SetNewActorActivityPass",
			Handler:    _Game_SetNewActorActivityPass_Handler,
		},
		{
			MethodName: "GetNewActorActivityReward",
			Handler:    _Game_GetNewActorActivityReward_Handler,
		},
		{
			MethodName: "NoviceTaskGetInfo",
			Handler:    _Game_NoviceTaskGetInfo_Handler,
		},
		{
			MethodName: "NoviceTaskReward",
			Handler:    _Game_NoviceTaskReward_Handler,
		},
		{
			MethodName: "NoviceTaskRemake",
			Handler:    _Game_NoviceTaskRemake_Handler,
		},
		{
			MethodName: "NoviceDailyReward",
			Handler:    _Game_NoviceDailyReward_Handler,
		},
		{
			MethodName: "ActivitySignIn",
			Handler:    _Game_ActivitySignIn_Handler,
		},
		{
			MethodName: "ActivitySignInGetInfo",
			Handler:    _Game_ActivitySignInGetInfo_Handler,
		},
		{
			MethodName: "ActivitySignInReward",
			Handler:    _Game_ActivitySignInReward_Handler,
		},
		{
			MethodName: "CoinTimeGetInfo",
			Handler:    _Game_CoinTimeGetInfo_Handler,
		},
		{
			MethodName: "ItemRecordReq",
			Handler:    _Game_ItemRecordReq_Handler,
		},
		{
			MethodName: "EggGetInfo",
			Handler:    _Game_EggGetInfo_Handler,
		},
		{
			MethodName: "EggPlay",
			Handler:    _Game_EggPlay_Handler,
		},
		{
			MethodName: "EggExchange",
			Handler:    _Game_EggExchange_Handler,
		},
		{
			MethodName: "EggBuy",
			Handler:    _Game_EggBuy_Handler,
		},
		{
			MethodName: "GetCourtInfo",
			Handler:    _Game_GetCourtInfo_Handler,
		},
		{
			MethodName: "BuyCourtDecoration",
			Handler:    _Game_BuyCourtDecoration_Handler,
		},
		{
			MethodName: "LoadCourtDecoration",
			Handler:    _Game_LoadCourtDecoration_Handler,
		},
		{
			MethodName: "UnloadCourtDecoration",
			Handler:    _Game_UnloadCourtDecoration_Handler,
		},
		{
			MethodName: "ChangeCourtUsed",
			Handler:    _Game_ChangeCourtUsed_Handler,
		},
		{
			MethodName: "FillCourtChip",
			Handler:    _Game_FillCourtChip_Handler,
		},
		{
			MethodName: "AddItemToMe",
			Handler:    _Game_AddItemToMe_Handler,
		},
		{
			MethodName: "AddTimeToMe",
			Handler:    _Game_AddTimeToMe_Handler,
		},
		{
			MethodName: "AddAllTimeToMe",
			Handler:    _Game_AddAllTimeToMe_Handler,
		},
		{
			MethodName: "GetPrivilegeInfo",
			Handler:    _Game_GetPrivilegeInfo_Handler,
		},
		{
			MethodName: "ShopNewGet",
			Handler:    _Game_ShopNewGet_Handler,
		},
		{
			MethodName: "ShopNewBuy",
			Handler:    _Game_ShopNewBuy_Handler,
		},
		{
			MethodName: "ShopNewRefresh",
			Handler:    _Game_ShopNewRefresh_Handler,
		},
		{
			MethodName: "AddAllActorToMe",
			Handler:    _Game_AddAllActorToMe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_game.proto",
}
