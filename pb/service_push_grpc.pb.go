// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PushClient is the client API for Push service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PushClient interface {
	// 推送玩家好友邀请
	PushKick(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RspKick, error)
	// 推送玩家好友数据
	FriendInfoPush(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FriendInfoResp, error)
	// 推送玩家邀请数据
	InviteInfoPush(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InviteInfo, error)
	// 推送有新邮件
	PushNewMail(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// 推送有新成就完成
	PushAchievement(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AchievementPush, error)
	// 推送首充礼包可领取
	PushGetFirstRechargeGiftPack(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GiftPackInfo, error)
	PushPayDelivery(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ItemUpdateResult, error)
	// 推送有新商品
	PushShopNew(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	PushOrderFinished(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OrderFinished, error)
	PushCoinTimeInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CoinTimeInfo, error)
	// 新手任务,有新任务完成时推送
	PushNoviceFinish(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// 推送toast
	PushToast(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ToastPushMsg, error)
	// 推送toast
	PushItemRecord(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ItemRecordOne, error)
	// 条件触发推送,通知客户端返回主界面时需要拉商店
	CommonConditionPush(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// 条件触发推送,通知客户端返回主界面时需要拉弹窗
	CommonConditionPopUpPush(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type pushClient struct {
	cc grpc.ClientConnInterface
}

func NewPushClient(cc grpc.ClientConnInterface) PushClient {
	return &pushClient{cc}
}

func (c *pushClient) PushKick(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RspKick, error) {
	out := new(RspKick)
	err := c.cc.Invoke(ctx, "/Push/PushKick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) FriendInfoPush(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FriendInfoResp, error) {
	out := new(FriendInfoResp)
	err := c.cc.Invoke(ctx, "/Push/FriendInfoPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) InviteInfoPush(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InviteInfo, error) {
	out := new(InviteInfo)
	err := c.cc.Invoke(ctx, "/Push/InviteInfoPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) PushNewMail(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Push/PushNewMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) PushAchievement(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AchievementPush, error) {
	out := new(AchievementPush)
	err := c.cc.Invoke(ctx, "/Push/PushAchievement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) PushGetFirstRechargeGiftPack(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GiftPackInfo, error) {
	out := new(GiftPackInfo)
	err := c.cc.Invoke(ctx, "/Push/PushGetFirstRechargeGiftPack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) PushPayDelivery(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ItemUpdateResult, error) {
	out := new(ItemUpdateResult)
	err := c.cc.Invoke(ctx, "/Push/PushPayDelivery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) PushShopNew(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Push/PushShopNew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) PushOrderFinished(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OrderFinished, error) {
	out := new(OrderFinished)
	err := c.cc.Invoke(ctx, "/Push/PushOrderFinished", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) PushCoinTimeInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CoinTimeInfo, error) {
	out := new(CoinTimeInfo)
	err := c.cc.Invoke(ctx, "/Push/PushCoinTimeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) PushNoviceFinish(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Push/PushNoviceFinish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) PushToast(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ToastPushMsg, error) {
	out := new(ToastPushMsg)
	err := c.cc.Invoke(ctx, "/Push/PushToast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) PushItemRecord(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ItemRecordOne, error) {
	out := new(ItemRecordOne)
	err := c.cc.Invoke(ctx, "/Push/PushItemRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) CommonConditionPush(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Push/CommonConditionPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) CommonConditionPopUpPush(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Push/CommonConditionPopUpPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PushServer is the server API for Push service.
// All implementations must embed UnimplementedPushServer
// for forward compatibility
type PushServer interface {
	// 推送玩家好友邀请
	PushKick(context.Context, *Empty) (*RspKick, error)
	// 推送玩家好友数据
	FriendInfoPush(context.Context, *Empty) (*FriendInfoResp, error)
	// 推送玩家邀请数据
	InviteInfoPush(context.Context, *Empty) (*InviteInfo, error)
	// 推送有新邮件
	PushNewMail(context.Context, *Empty) (*Empty, error)
	// 推送有新成就完成
	PushAchievement(context.Context, *Empty) (*AchievementPush, error)
	// 推送首充礼包可领取
	PushGetFirstRechargeGiftPack(context.Context, *Empty) (*GiftPackInfo, error)
	PushPayDelivery(context.Context, *Empty) (*ItemUpdateResult, error)
	// 推送有新商品
	PushShopNew(context.Context, *Empty) (*Empty, error)
	PushOrderFinished(context.Context, *Empty) (*OrderFinished, error)
	PushCoinTimeInfo(context.Context, *Empty) (*CoinTimeInfo, error)
	// 新手任务,有新任务完成时推送
	PushNoviceFinish(context.Context, *Empty) (*Empty, error)
	// 推送toast
	PushToast(context.Context, *Empty) (*ToastPushMsg, error)
	// 推送toast
	PushItemRecord(context.Context, *Empty) (*ItemRecordOne, error)
	// 条件触发推送,通知客户端返回主界面时需要拉商店
	CommonConditionPush(context.Context, *Empty) (*Empty, error)
	// 条件触发推送,通知客户端返回主界面时需要拉弹窗
	CommonConditionPopUpPush(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedPushServer()
}

// UnimplementedPushServer must be embedded to have forward compatible implementations.
type UnimplementedPushServer struct {
}

func (UnimplementedPushServer) PushKick(context.Context, *Empty) (*RspKick, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushKick not implemented")
}
func (UnimplementedPushServer) FriendInfoPush(context.Context, *Empty) (*FriendInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendInfoPush not implemented")
}
func (UnimplementedPushServer) InviteInfoPush(context.Context, *Empty) (*InviteInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteInfoPush not implemented")
}
func (UnimplementedPushServer) PushNewMail(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushNewMail not implemented")
}
func (UnimplementedPushServer) PushAchievement(context.Context, *Empty) (*AchievementPush, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushAchievement not implemented")
}
func (UnimplementedPushServer) PushGetFirstRechargeGiftPack(context.Context, *Empty) (*GiftPackInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushGetFirstRechargeGiftPack not implemented")
}
func (UnimplementedPushServer) PushPayDelivery(context.Context, *Empty) (*ItemUpdateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushPayDelivery not implemented")
}
func (UnimplementedPushServer) PushShopNew(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushShopNew not implemented")
}
func (UnimplementedPushServer) PushOrderFinished(context.Context, *Empty) (*OrderFinished, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushOrderFinished not implemented")
}
func (UnimplementedPushServer) PushCoinTimeInfo(context.Context, *Empty) (*CoinTimeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushCoinTimeInfo not implemented")
}
func (UnimplementedPushServer) PushNoviceFinish(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushNoviceFinish not implemented")
}
func (UnimplementedPushServer) PushToast(context.Context, *Empty) (*ToastPushMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushToast not implemented")
}
func (UnimplementedPushServer) PushItemRecord(context.Context, *Empty) (*ItemRecordOne, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushItemRecord not implemented")
}
func (UnimplementedPushServer) CommonConditionPush(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonConditionPush not implemented")
}
func (UnimplementedPushServer) CommonConditionPopUpPush(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonConditionPopUpPush not implemented")
}
func (UnimplementedPushServer) mustEmbedUnimplementedPushServer() {}

// UnsafePushServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PushServer will
// result in compilation errors.
type UnsafePushServer interface {
	mustEmbedUnimplementedPushServer()
}

func RegisterPushServer(s grpc.ServiceRegistrar, srv PushServer) {
	s.RegisterService(&Push_ServiceDesc, srv)
}

func _Push_PushKick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).PushKick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Push/PushKick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).PushKick(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_FriendInfoPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).FriendInfoPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Push/FriendInfoPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).FriendInfoPush(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_InviteInfoPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).InviteInfoPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Push/InviteInfoPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).InviteInfoPush(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_PushNewMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).PushNewMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Push/PushNewMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).PushNewMail(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_PushAchievement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).PushAchievement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Push/PushAchievement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).PushAchievement(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_PushGetFirstRechargeGiftPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).PushGetFirstRechargeGiftPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Push/PushGetFirstRechargeGiftPack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).PushGetFirstRechargeGiftPack(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_PushPayDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).PushPayDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Push/PushPayDelivery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).PushPayDelivery(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_PushShopNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).PushShopNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Push/PushShopNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).PushShopNew(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_PushOrderFinished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).PushOrderFinished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Push/PushOrderFinished",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).PushOrderFinished(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_PushCoinTimeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).PushCoinTimeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Push/PushCoinTimeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).PushCoinTimeInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_PushNoviceFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).PushNoviceFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Push/PushNoviceFinish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).PushNoviceFinish(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_PushToast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).PushToast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Push/PushToast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).PushToast(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_PushItemRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).PushItemRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Push/PushItemRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).PushItemRecord(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_CommonConditionPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).CommonConditionPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Push/CommonConditionPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).CommonConditionPush(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_CommonConditionPopUpPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).CommonConditionPopUpPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Push/CommonConditionPopUpPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).CommonConditionPopUpPush(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Push_ServiceDesc is the grpc.ServiceDesc for Push service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Push_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Push",
	HandlerType: (*PushServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushKick",
			Handler:    _Push_PushKick_Handler,
		},
		{
			MethodName: "FriendInfoPush",
			Handler:    _Push_FriendInfoPush_Handler,
		},
		{
			MethodName: "InviteInfoPush",
			Handler:    _Push_InviteInfoPush_Handler,
		},
		{
			MethodName: "PushNewMail",
			Handler:    _Push_PushNewMail_Handler,
		},
		{
			MethodName: "PushAchievement",
			Handler:    _Push_PushAchievement_Handler,
		},
		{
			MethodName: "PushGetFirstRechargeGiftPack",
			Handler:    _Push_PushGetFirstRechargeGiftPack_Handler,
		},
		{
			MethodName: "PushPayDelivery",
			Handler:    _Push_PushPayDelivery_Handler,
		},
		{
			MethodName: "PushShopNew",
			Handler:    _Push_PushShopNew_Handler,
		},
		{
			MethodName: "PushOrderFinished",
			Handler:    _Push_PushOrderFinished_Handler,
		},
		{
			MethodName: "PushCoinTimeInfo",
			Handler:    _Push_PushCoinTimeInfo_Handler,
		},
		{
			MethodName: "PushNoviceFinish",
			Handler:    _Push_PushNoviceFinish_Handler,
		},
		{
			MethodName: "PushToast",
			Handler:    _Push_PushToast_Handler,
		},
		{
			MethodName: "PushItemRecord",
			Handler:    _Push_PushItemRecord_Handler,
		},
		{
			MethodName: "CommonConditionPush",
			Handler:    _Push_CommonConditionPush_Handler,
		},
		{
			MethodName: "CommonConditionPopUpPush",
			Handler:    _Push_CommonConditionPopUpPush_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_push.proto",
}
